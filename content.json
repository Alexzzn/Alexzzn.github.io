{"meta":{"title":"MyBlog","subtitle":"博客","description":"我的博客分享","author":"zzn","url":"https://Alexzzn.github.io"},"pages":[{"title":"categories","date":"2018-07-17T06:15:22.000Z","updated":"2018-07-17T06:15:22.565Z","comments":true,"path":"categories/index.html","permalink":"https://Alexzzn.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-07-17T06:15:12.000Z","updated":"2018-07-17T06:15:12.893Z","comments":true,"path":"tags/index.html","permalink":"https://Alexzzn.github.io/tags/index.html","excerpt":"","text":""},{"title":"关于我的博客","date":"2018-07-18T02:42:18.689Z","updated":"2018-07-18T02:31:20.622Z","comments":false,"path":"about/index.html","permalink":"https://Alexzzn.github.io/about/index.html","excerpt":"","text":"关于我的博客"}],"posts":[{"title":"mysql","slug":"Web/mysql","date":"2018-07-19T01:06:45.245Z","updated":"2018-07-19T01:06:45.251Z","comments":true,"path":"2018/07/19/Web/mysql/","link":"","permalink":"https://Alexzzn.github.io/2018/07/19/Web/mysql/","excerpt":"","text":"`php方法1： 用SET PASSWORD命令 mysql -u root mysql&gt; SET PASSWORD FOR ‘root‘@’localhost’ = PASSWORD(‘newpass’); 方法2：用mysqladmin mysqladmin -u root password “newpass” 如果root已经设置过密码，采用如下方法 mysqladmin -u root password oldpass “newpass” 方法3 :UPDATE直接编辑user表 mysql -u root mysql&gt; use mysql; mysql&gt; UPDATE user SET Password = PASSWORD(‘newpass’) WHERE user = ‘root’; mysql&gt; FLUSH PRIVILEGES; &lt;&lt; 在丢失root密码的时候，可以这样 mysqld_safe –skip-grant-tables&amp; mysql -u root mysql mysql&gt; UPDATE user SET password=PASSWORD(“new password”) WHERE user=’root’; mysql&gt; FLUSH PRIVILEGES; 4, mac mysql error You must reset your password using ALTER USER statement before executing this statement. step 1: SET PASSWORD = PASSWORD(‘your new password’); step 2: ALTER USER &apos;root&apos;@&apos;localhost&apos; PASSWORD EXPIRE NEVER; step 3: flush privileges; 5.修改密码强度检测： validate_password_length：密码最小长度。 validate_password_mixed_case_count：密码至少要包含的小写字母个数和大写字母个数。 validate_password_number_count：密码至少要包含的数字个数。 validate_password_policy：密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG。 validate_password_special_char_count：密码至少要包含的特殊字符数。 --&gt; set golbal set global validate_password_mixed_case_count=0; 查看数据库位置 show variables like ‘%datadir%’;","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"字符串","slug":"Server/字符串","date":"2018-07-19T01:04:54.239Z","updated":"2018-07-19T01:04:54.240Z","comments":true,"path":"2018/07/19/Server/字符串/","link":"","permalink":"https://Alexzzn.github.io/2018/07/19/Server/字符串/","excerpt":"","text":"`python #!/bin/pythonprint(“Hello,Python”)def desc(): print(“desc”)desc()i = 4d = ii = i + 1print(d,i) #引号str = ‘this is “python”‘spaceStr = ‘’’thisisaparams‘’’ #自然字符串str1 = “hello boy \\ ‘this is python”str2 = r”hello boy \\ ‘this is python”*20 #索引c1 = “python3.6”c2 = c1[0:3]c3 = c1[1:]print(c2,c3) #列表lists = [“zhanshan”,”kishi”]tuples = (“zhanshan”,”alex”) #tuples[0] = “zhanshan” #集合aset = set(“abcdefg”)bset = set(“abc”) #1,交集aset &amp; bset #2，并集aset| bset #3，差集aset - bset #字典dicts = {“key1”:”value1”,”key2”:”value2”}dicts.pop(“key1”)allkeys = dicts.keys()print(allkeys) #标志符 #开头为下划线或者字母 #关键字 #and elif global or else pass break continue import class return for while #对象序列化import picklelistobj = [“zhanshan”,”hahah”]listobjs = pickle.dumps(listobj)print(listobjs) #对象反序列化listobjd = pickle.loads(listobjs)print(listobjd) #序列化到文件group1 =(“baidu”,”sina”)f1 = open(“1.pk1”,’wb’)pickle.dump(group1,f1)f1.close()print(f1.name) #文件反序列化f2 = open(“1.pk1”,’rb’)t = pickle.load(f2)print(t)f2.close()","categories":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}],"tags":[],"keywords":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}]},{"title":"mysql基本语句","slug":"Web/mysql基本语句","date":"2018-07-19T01:00:35.182Z","updated":"2018-07-19T01:00:35.184Z","comments":true,"path":"2018/07/19/Web/mysql基本语句/","link":"","permalink":"https://Alexzzn.github.io/2018/07/19/Web/mysql基本语句/","excerpt":"","text":"`php//查询时间，友好提示$sql = “select date_format(create_time, ‘%Y-%m-%d’) as day from table_name”; //int 时间戳类型$sql = “select from_unixtime(create_time, ‘%Y-%m-%d’) as day from table_name”; //一个sql返回多个总数$sql = “select count(*) all, “ ;$sql .= “ count(case when status = 1 then status end) status_1_num, “;$sql .= “ count(case when status = 2 then status end) status_2_num “;$sql .= “ from table_name”; //Update Join / Delete Join$sql = “update table_name_1 “;$sql .= “ inner join table_name_2 on table_name_1.id = table_name_2.uid “;$sql .= “ inner join table_name_3 on table_name_3.id = table_name_1.tid “;$sql .= “ set = “;$sql .= “ where *** “; //替换某字段的内容的语句$sql = “update table_name set content = REPLACE(content, ‘aaa’, ‘bbb’) “;$sql .= “ where (content like ‘%aaa%’)”; //获取表中某字段包含某字符串的数据$sql = “SELECT FROM 表名 WHERE LOCATE(‘关键字’, 字段名) “;//获取表中某字段包含某字符串的数据$sql = “SELECT FROM 表名 WHERE LOCATE(‘关键字’, 字段名) “; //查找表中多余的重复记录//单个字段$sql = “select from 表名 where 字段名 in “;$sql .= “(select 字段名 from 表名 group by 字段名 having count(字段名) &gt; 1 )”;//多个字段$sql = “select from 表名 别名 where (别名.字段1,别名.字段2) in “;$sql .= “(select 字段1,字段2 from 表名 group by 字段1,字段2 having count(*) &gt; 1 )”; //删除表中多余的重复记录(留id最小)//单个字段$sql = “delete from 表名 where 字段名 in “;$sql .= “(select 字段名 from 表名 group by 字段名 having count(字段名) &gt; 1) “;$sql .= “and 主键ID not in “;$sql .= “(select min(主键ID) from 表名 group by 字段名 having count(字段名 )&gt;1) “;//多个字段$sql = “delete from 表名 别名 where (别名.字段1,别名.字段2) in “;$sql .= “(select 字段1,字段2 from 表名 group by 字段1,字段2 having count() &gt; 1) “;$sql .= “and 主键ID not in “;$sql .= “(select min(主键ID) from 表名 group by 字段1,字段2 having count()&gt;1) “; //连续范围问题//创建测试表CREATE TABLE test_number ( id int(10) unsigned NOT NULL AUTO_INCREMENT, number int(11) unsigned NOT NULL DEFAULT ‘0’ COMMENT ‘数字’, PRIMARY KEY (id)) ENGINE=InnoDB DEFAULT CHARSET=utf8 数字的连续范围签到问题//创建参考表(模拟数据需要用到)CREATE TABLE test_nums ( id int(11) unsigned NOT NULL AUTO_INCREMENT, PRIMARY KEY (id)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=’参考表’;//模拟数据，插入 1-10000 连续数据.//创建测试表CREATE TABLE test_sign_history ( id int(10) unsigned NOT NULL AUTO_INCREMENT, uid int(11) unsigned NOT NULL DEFAULT ‘0’ COMMENT ‘用户ID’, create_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT ‘签到时间’, PRIMARY KEY (id)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=’签到历史表’;//创建测试数据insert into test_sign_history(uid,create_time)select ceil(rand()10000),str_to_date(‘2016-12-11’,’%Y-%m-%d’)+interval ceil(rand()10000) minutefrom test_nums where id&lt;31;//统计每天的每小时用户签到情况select h, sum(case when create_time=’2016-12-11’ then c else 0 end) 11Sign, sum(case when create_time=’2016-12-12’ then c else 0 end) 12Sign, sum(case when create_time=’2016-12-13’ then c else 0 end) 13Sign, sum(case when create_time=’2016-12-14’ then c else 0 end) 14Sign, sum(case when create_time=’2016-12-15’ then c else 0 end) 15Sign, sum(case when create_time=’2016-12-16’ then c else 0 end) 16Sign, sum(case when create_time=’2016-12-17’ then c else 0 end) 17Signfrom( select date_format(create_time,’%Y-%m-%d’) create_time, hour(create_time) h, count(*) c from test_sign_history group by date_format(create_time,’%Y-%m-%d’), hour(create_time)) agroup by h with rollup;","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"java注解","slug":"iOS/java注解","date":"2018-07-18T10:10:22.792Z","updated":"2018-07-18T10:10:22.792Z","comments":true,"path":"2018/07/18/iOS/java注解/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/java注解/","excerpt":"","text":"地址`java 复制代码/***注解声明***/ /** 水果名称注解 @author peida /@Target(ElementType.FIELD)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface FruitName { String value() default “”;} /** 水果颜色注解 @author peida /@Target(ElementType.FIELD)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface FruitColor { /** 颜色枚举 @author peida /public enum Color{ BULE,RED,GREEN}; /** 颜色属性 @return*/Color fruitColor() default Color.GREEN; } /** 水果供应者注解 @author peida /@Target(ElementType.FIELD)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface FruitProvider { /** 供应商编号 @return*/public int id() default -1; /** 供应商名称 @return*/public String name() default “”; /** 供应商地址 @return*/public String address() default “”;} /***注解使用***/ public class Apple { @FruitName(&quot;Apple&quot;) private String appleName; @FruitColor(fruitColor=Color.RED) private String appleColor; @FruitProvider(id=1,name=&quot;陕西红富士集团&quot;,address=&quot;陕西省西安市延安路89号红富士大厦&quot;) private String appleProvider; public void setAppleColor(String appleColor) { this.appleColor = appleColor; } public String getAppleColor() { return appleColor; } public void setAppleName(String appleName) { this.appleName = appleName; } public String getAppleName() { return appleName; } public void setAppleProvider(String appleProvider) { this.appleProvider = appleProvider; } public String getAppleProvider() { return appleProvider; } public void displayName(){ System.out.println(&quot;水果的名字是：苹果&quot;); } } /***注解处理器***/ public class FruitInfoUtil { public static void getFruitInfo(Class&lt;?&gt; clazz){ String strFruitName=&quot; 水果名称：&quot;; String strFruitColor=&quot; 水果颜色：&quot;; String strFruitProvicer=&quot;供应商信息：&quot;; Field[] fields = clazz.getDeclaredFields(); for(Field field :fields){ if(field.isAnnotationPresent(FruitName.class)){ FruitName fruitName = (FruitName) field.getAnnotation(FruitName.class); strFruitName=strFruitName+fruitName.value(); System.out.println(strFruitName); } else if(field.isAnnotationPresent(FruitColor.class)){ FruitColor fruitColor= (FruitColor) field.getAnnotation(FruitColor.class); strFruitColor=strFruitColor+fruitColor.fruitColor().toString(); System.out.println(strFruitColor); } else if(field.isAnnotationPresent(FruitProvider.class)){ FruitProvider fruitProvider= (FruitProvider) field.getAnnotation(FruitProvider.class); strFruitProvicer=&quot; 供应商编号：&quot;+fruitProvider.id()+&quot; 供应商名称：&quot;+fruitProvider.name()+&quot; 供应商地址：&quot;+fruitProvider.address(); System.out.println(strFruitProvicer); } } } } /***输出结果***/public class FruitRun { /** * @param args */ public static void main(String[] args) { FruitInfoUtil.getFruitInfo(Apple.class); } }","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"地图定位","slug":"iOS/地图定位","date":"2018-07-18T10:10:21.991Z","updated":"2018-07-18T10:10:21.991Z","comments":true,"path":"2018/07/18/iOS/地图定位/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/地图定位/","excerpt":"","text":"调用 core loaction 中的 CLLocationManager #import &lt;CoreLocation/CoreLocation.h&gt; CLLocationManager *locationManager; 在定位服务中还包含CLGeocoder类用于处理地理编码和逆地理编码（又叫反地理编码）功能。CLGeocoder *_geocoder;对象方法:reverseGeocodeLocation:location completionHandler: 类方法 : (BOOL)locationServicesEnabled;获取是否开启定位服务 (CLAuthorizationStatus)authorizationStatus; 返回 用户 的操作 的枚举属性desiredAccuracy :定位精度的枚举 对象方法:startUpdatingLocation:开始定位追踪，开始定位后将按照用户设置的更新频率执行-(void)locationManager:(CLLocationManager )manager didUpdateLocations:(NSArray )locations;方法反馈定位信息 stopUpdatingLocation:停止定位追踪 requestAlwaysAuthorization:请求获得应用一直使用定位服务授权，注意使用此方法前要在info.plist中配置NSLocationAlwaysUsageDescription","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"tableview","slug":"iOS/tableview","date":"2018-07-18T10:10:21.989Z","updated":"2018-07-18T10:10:21.990Z","comments":true,"path":"2018/07/18/iOS/tableview/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/tableview/","excerpt":"","text":"`self.tableView.rowHeight =UITableViewAutomaticDimension;self.tableView.estimatedRowHeight = 100; //header其实section的header和footer也是可以自动适应的，对应的方法有： (CGFloat)tableView:(UITableView *)tableView estimatedHeightForHeaderInSection:(NSInteger)section; (CGFloat)tableView:(UITableView *)tableView estimatedHeightForFooterInSection:(NSInteger)section; //缓存@property (nonatomic, strong) NSMutableDictionary *heightAtIndexPath;//缓存高度所用字典 #pragma mark - UITableViewDelegate-(CGFloat)tableView:(UITableView )tableView estimatedHeightForRowAtIndexPath:(NSIndexPath )indexPath{ NSNumber *height = [self.heightAtIndexPath objectForKey:indexPath]; if(height) { return height.floatValue; } else { return 100; }} (void)tableView:(UITableView )tableView willDisplayCell:(UITableViewCell )cell forRowAtIndexPath:(NSIndexPath )indexPath{ NSNumber height = @(cell.frame.size.height); [self.heightAtIndexPath setObject:height forKey:indexPath];}","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"swift4","slug":"iOS/swift4","date":"2018-07-18T10:10:21.988Z","updated":"2018-07-18T10:10:21.989Z","comments":true,"path":"2018/07/18/iOS/swift4/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/swift4/","excerpt":"","text":"` swiftextension Date { private var timeInter:Double { return 1999 } } extension Date { // 获取struct 中private 属性 public static func ==(lhs: Date, rhs: Date) -&gt; Bool { return lhs.timeInter == lhs.timeInter } } // 关联类型 where 修饰protocol TypeAssociate { associatedtype T where Self.T == Any func useAssociateType(_:T) } class Class1:TypeAssociate { typealias T = Any func useAssociateType(_ name: Any) { debugPrint(name) } }// Key Pathsstruct Person { var nickname: String = “” var age: Double = 0.0} var p1 = Person(nickname: “zhansan”, age: 8)let name = p1[keyPath:\\Person.age] // 下标支持泛型struct GenericDictionary&lt;Key: Hashable, Value&gt; { private var data: [Key: Value] init(data: [Key: Value]) { self.data = data } // 下标 subscript&lt;T&gt;(key: Key) -&gt; T? { return data[key] as? T } } let dictionary = GenericDictionary(data: [“Name”: “Xiaoming”])let dicName: String? = dictionary[“Name”] // Encoding and Decodingstruct CommonModel:Codable { var name:String? var ver:String? } let model1 = CommonModel.init(name: “HAHA”, ver: “1.00”)let encoded = try? JSONEncoder().encode(model1)let decode = try? JSONDecoder().decode(CommonModel.self, from: encoded!)","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"pod 错误问题","slug":"iOS/pod 错误问题","date":"2018-07-18T10:10:21.987Z","updated":"2018-07-18T10:10:21.987Z","comments":true,"path":"2018/07/18/iOS/pod 错误问题/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/pod 错误问题/","excerpt":"","text":"123456789101112131415161718192021222324252627&gt; 1 SSLRead() return error -9806 gem sources --remove https://rubygems.org///等有反应之后再敲入以下命令$ gem sources -a https://ruby.taobao.org/ sudo gem install -n /usr/local/bin cocoapods Git clone https://git.coding.net/CocoaPods/Specs.git ~/.cocoapods/repos/master 1.在装之前最好先卸载点老版本 $ sudo gem uninstall cocoapods2.查看本地安装过的cocopods相关东西 $ gem list --local | grep cocoapods 然后逐步删除3，安装 rvm 管理器 curl -L https://get.rvm.io | bash -s stable 然后，载入 RVM 环境： source ~/.rvm/scripts/rvm 相关命令：rvm list，rvm remove， rvm install rvm list known4，设置Ruby版本 设置为系统默认版本 rvm 2.4.0 --default5 安装pods sudo gem install -n /usr/local/bin cocoapods Pod Error` 1 SSLRead() return error -9806gem sources –remove https://rubygems.org///等有反应之后再敲入以下命令$ gem sources -a https://ruby.taobao.org/ sudo gem install -n /usr/local/bin cocoapods Git clone https://git.coding.net/CocoaPods/Specs.git ~/.cocoapods/repos/master 1.在装之前最好先卸载点老版本 $ sudo gem uninstall cocoapods 2.查看本地安装过的cocopods相关东西 $ gem list --local | grep cocoapods 然后逐步删除 3，安装 rvm 管理器 curl -L https://get.rvm.io | bash -s stable 然后，载入 RVM 环境： source ~/.rvm/scripts/rvm 相关命令：rvm list，rvm remove， rvm install4，设置Ruby版本 设置为系统默认版本 rvm 2.3.0 –default5 安装pods sudo gem install -n /usr/local/bin cocoapods","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"BASH小结","slug":"iOS/BASH小结","date":"2018-07-18T10:10:21.986Z","updated":"2018-07-18T10:10:21.986Z","comments":true,"path":"2018/07/18/iOS/BASH小结/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/BASH小结/","excerpt":"","text":"Shell脚本编程 shell 标识第一行 #!/bin/sh 变量1234v1=&quot;macos&quot;echo $v1v2=&quot;windows&quot;echo $v2 字符串单引号字符串的限制： 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的 单引号字串中不能出现单引号（对单引号使用转义符后也不行） 1str=&apos;this is a string&apos; 双引号12name=&quot;zhanshan&quot;str=&quot;hello,$name&quot; 拼接字符串1fullName=&quot;$name,$str&quot; 条件变量1234567891011121314151617181920212223242526272829303132333435# ifif conditionthen command1 command2 ... commandN fi#if else if confitionthen commandeles commandfi#for循环for item in item1 item2...itemNdo commanddone#自增for(c1;c2;c3)do commeanddone#循环while conditiondo commanddone``` #### 数组 arr1=(A,B,”C”,$val)1#### 函数 testFunc1() { echo “fun1”}testFunc2() { echo “第一个参数$1” echo “第二个参数$2”}`","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"WKWebView","slug":"iOS/WKWebView","date":"2018-07-18T10:10:21.187Z","updated":"2018-07-18T10:10:21.187Z","comments":true,"path":"2018/07/18/iOS/WKWebView/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/WKWebView/","excerpt":"","text":"创建配置类在创建WKWebView之前，需要先创建配置对象，用于做一些配置： 1WKWebViewConfiguration *config = [[WKWebViewConfiguration alloc] init]; 配置偏好设置偏好设置也没有必须去修改它，都使用默认的就可以了，除非你真的需要修改它： 123456789101112131415// 设置偏好设置config.preferences = [[WKPreferences alloc] init];// 默认为0config.preferences.minimumFontSize = 10;// 默认认为YESconfig.preferences.javaScriptEnabled = YES;// 在iOS上默认为NO，表示不能自动通过窗口打开config.preferences.javaScriptCanOpenWindowsAutomatically = NO; 配置web内容处理池其实我们没有必要去创建它，因为它根本没有属性和方法： // web内容处理池，由于没有属性可以设置，也没有方法可以调用，不用手动创建 config.processPool = [[WKProcessPool alloc] init]; 配置Js与Web内容交互WKUserContentController是用于给JS注入对象的，注入对象后，JS端就可以使用： NSString *name = @”AppModel” window.webkit.messageHandlers..postMessage() 来调用发送数据给iOS端，比如： 123&gt; //js code&gt; window.webkit.messageHandlers.AppModel.postMessage(&#123;body: '传数据'&#125;);&gt; AppModel就是我们要注入的名称，注入以后，就可以在JS端调用了，传数据统一通过body传，可以是多种类型，只支持NSNumber, NSString, NSDate, NSArray,NSDictionary, and NSNull类型。 内存泄漏可以用对象代理实现wkscriptdelegate协议1234567891011// MARK: - 生成分隔线class MYWKWebScriptMessageDelegate:NSObject,WKScriptMessageHandler &#123; // var delegate:WKScriptMessageHandler? // func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) &#123; delegate?.userContentController(userContentController, didReceive: message) &#125;&#125; 下面我们配置给JS的main frame注入AppModel名称，对于JS端可就是对象了： // 通过JS与webview内容交互12345config.userContentController = [[WKUserContentController alloc] init];// 注入JS对象名称AppModel，当JS通过AppModel来调用时，// 我们可以在WKScriptMessageHandler代理中接收到[config.userContentController addScriptMessageHandler: self name: @&quot;AppModel&quot;]; 当JS通过AppModel发送数据到iOS端时，会在代理中收到： ##pragma mark - WKScriptMessageHandler 123456789- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message &#123;if ([message.name isEqualToString:@&quot;AppModel&quot;]) &#123; // 打印所传过来的参数，只支持NSNumber, NSString, NSDate, NSArray, // NSDictionary, and NSNull类型 NSLog(@&quot;%@&quot;, message.body); &#125;&#125; 所有JS调用iOS的部分，都只可以在此处使用哦。当然我们也可以注入多个名称（JS对象），用于区分功能。 创建WKWebView通过唯一的默认构造器来创建对象： 12self.webView = [[WKWebView alloc] initWithFrame:self.view.bounds configuration:config];[self.view addSubview:self.webView]; 加载H5页面 12NSURL *path = [[NSBundle mainBundle] URLForResource:@&quot;test&quot; withExtension:@&quot;html&quot;];[self.webView loadRequest:[NSURLRequest requestWithURL:path]]; 配置代理如果需要处理web导航条上的代理处理，比如链接是否可以跳转或者如何跳转，需要设置代理；而如果需要与在JS调用alert、confirm、prompt函数时，通过JS原生来处理，而不是调用JS的alert、confirm、prompt函数，那么需要设置UIDelegate，在得到响应后可以将结果反馈到JS端： // 导航代理self.webView.navigationDelegate = self;// 与webview UI交互代理self.webView.UIDelegate = self; 添加对WKWebView属性的监听WKWebView有好多个支持KVO的属性，这里只是监听loading、title、estimated、Progress属性，分别用于判断是否正在加载、获取页面标题、当前页面载入进度： // 添加KVO监听 12[self.webView addObserver:self forKeyPath:@&quot;loading&quot; options: NSKeyValueObservingOptionNew context:nil]; 123[self.webView addObserver:self forKeyPath:@\"estimatedProgress\" options:NSKeyValueObservingOptionNew context:nil]; 123[self.webView addObserver:self forKeyPath:@\"estimatedProgress\" options:NSKeyValueObservingOptionNew context:nil]; 然后我们就可以实现KVO处理方法，在loading完成时，可以注入一些JS到web中。这里只是简单地执行一段web中的JS函数： ##pragma mark - KVO123456789101112131415161718192021222324252627282930313233343536373839-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)objectchange:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context &#123;if ([keyPath isEqualToString:@&quot;loading&quot;]) &#123; NSLog(@&quot;loading&quot;);&#125; else if ([keyPath isEqualToString:@&quot;title&quot;]) &#123; self.title = self.webView.title;&#125; else if ([keyPath isEqualToString:@&quot;estimatedProgress&quot;]) &#123; NSLog(@&quot;progress: %f&quot;, self.webView.estimatedProgress); self.progressView.progress = self.webView.estimatedProgress;&#125;// 加载完成if (!self.webView.loading) &#123; // 手动调用JS代码 // 每次页面完成都弹出来，大家可以在测试时再打开 NSString *js = @&quot;callJsAlert()&quot;; [self.webView evaluateJavaScript:js completionHandler:^(id _Nullable response, NSError * _Nullable error) &#123; NSLog(@&quot;response: %@ error: %@&quot;, response, error); NSLog(@&quot;call js alert by native&quot;); &#125;]; [UIView animateWithDuration:0.5 animations:^&#123; self.progressView.alpha = 0; &#125;];&#125;&#125; WKUIDelegate与JS原生的alert、confirm、prompt交互，将弹出来的实际上是我们原生的窗口，而不是JS的。在得到数据后，由原生传回到JS： #pragma mark - WKUIDelegate -(void)webViewDidClose: (WKWebView *)webView { NSLog(@”%s”, FUNCTION); } // 在JS端调用alert函数时，会触发此代理方法。// JS端调用alert时所传的数据可以通过message拿到// 在原生得到结果后，需要回调JS，是通过completionHandler回调 12345678910111213-(void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler &#123;NSLog(@\"%s\", FUNCTION);UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"alert\" message:@\"JS调用alert\" preferredStyle:UIAlertControllerStyleAlert];[alert addAction:[UIAlertAction actionWithTitle:@\"确定\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123; completionHandler();&#125;]];[self presentViewController:alert animated:YES completion:NULL];NSLog(@\"%@\", message);&#125; // JS端调用confirm函数时，会触发此方法// 通过message可以拿到JS端所传的数据// 在iOS端显示原生alert得到YES/NO后// 通过completionHandler回调给JS端1234567891011121314- (void)webView:(WKWebView *)webView runJavaScriptConfirmPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(BOOL result))completionHandler &#123; NSLog(@\"%s\", __FUNCTION__); UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"confirm\" message:@\"JS调用confirm\" preferredStyle:UIAlertControllerStyleAlert]; [alert addAction:[UIAlertAction actionWithTitle:@\"确定\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123; completionHandler(YES); &#125;]]; [alert addAction:[UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) &#123; completionHandler(NO); &#125;]]; [self presentViewController:alert animated:YES completion:NULL]; NSLog(@\"%@\", message); &#125; // JS端调用prompt函数时，会触发此方法// 要求输入一段文本// 在原生输入得到文本内容后，通过completionHandler回调给JS 12345678910111213141516171819202122-(void)webView:(WKWebView *)webView runJavaScriptTextInputPanelWithPrompt:(NSString *)prompt defaultText:(nullable NSString *)defaultText initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(NSString * __nullable result))completionHandler &#123;NSLog(@\"%s\", FUNCTION);NSLog(@\"%@\", prompt);UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"textinput\" message:@\"JS调用输入框\" preferredStyle:UIAlertControllerStyleAlert];[alert addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) &#123; textField.textColor = [UIColor redColor];&#125;];[alert addAction:[UIAlertAction actionWithTitle:@\"确定\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123; completionHandler([[alert.textFields lastObject] text]);&#125;]];[self presentViewController:alert animated:YES completion:NULL];&#125; WKNavigationDelegate如果需要处理web导航操作，比如链接跳转、接收响应、在导航开始、成功、失败等时要做些处理，就可以通过实现相关的代理方法： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#pragma mark - WKNavigationDelegate// 请求开始前，会先调用此代理方法// 与UIWebView的// - (BOOL)webView:(UIWebView *)webView // shouldStartLoadWithRequest:(NSURLRequest *)request // navigationType:(UIWebViewNavigationType)navigationType;// 类型，在请求先判断能不能跳转（请求）- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler &#123; NSString *hostname = navigationAction.request.URL.host.lowercaseString; if (navigationAction.navigationType == WKNavigationTypeLinkActivated &amp;&amp; ![hostname containsString:@\".baidu.com\"]) &#123; // 对于跨域，需要手动跳转 [[UIApplication sharedApplication] openURL:navigationAction.request.URL]; // 不允许web内跳转 decisionHandler(WKNavigationActionPolicyCancel); &#125; else &#123; self.progressView.alpha = 1.0; decisionHandler(WKNavigationActionPolicyAllow); &#125; NSLog(@\"%s\", FUNCTION); &#125;// 在响应完成时，会回调此方法// 如果设置为不允许响应，web内容就不会传过来- (void)webView:(WKWebView *)webView decidePolicyForNavigationResponse:(WKNavigationResponse *)navigationResponse decisionHandler:(void (^)(WKNavigationResponsePolicy))decisionHandler &#123; decisionHandler(WKNavigationResponsePolicyAllow); NSLog(@\"%s\", FUNCTION); &#125;// 开始导航跳转时会回调- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(null_unspecified WKNavigation *)navigation &#123; NSLog(@\"%s\", FUNCTION); &#125;// 接收到重定向时会回调- (void)webView:(WKWebView *)webView didReceiveServerRedirectForProvisionalNavigation:(null_unspecified WKNavigation *)navigation &#123; NSLog(@\"%s\", FUNCTION); &#125;// 导航失败时会回调- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(null_unspecified WKNavigation *)navigation withError:(NSError *)error &#123; NSLog(@\"%s\", FUNCTION); &#125;// 页面内容到达main frame时回调- (void)webView:(WKWebView *)webView didCommitNavigation:(null_unspecified WKNavigation *)navigation &#123; NSLog(@\"%s\", FUNCTION); &#125;// 导航完成时，会回调（也就是页面载入完成了）- (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation &#123; NSLog(@\"%s\", FUNCTION); &#125;// 导航失败时会回调- (void)webView:(WKWebView *)webView didFailNavigation:(null_unspecified WKNavigation *)navigation withError:(NSError *)error &#123;&#125;// 对于HTTPS的都会触发此代理，如果不要求验证，传默认就行// 如果需要证书验证，与使用AFN进行HTTPS证书验证是一样的- (void)webView:(WKWebView *)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential *__nullable credential))completionHandler &#123; NSLog(@\"%s\", FUNCTION); completionHandler(NSURLSessionAuthChallengePerformDefaultHandling, nil); &#125;// 9.0才能使用，web内容处理中断时会触发- (void)webViewWebContentProcessDidTerminate:(WKWebView *)webView &#123; NSLog(@\"%s\", FUNCTION); &#125; JS端代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;iOS and Js&lt;/title&gt; &lt;style type=\"text/css\"&gt; * &#123; font-size: 40px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div style=\"margin-top: 100px\"&gt; &lt;h1&gt;Test how to use objective-c call js&lt;/h1&gt;&lt;br/&gt; &lt;div&gt;&lt;input type=\"button\" value=\"call js alert\" onclick=\"callJsAlert()\"&gt;&lt;/div&gt; &lt;br/&gt; &lt;div&gt;&lt;input type=\"button\" value=\"Call js confirm\" onclick=\"callJsConfirm()\"&gt;&lt;/div&gt;&lt;br/&gt; &lt;/div&gt; &lt;br/&gt; &lt;div&gt; &lt;div&gt;&lt;input type=\"button\" value=\"Call Js prompt \" onclick=\"callJsInput()\"&gt;&lt;/div&gt;&lt;br/&gt; &lt;div&gt;Click me here: &lt;a href=\"http://www.baidu.com\"&gt;Jump to Baidu&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;br/&gt; &lt;div id=\"SwiftDiv\"&gt; &lt;span id=\"jsParamFuncSpan\" style=\"color: red; font-size: 50px;\"&gt;&lt;/span&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; function callJsAlert() &#123; alert('Objective-C call js to show alert'); window.webkit.messageHandlers.AppModel.postMessage(&#123;body: 'call js alert in js'&#125;); &#125; function callJsConfirm() &#123; if (confirm('confirm', 'Objective-C call js to show confirm')) &#123; document.getElementById('jsParamFuncSpan').innerHTML = 'true'; &#125; else &#123; document.getElementById('jsParamFuncSpan').innerHTML = 'false'; &#125; // AppModel是我们所注入的对象 window.webkit.messageHandlers.AppModel.postMessage(&#123;body: 'call js confirm in js'&#125;); &#125; function callJsInput() &#123; var response = prompt('Hello', 'Please input your name:'); document.getElementById('jsParamFuncSpan').innerHTML = response; // AppModel是我们所注入的对象 window.webkit.messageHandlers.AppModel.postMessage(&#123;body: response&#125;); &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"ruby安装错误总结","slug":"iOS/ruby安装错误总结","date":"2018-07-18T10:10:21.186Z","updated":"2018-07-18T10:10:21.187Z","comments":true,"path":"2018/07/18/iOS/ruby安装错误总结/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/ruby安装错误总结/","excerpt":"","text":"1，安装后 如何卸载系统自带的ruby2.0版本库，从新从官网下载 源码编译，要确保ruby，brew，gem，homebrew目录和文件 清理干净，可通过 which gem 2，安装时根据错误提示 加权限或者 清除重复目录，编译可能出现 xcode gcc 版本 和 系统不兼容 ，可以下载 相对应的 term 终端 版本的gcc。下载地址 3，成功后 通过ruby 安装 brew， ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"Block_OC_2","slug":"iOS/Block_OC_2","date":"2018-07-18T10:10:21.184Z","updated":"2018-07-18T10:10:21.185Z","comments":true,"path":"2018/07/18/iOS/Block_OC_2/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/Block_OC_2/","excerpt":"","text":"本文翻译自苹果的文档，有删减，也有添加自己的理解部分。 如果有Block语法不懂的，可以参考fuckingblocksyntax，里面对于Block 为了方便对比，下面的代码我假设是写在ViewController子类中的 1、第一部分 //定义和使用Block，1234567891011121314151617181920212223- ( void )testBlock &#123; [super viewDidLoad]; //（1）定义无参无返回值的Block void (^printBlock)() = ^()&#123; printf ( &quot;no number&quot; ); &#125;; printBlock(); printBlock(9); int mutiplier = 7; //（3）定义名为myBlock的代码块，返回值类型为int int (^myBlock)( int ) = ^( int num)&#123; return num*mutiplier; &#125;; //使用定义的myBlock int newMutiplier = myBlock(3); printf ( &quot;newMutiplier is %d&quot; ,myBlock(3));&#125;//（2）定义一个有参数，没有返回值的Blockvoid (^printNumBlock)( int ) = ^( int num)&#123; printf ( &quot;int number is %d&quot; ,num);&#125;; （1）在类中，定义一个Block变量，就像定义一个函数； （2）Block可以定义在方法内部，也可以定义在方法外部； （3）只有调用Block时候，才会执行其{}体内的代码； （PS：关于第（2）条，定义在方法外部的Block，其实就是文件级别的全局变量） 那么在类中定义一个Block，特别是在-viewDidLoad方法体内定义一个Block到底有什么意义呢？我表示这时候只把它当做私有函数就可以了。我之前说过，Block其实就相当于代理，那么这时候我该怎样将其与代理类比以了解呢。这时候我可以这样说：本类中的Block就相当于类自己服从某个协议，然后让自己代理自己去做某个事情。很拗口吧？看看下面的代码， // 定义一个协议12345678910111213141516171819202122@protocol ViewControllerDelegate- ( void )selfDelegateMethod; @end //本类实现这个协议ViewControllerDelegate @interface ViewController () @property (nonatomic, assign) id delegate; @end //接着在-viewDidLoad中的代码如下，- ( void )viewDidLoad &#123; [super viewDidLoad]; // Do any additional setup after loading the view from its nib. self.delegate = self; if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(selfDelegateMethod)]) &#123; [self.delegate selfDelegateMethod]; &#125; &#125;###pragma mark - ViewControllerDelegate method//实现协议中的方法- ( void )selfDelegateMethod &#123; NSLog(@ \"自己委托自己实现的方法\" );&#125;; 看出这种写法的奇葩地方了吗？自己委托自己去实现某个方法，而不是委托别的类去实现某个方法。本类中定义的一个Block其实就是闲的蛋疼，委托自己去字做某件事情，实际的意义不大，所以你很少看见别人的代码直接在类中定义Block然后使用的，Block很多的用处是跨越两个类来使用的，比如作为property属性或者作为方法的参数，这样就能跨越两个类了。 2、第二部分 __block关键字的使用 在Block的{}体内，是不可以对外面的变量进行更改的，比如下面的语句，12345678910- ( void )viewDidLoad &#123; //将Block定义在方法内部 __block int x = 100; void (^sumXAndYBlock)( int ) = ^( int y)&#123; x = x+y; printf ( &quot;new x value is %d&quot; ,x); &#125;; sumXAndYBlock(50); &#125; 3、第三部分：Block作为property属性实现页面之间传值 需求：在ViewController中，点击Button，push到下一个页面NextViewController，在NextViewController的输入框TextField中输入一串字符，返回的时候，在ViewController的Label上面显示文字内容， （1）第一种方法：首先看看通过“协议/代理”是怎么实现两个页面之间传值的吧， //NextViewController是push进入的第二个页面//NextViewController.h 文件//定义一个协议，前一个页面ViewController要服从该协议，并且实现协议中的方法1234567891011121314151617181920212223242526272829 @protocol NextViewControllerDelegate - ( void )passTextValue:(NSString *)tfText; @end @interface NextViewController : UIViewController @property (nonatomic, assign) id delegate; @end //NextViewController.m 文件 //点击Button返回前一个ViewController页面- (IBAction)popBtnClicked:(id)sender &#123; if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(passTextValue:)]) &#123; //self.inputTF是该页面中的TextField输入框 [self.delegate passTextValue:self.inputTF.text]; &#125; [self.navigationController popViewControllerAnimated:YES]; &#125; 接下来我们在看看ViewController文件中的内容， //ViewController.m 文件 @interface ViewController () @property (strong, nonatomic) IBOutlet UILabel *nextVCInfoLabel; @end //点击Button进入下一个NextViewController页面- (IBAction)btnClicked:(id)sender &#123; NextViewController *nextVC = [[NextViewController alloc] initWithNibName:@ \"NextViewController\" bundle:nil]; nextVC.delegate = self; //设置代理 [self.navigationController pushViewController:nextVC animated:YES]; &#125; //实现协议NextViewControllerDelegate中的方法 123456#pragma mark - NextViewControllerDelegate method- ( void )passTextValue:(NSString *)tfText &#123; //self.nextVCInfoLabel是显示NextViewController传递过来的字符串Label对象 self.nextVCInfoLabel.text = tfText; &#125; （2）第二种方法：使用Block作为property，实现两个页面之间传值， 先看看NextViewController文件中的内容， 1234567891011121314151617181920//NextViewController.h 文件@interface NextViewController : UIViewController@property (nonatomic, copy) void (^NextViewControllerBlock)(NSString *tfText);@end//NextViewContorller.m 文件- (IBAction)popBtnClicked:(id)sender &#123; if (self.NextViewControllerBlock) &#123; self.NextViewControllerBlock(self.inputTF.text); &#125; [self.navigationController popViewControllerAnimated:YES]; &#125; 再来看看ViewController文件中的内容，- (IBAction)btnClicked:(id)sender &#123; NextViewController *nextVC = [[NextViewController alloc] initWithNibName:@ \"NextViewController\" bundle:nil]; nextVC.NextViewControllerBlock = ^(NSString *tfText)&#123; [self resetLabel:tfText]; &#125;; [self.navigationController pushViewController:nextVC animated:YES]; &#125; 12345####pragma mark - NextViewControllerBlock method- ( void )resetLabel:(NSString *)textStr &#123; self.nextVCInfoLabel.text = textStr; &#125; 好了就这么多代码，可以使用Block来实现两个页面之间传值的目的，实际上就是取代了Delegate的功能。 另外，博客中的代码Sample Code可以再Github下载，如果因为Github被墙了，可以在终端使用git clone + 完整链接，即可克隆项目到本地。 Github中的代码，可以开启两种调试模式，你需要在项目的配置文件BlockSamp-Prefix.pch中注释或者解注释下面的代码， ####define Debug_BlcokPassValueEnable即可开启两种调试的方式，如果注释了上面的语句就是使用Delegate进行调试；否则使用Block进行调试。","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"R","slug":"iOS/R.Swift简要","date":"2018-07-18T10:10:21.183Z","updated":"2018-07-18T10:10:21.183Z","comments":true,"path":"2018/07/18/iOS/R.Swift简要/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/R.Swift简要/","excerpt":"","text":"RSwift 简要说明 配置脚本 尽量保持runscript 执行靠前12// 执行script&quot;$PODS_ROOT/R.swift/rswift&quot; generate &quot;$SRCROOT/MYCard/Support Files&quot; 支持的资源类型 图片 nib，xib，storyboard 数据文件 font color12345678R.image.image_test()R.file.dataFileJson.path()R.font.chalkduster(size: 35R.color.myAppColor.red()R.nib.tanTableViewCell()R.nib.tanTableViewCell.identifierperformSegueWithIdentifier(R.segue.openSettings)R.string.localizable.welcomeMessage()","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"Block_OC_1","slug":"iOS/Block_OC_1","date":"2018-07-18T10:10:21.181Z","updated":"2018-07-18T10:10:21.182Z","comments":true,"path":"2018/07/18/iOS/Block_OC_1/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/Block_OC_1/","excerpt":"","text":"mongoDb常用语句本文来自台湾的某开发人员的博客，被墙，感觉讲的比较易懂，所以引过来。文字简体化了，原来是繁体，变数=变量，这个注意一下。 本文的顺序是层层深入的，要想简单的了解，只看X.1 初探Block就好了 本章学习目标： \\1. 了解何谓block。 \\2. 了解block的使用方法。 Block 是iOS在4.0之后新增的程式语法，严格来说block的概念并不算是基础程式设计的范围，对初学者来说也不是很容易了解，但是在iOS SDK 4.0之后，block几乎出现在所有新版的API之中，换句话说，如果不了解block这个概念就无法使用SDK 4.0版本以后的新功能，因此虽然block本身的语法有点难度，但为了使用iOS的新功能我们还是得硬着头皮去了解这个新的程式概念。 在这一章的目标以了解如何使用block为主而不深入探讨block底层的运作方式，至于有些初学者较少遇到的辞汇如「词法作用域（lexical scope）」等，本章将不再多做解释，待有兴趣的读者去请教Google大神吧。 X.1 初探Block 在这一小节我们先用一些简单范例来导入block的概念。 X.1.1 宣告和使用Block 我们使用「^」运算子来宣告一个block变数，而且在block的定义最后面要加上「;」来表示一个完整的述句（也就是将整个block定义视为前面章节所介绍的简单述句，因为整个定义必须是一个完整的句子，所以必须在最后面加上分号），下面是一个block的范例： 1:int multiplier = 7 ; 2:int (^myBlock)( int ) = ^( int num) 3: { 4:return num * multiplier; 5: }; 我们使用下图来解释这个范例(请将文字框的字翻译如下)：我们宣告一个「myBlock」变数，用「^」符号来表示这是一个block。这是block的完整定义，这个定义将会指定给「myBlock」变数表示「myBlock」是一个回传值为整数（int）的block。它有一个参数，型态也是整数。这个参数的名字叫做「num」。这是block的内容。值得注意的地方是block可以使用和本身定义范围相同的变数，可以想像在上面的例子中 multiplier 和 myBlock 都是某一个函数内定义的两个变数也就是这个变数都在某个函数两个大括号「{」和「 }」中间的区块，因为它们的有效范围是相同的，因此在block中就可以直接使用 multiplier 这个变数，此外当把block定义成一个变数的时，我们可以直接像使用一般函数般的方式使用它：objective-c 1:int multiplier = 7 ; 2:int (^myBlock)( int ) = ^( int num) 3: { 4:return num * multiplier; 5: }; 6: printf ( “%d” , myBlock( 3 ));X.1.2 直接使用Bloc K在很多情况下，我们并不需要将block宣告成变数，反之我们可以直接在需要使用block的地方直接用内嵌的方式将block的内容写出来，在下面的例子中qsort_b函数，这是一个类似传统的qsort_t函数，但是直接使用block做为它的参数：objective-c 1:char myCharacters[ 3 ] = { “TomJohn” , “George” , “Charles Condomine” }; 2: qsort_b (myCharacters, 3 , 3:sizeof ( char ), 4: ^( constvoid l, constvoid r)//block部分 5: { 6:char left = ( char )l; 7:char right = ( char )r; 8:return strncmp (left, right, 1 ); 9: } //end 10: ); X.1.3 __block 变量 一般来说，在block内只能读取在同一个作用域的变数而且没有办法修改在block外定义的任何变数，此时若我们想要这些变数能够在block中被修改，就必须在前面挂上block的修饰词，以上面第一个例子中的 multiplier 来说，这个变数在 block 中是唯读的，所以 multiplier = 7 指定完后，在 block 中的 multiplier 就只能是 7 不能修改，若我们在 block 中修改 multiplier ，在编辑时就会产生错误，因此若想要在 block 中修改 multiplier ，就必须在 multiplier 前面加上 block 的修饰词，请参考下面的范例：objective-c __block int multiplier = 7 ; int (^myBlock)( int ) = ^( int num) { if (num &gt; 5 ) { multiplier = 7 } else { multiplier =5 } return num * multiplier;}; X.2 Block 概要 Block 提供我们一种能够将函数程式码内嵌在一般述句中的方法，在其他语言中也有类似的概念称做「closure」，但是为了配合Objective-C的贯例，我们一律将这种用法称为「block」 X.2.1 Block 的功能 Block 是一种具有匿名功能的内嵌函数，它的特性如下： 如一般的函数般能拥有带有型态的参数。 拥有回传值。 可以撷取被定义的词法作用域（lexical scope）状态。 可以选择性地修改词法作用域的状态。 注：词法作用域（lexical scope）可以想像成是某个函数两个大括号中间的区块，这个区块在程式执行时，系统会将这个区块放入堆叠记忆体中，在这个区块中的宣告的变数就像是我们常听到的区域变数，当我们说block可以撷取同一词法作用域的状态时可以想像block变数和其他区域变数是同一个层级的区域变数（位于同一层的堆叠里），而block的内容可以读取到和他同一层级的其他区域变数。 我们可以拷贝一个block，也可以将它丢到其他的执行绪中使用，基本上虽然block在iOS程式开发中可以使用在C/C++开发的程式片段，也可以在Objective-C中使用，不过在系统的定义上，block永远会被视为是一个Objective-C的物件。 X.2.2 Block 的使用时机 Block 一般是用来表示、简化一小段的程式码，它特别适合用来建立一些同步执行的程式片段、封装一些小型的工作或是用来做为某一个工作完成时的回传呼叫（callback） 。 在新的iOS API中block被大量用来取代传统的delegate和callback，而新的API会大量使用block主要是基于以下两个原因： 可以直接在程式码中撰写等会要接着执行的程式，直接将程式码变成函数的参数传入函数中，这是新API最常使用block的地方。 可以存取区域变数，在传统的callback实作时，若想要存取区域变数得将变数封装成结构才能使用，而block则是可以很方便地直接存取区域变数。 X.3 宣告和建立Block X.3.1 宣告Block的参考（Reference） Block 变数储存的是一个block的参考，我们使用类似宣告指标的方式来宣告，不同的是这时block变数指到的地方是一个函数，而指标使用的是「」，block则是使用「^」来宣告，下面是一些合法的block宣告：objective-c 1:/ 回传void ，参数也是void 的block*/ 2:void (^blockReturningVoidWithVoidArgument)( void ); 3:/ 回传整数，两个参数分别是整数和字元型态的block/ 4:int (^blockReturningIntWithIntAndCharArguments)( int , char ); 5:/ 回传void ，含有10 个block 的阵列，每个block 都有一个型态为整数的参数/ 6:void (^arrayOfTenBlocksReturningVoidWinIntArgument[ 10 ])( int ); 7: X.3.2 建立一个Block 8: 9: 我们使用「^」来开始一个block，并在最后使用「;」来表示结束，下面的范例示范了一个block变数，然后再定义一个block把它指定给block变数： 10: 11:int (^oneFrom)( int ); / 宣告block 变数/ 12:/ 定义block 的内容并指定给上面宣告的变数/objective-c 13: oneFrom = ^(int anInt) 14: { 15:return anInt = - 1 ; 16: }; X.3.3 全域的Block 我在可以在档案中宣告一个全域的block，请参考以下范例： 1:int GlobalInt = 0 ; 2:int (^getGlobalInt)( void ) = ^ ( void ) { return GlobalInt ;}; X.4 Block 和变量 接下来的这一小节我们将会介绍block和变数之间的互动。 X.4.1 变数的型态 我们可以在block中遇到平常在函数中会遇到的变数类型： l 全域（global）变数或是静态的区域变数（static local）。 l 全域的函数。 l 区域变数和由封闭领域（enclosing scope）传入的参数。 除了上述之外block额外支援了另外两种变数： 在函数内可以使用__block 变数，这些变数在block中是可被修改的。 汇入常数（const imports）。 此外，在方法的实作里，block可以使用Objective-C的实体变数（instance variable）。 下列的规则可以套用到在block中变数的使用： 可以存取全域变数和在同一领域（enclosing lexical scope）中的静态变数。 可以存取传入block的参数（使用方式和传入函数的参数相同）。 在同一领域的区域变数在block中将视为常数（const）。 可以存取在同一领域中以__block 为修饰词的变数。 在block中宣告的区域变数，使用方式和平常函数使用区域变数的方式相同。 下面的例子介绍了区域变数（上述第三点）的使用方式： 1:int x = 123 ; 2:void (^printXAndY)( int ) = ^( int y) 3: { 4: printf ( “%d %d\\n” , x, y); 5: }; 6:// 将会印出123 456 7: printXAndY( 456 ); 8: 就如上面第三点所提到的，在上例中的int x = 123的变量x，在传入block后将视同常数，因此若我们在block中试着去修改x的值时就会产生错误，下面的例子将会无法通过编译： 9: 10:int x = 123 ; 11:void (^printXAndY)( int ) = ^( int y) 12: { 13:// 下面这一行是错的，因为x 在这是一个常数不能被修改。 14: x = x + y; 15: printf ( “%d %d\\n” , x, y); 16: }; 若在block中想要修改上面的变数x，必须将x宣告加上修饰词__block，请参考接下来这一小节的介绍。 X.4.2 __block 型态变数 我们可以藉由将一个由外部汇入block的变数放上修饰词block来让这个变数由唯读变成可以读和写，不过有一个限制就是传入的变数在记忆体中必须是一个占有固定长度记忆体的变数，block修饰词无法使用于像是变动长度的阵列这类不定长度的变数，请参考下面的范例： 1:// 加上__block 修饰词，所以可以在block 中被修改。 2: __block int x = 123 ; 3:void (^printXAndY)( int ) = ^( int y) 4: { 5: x = x + y; 6: printf ( “%d %d\\n” , x, y); 7: }; 8:// 将会印出579 456 9: printXAndY( 456 ); 10://x 将会变成 579; 11: 下面我们使用一个范例来介绍各类型的变数和block之间的互动： 12: 13:extern NSInteger CounterGlobal; 14:static NSInteger CounterStatic; 15: { 16: NSInteger localCounter = 42 ; 17: __block char localCharacter; 18:void (^aBlock)( void ) = ^( void ) 19: { 20: ++ CounterGlobal ; //可以存取。 21: ++ CounterStatic ; //可以存取。 22: CounterGlobal = localCounter; //localCounter在block 建立时就不可变了。 23: localCharacter = ‘a’ ; //设定外面定义的localCharacter 变数。 24: }; 25: ++localCounter; //不会影响的block 中的值。 26: localCharacter = ‘b’ ; 27: aBlock(); //执行block 的内容。 28://执行完后，localCharachter 会变成’a’ 29: } X.4.3 物件和Block变数 Block 支援在Objective-C、C++物件和其他block中当作变数来使用，不过因为在大部分的情况我们都是使用Objective-C的撰写程式，因此在这一小节我们仅针对Objective-C的情况进行介绍，至于其他两种情况就留给有兴趣的读者再自行深入研究了。 x.4.3.1 Objective-C 物件 在拥有参考计数（reference-counted）的环境中，若我们在block中参考到Objective-C的物件，在一般的情况下它将会自动增加物件的参考计数，不过若以__block为修饰词的物件，参考计数则是不受影响。 如果我们在Objective-C的方法中使用block时，以下几个和记忆体管理的事是需要额外注意的： l 若直接存取实体变数（instance variable），self的参考计数将被加1。 l 若透过变数存取实体变数的值，则只变数的参考计数将被加1。 以下程式码说明上面两种情况，在这个假设instanceVariable是实体变数： 1: dispatch_async (queue, ^{ 2:// 因为直接存取实体变数instanceVariable ，所以self 的retain count 会加１ 3: doSomethingWithObject (instanceVariable); 4: }); 5: id localVaribale = instanceVariable; 6: dispatch_async (queue, ^{ 7://localVariable 是存取值，所以这时只有localVariable 的retain count 加１ 8://self 的 return count 并不会增加。 9: doSomethingWithObject (localVaribale); 10: }); X.5 使用Block 这一小节我们将会对block的使用方式做一些初步的介绍 X.5.1 呼叫一个Block 当block宣告成一个变数时，我们可以像使用一般函数的方式来使用它，请参考下面两个范例： 1:int (^oneFrom)( int ) = ^( int anInt) { 2:return anInt - 1 ; 3: }; 4: printf ( “1 from 10 is %d” , oneFrom( 10 )); 5://结果会显示：1 from 10 is 9 6:float (^distanceTraveled)( float , float , float ) = ^( float startingSpeed, float acceleration, float time) 7: { 8:float distance = (startingSpeed time) + ( 0.5 acceleration time time); 9:return distance; 10: }; 11:float howFar = distanceTraveled( 0.0 , 9.8 , 1.0 ); 12: //howFar会变成4.9 在一般常见的情况中，若是将block当做是参数传入函数，我们通常会使用「内嵌」的方式来使用block。 X.5.2 将Block当作函数的参数 我们可以像使用一般函数使用参数的方式，将block以函数参数的型式传入函数中，在这种情况下，大多数我们使用block的方式将不会倾向宣告block而是直接以内嵌的方式来将block传入，这也是目前新版SDK中主流的做法，我们将补充前面章节的例子来说明： 1:char *myCharacters[ 3 ] = { “TomJohn” , “George” , “Charles Condomine” }; 2: qsort_b (myCharacters, 3 , sizeof ( char *), 3: ^( constvoid l, constvoid r) 4: { 5:char left = ( char **)l; 6:char right = ( char **)r; 7:return strncmp (left, right, 1 ); 8: } // 这里是block 的终点。 9: ); 10: // 最后的结果为：{“Charles Condomine”, “George”, “TomJohn”} 在上面的例子中，block本身就是函数参数的一部分，在下一个例子中dispatch_apply函数中使用block，dispatch_apply的定义如下： 1:void 2: dispatch_apply( size_t iterations, dispatch_queue_t queue, void (^block)( size_t )); 3: 这个函数将一个block提交到发送伫列（dispatch queue）中来执行多重的呼叫，只有当伫列中的工作都执行完成后才会回传，这个函数拥有三个变数，而最后一个参数就是block ，请参考下面的范例： 4: 5: size_t count = 10 ; 6: dispatch_queue_t queue = 7: dispatch_get_global_queue ( DISPATCH_QUEUE_PRIORITY_DEFAULT , 0 ); 8: dispatch_apply (count, queue, ^( size_t i) { 9: printf ( “%u\\n” , i); 10: }); X.5.3 将Block当作方法的参数 在SDK中提供了许多使用block的方法，我们可以像传递一般参数的方式来传递block，下面这个范例示范如何在一个阵列的前5笔资料中取出我们想要的资料的索引值： 1:// 所有的资料 2: NSArray *array = [ NSArray arrayWithObjects : @”A” , @”B” , @”C” , @”A” , @”B” , @”Z” , @”G” , @”are” , @” Q” ,nil ]; 3:// 我们只要这个集合内的资料 4: NSSet *filterSet = [ NSSet setWithObjects : @”A” , @”B” , @”Z” , @”Q” , nil ]; 5: BOOL (^test)( id obj, NSUInteger idx, BOOL *stop); 6: test = ^ ( id obj, NSUInteger idx, BOOL *stop) { 7:// 只对前5 笔资料做检查 8:if (idx &lt; 5 ) { 9:if ([filterSet containsObject : obj]) { 10:return YES ; 11: } 12: } 13:return NO ; 14: }; 15: NSIndexSet *indexes = [array indexesOfObjectsPassingTest :test]; 16: NSLog ( @”indexes: %@” , indexes); 17:// 结果：indexes: [number of indexes: 4 (in 2 ranges), indexes: (0-1 3-4)] 18:// 前５笔资料中，有４笔符合条件，它们的索引值分别是0-1, 3-4 X.5.4 该避免的使用方式 在下面的例子中，block是for回圈的区域变数因此在使用上必须避免将区域的block指定给外面宣告的block： 1:// 这是错误的范例，请勿在程式中使用这些语法!! 2:void dontDoThis() { 3:void (^blockArray[3])(void); // 3 个block 的阵列 4:for (int i = 0; i &lt; 3; ++i) { 5: blockArray[i] = ^{ printf(“hello, %d\\n”, i); }; 6:// 注意: 这个block 定义仅在for 回圈有效。 7: } 8: } 9:void dontDoThisEither() { 10:void (^block)(void); 11:int i = random(): 12:if (i &gt; 1000) { 13: block = ^{ printf(“got i at: %d\\n”, i); }; 14:// 注意: 这个block 定义仅在if 后的两个大括号中有效。 15: } 16:// … 17: }","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"SwiftDate处理","slug":"iOS/SwiftDate处理","date":"2018-07-18T10:10:21.180Z","updated":"2018-07-18T10:10:21.181Z","comments":true,"path":"2018/07/18/iOS/SwiftDate处理/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/SwiftDate处理/","excerpt":"","text":"swiftdate`swift // 获取当前date let date1 = Date.init() let data2 = “2015-07-26”.date(format: DateFormat.custom(“yyyy.mm.dd”), fromRegion: Region.Local()) let date3 = DateInRegion.init(components: DateComponents.init(calendar: Calendar.autoupdatingCurrent, timeZone: TimeZone.current, era: 1, year: 2010, month: 1, day: 1, hour: 1, minute: 1, second: 1, nanosecond: 1, weekday: nil)) // dataregion 修改时间元素值 let date4 = date3! + 14.minutes + 12.seconds // 比较时间 let bv = date3! &gt; date4 // 时间起始值 let date5 = date4.startOf(component: Calendar.Component.hour) let date6 = date4.endOfDay // 时间戳 let inter1 = TimeInterval.init(&quot;1244&quot;)! let date7 = Date.init(timeIntervalSinceNow: inter1) date7.inLocalRegion() // 获取多个时间中的最靠前 let date8 = DateInRegion.oldestDate([date5,date6]) // 获取字符串 let date1Str = date1.string(format: DateFormat.custom(&quot;YYYY-MM-DD&quot;), in: Region.Local()) let dateStr1 = data2?.string(dateStyle: DateFormatter.Style.medium, timeStyle: DateFormatter.Style.short) //","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"swift4 字符串","slug":"iOS/swift4 字符串","date":"2018-07-18T10:10:21.179Z","updated":"2018-07-18T10:10:21.179Z","comments":true,"path":"2018/07/18/iOS/swift4 字符串/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/swift4 字符串/","excerpt":"","text":"1234567let greeting = \"Hello, world!\"let index = greeting.index(of: \",\") ?? greeting.endIndexlet beginning = greeting[..&lt;index]// beginning is \"Hello\"//但是注意SubString可能会用到原来string的内存。官方建议是短时间使用，如果想要长时间保持，需要转为String// Convert the result to a String for long-term storage.let newString = String(beginning) 插入和移除字符123456789101112var welcome = &quot;hello&quot;welcome.insert(&quot;!&quot;, at: welcome.endIndex)// welcome now equals &quot;hello!&quot;welcome.insert(contentsOf: &quot; there&quot;, at: welcome.index(before: welcome.endIndex))// welcome now equals &quot;hello there!&quot;welcome.remove(at: welcome.index(before: welcome.endIndex))// welcome now equals &quot;hello there&quot;let range = welcome.index(welcome.endIndex, offsetBy: -6)..&lt;welcome.endIndexwelcome.removeSubrange(range)// welcome now equals &quot;hello&quot; One-sided SlicingSwift 4 新增了一个语法糖 … 可以对字符串进行单侧边界取子串。1234567891011//Swift 3:let values = &quot;abcdefg&quot;let startSlicingIndex = values.index(values.startIndex, offsetBy: 3)let subvalues = values[startSlicingIndex..&lt;values.endIndex] // defg//Swift 4:let values = &quot;abcdefg&quot;let startSlicingIndex = values.index(values.startIndex, offsetBy: 3)let subvalues = values[startSlicingIndex...] // One-sided Slicing // defg","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"cocoapods 私有仓库","slug":"iOS/cocoapods 私有仓库","date":"2018-07-18T10:10:20.348Z","updated":"2018-07-18T10:10:20.349Z","comments":true,"path":"2018/07/18/iOS/cocoapods 私有仓库/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/cocoapods 私有仓库/","excerpt":"","text":"官方文档 首先同步git repo 仓库1pod repo add demo www.gitee.demo:jj/xx.git 新建私有仓库1pod lib create demo 查看repo列表1pod repo list 修改podspec 文件，注意summary，desc，git source 地址123456789101112131415161718192021222324252627282930313233343536Pod::Spec.new do |s| s.name = 'ZZNTT' s.version = '0.1.1' s.summary = '描述文件'# This description is used to generate tags and improve search results.# * Think: What does it do? Why did you write it? What is the focus?# * Try to keep it short, snappy and to the point.# * Write the description between the DESC delimiters below.# * Finally, don't worry about the indent, CocoaPods strips it! s.description = &lt;&lt;-DESC 这是一个测试的DEMO DESC s.homepage = 'https://gitee.com/izhongnan/ZZNTT' # s.screenshots = 'www.example.com/screenshots_1', 'www.example.com/screenshots_2' s.license = &#123; :type =&gt; 'MIT', :file =&gt; 'LICENSE' &#125; s.author = &#123; 'ZZN' =&gt; 'dream_at@live.cn' &#125; s.source = &#123; :git =&gt; 'https://gitee.com/izhongnan/ZZNTT.git', :tag =&gt; s.version.to_s &#125; # s.social_media_url = 'https://twitter.com/&lt;TWITTER_USERNAME&gt;' s.ios.deployment_target = '8.0' s.requires_arc = true s.frameworks = 'UIKit' s.source_files = 'ZZNTT/Classes/**/*' # s.resource_bundles = &#123; # 'ZZNTT' =&gt; ['ZZNTT/Assets/*.png'] # &#125; # s.public_header_files = 'Pod/Classes/**/*.h' # s.frameworks = 'UIKit', 'MapKit' # s.dependency 'AFNetworking', '~&gt; 2.3'end commit 本地私有仓库，加入tag1234567git add -Agit commit -s -m &quot;Initial Commit of Library&quot;git remote add origin XXX.gitgit push origin mastergit tag 0.1.0git push --tags 验证文件123pod lib lintpod lib lint --no-clean 查看错误详情pod lib lint --allow-warnings 允许警告(包括xcode编译的warning) 向Spec Repo提交podspec1pod repo push demo(本地repo) demo.podspec 使用1pod &apos;demo&apos;, :git =&gt; &apos;www.gitee.demo:jj/xx.git&apos;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"web和js交互小结","slug":"iOS/web和js交互小结","date":"2018-07-18T10:10:20.338Z","updated":"2018-07-18T10:10:20.345Z","comments":true,"path":"2018/07/18/iOS/web和js交互小结/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/web和js交互小结/","excerpt":"","text":"iOS 7 引入 JSCore， iOS8 后引入WebKit，提供WKScriptMessageHandler JSContext：给JavaScript提供运行的上下文环境,通过-evaluateScript:方法就可以执行一JS代码 JSValue：封装了JS与ObjC中的对应的类型，以及调用JS的API等 JSManagedValue：管理数据和方法的类 JSVirtualMachine：处理线程相关，使用较少 JSExport：这是一个协议，如果采用协议的方法交互，自己定义的协议必须遵守此协议，在协议中声明的API都会在JS中暴露出来，才能调用 ObjC调用JS -(JSValue )evaluateScript:(NSString )script;方法就可以执行一段JavaScript脚本 -(JSValue )callWithArguments:(NSArray )arguments;方法可以反过来将参数传进去来调用方法 JS调用OC Blcok 1234567891011121314JSContext *context = [[JSContext alloc] init];// 定义一个blockcontext[@&quot;fun1&quot;] = ^() &#123; NSArray *args = [JSContext currentArguments]; for (JSValue *jsVal in args) &#123; NSLog(@&quot;%@&quot;, jsVal); &#125; JSValue *this = [JSContext currentThis]; NSLog(@&quot;this: %@&quot;,this);&#125;;// 调用js的fun1方法 [context evaluateScript:@&quot;fun1(&apos;arr&apos;, [a, b],&#123; a:&apos;b&apos;&#125;);&quot;]; 建立模型 遵循 jsexport协议 123456789101112131415161718192021protocol MyJSModel:JSExport &#123; // show showAlert func showAlert(title:String,msg:String) &#123; &#125;&#125;// 执行类class MyJSModelManger:MyJSModel &#123; var context:JSContext? var webview:WKWebView? // 执行代理方法 func showAlert(title:String,msg:String) &#123; debugPrint(title,msg) &#125;&#125; 注入模型 定义代理协议（声明js要执行的方法） 遵守JSExport协议 实体类(MyJSModelManager)代理此协议(声明变量 JSContext，UIWebView) 注入模型123456789self.jsContext = [webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];MyJSModelManager *model = [MyJSModelManager new];self.jsContext[@&quot;mymodel&quot;] = model;model.jsContext = self.jsContext;model.webView = self.webView; // 异常 self.jsContext.exceptionHandler =^(JSContext *context,JSValue *exceptionValue) &#123;&#125;; web端调用 123456789101112131415// html5&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang=\"en\"&gt; &lt;meta charset=\"UTF-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;div style=\"margin-top: 100px\"&gt; &lt;h1&gt;JsToNative/h1&gt; &lt;input type=\"button\" value=\"show\" onclick=\"mymodel.showAlert()\"&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"JAVA8 lambada表达式","slug":"Android/JAVA8 lambada表达式","date":"2018-07-18T10:10:04.531Z","updated":"2018-07-18T10:10:04.531Z","comments":true,"path":"2018/07/18/Android/JAVA8 lambada表达式/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/JAVA8 lambada表达式/","excerpt":"","text":"lambada表达式配置123456789 defaultConfig &#123; jackOptions &#123; enabled true &#125; &#125;compileOptions &#123; targetCompatibility 1.8 sourceCompatibility 1.8 &#125; 123456789101112131415161718192021222324252627//声明接口interface showLab &#123; //要执行的闭包函数声明 public int backGound(int a);&#125;//实现闭包函数的方法/** lab:闭包的声明的实例*/void implementLam(showLab lab) &#123; int a = 2; //可以对闭包回调 返回值 操作 int b = lab.backGound(a);&#125;//实现lambada函数implementLam((a)-&gt;&#123; //闭包返回值 return 1;&#125;)","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"js交互","slug":"Android/js交互","date":"2018-07-18T10:08:32.069Z","updated":"2018-07-18T10:08:32.069Z","comments":true,"path":"2018/07/18/Android/js交互/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/js交互/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243class Main6Activity : AppCompatActivity() &#123; private var contentWebView: WebView? = null @SuppressLint(\"JavascriptInterface\") override fun onCreate(savedInstanceState: Bundle?) &#123; super.onCreate(savedInstanceState) setContentView(R.layout.activity_main6) contentWebView = findViewById(R.id.webview) as WebView contentWebView?.setBackgroundColor(Color.CYAN) // 启用javascript contentWebView!!.settings.javaScriptEnabled = true // 从assets目录下面的加载html contentWebView!!.loadUrl(\"file:///android_asset/web.html\") contentWebView!!.addJavascriptInterface(this@Main6Activity, \"android\") //无参调用Js点击 findViewById(R.id.bt1).setOnClickListener &#123; // 无参数调用 contentWebView!!.loadUrl(\"javascript:javacalljs()\") &#125; //有参调用Js点击 findViewById(R.id.btn2).setOnClickListener &#123; // 传递参数调用 contentWebView!!.loadUrl(\"javascript:javacalljswith(\" + \"'http://blog.csdn.net/Leejizhou'\" + \")\") &#125; &#125; //由于安全原因 需要加 @JavascriptInterface @JavascriptInterface fun startFunction() &#123; runOnUiThread &#123; Toast.makeText(this@Main6Activity, \"show\", Toast.LENGTH_SHORT).show() &#125; &#125; @JavascriptInterface fun startFunction(text: String) &#123; runOnUiThread &#123; AlertDialog.Builder(this@Main6Activity).setMessage(text).show() &#125; &#125;&#125; `html&lt;!DOCTYPE html&gt; js 交互 function javacalljs(){ document.getElementById(“content”).innerHTML = “&lt;br>JAVA”; } function javacalljswith(arg){ document.getElementById(“content”).innerHTML = (“&lt;br>“+arg); }js to navtive","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"java8","slug":"Android/java8","date":"2018-07-18T10:08:32.069Z","updated":"2018-07-18T10:08:32.070Z","comments":true,"path":"2018/07/18/Android/java8/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/java8/","excerpt":"","text":"`javaimport com.sun.istack.internal.Nullable;import com.sun.xml.internal.xsom.impl.scd.Iterators;import java.time.LocalDate;import java.util.*;import java.util.function.Supplier;import java.util.stream.Stream; import static java.util.Optional.ofNullable; interface Success { void succ(String string);}interface Fail { void fail(String string);} public class Main { static String test(@Nullable String a) { Optional&lt;String&gt; optb = Optional.ofNullable(a); String realValue = optb.orElse(&quot;NULL&quot;); return realValue; } public static void main(String[] args) { String str = test(null); System.out.println(str); JavaBeans javaBeans = new JavaBeans(); javaBeans.request((succ)-&gt;{ System.out.println(succ); },(fail)-&gt;{ System.out.println(fail); }); String[] listStr = {&quot;1&quot;,&quot;2&quot;,&quot;3&quot;}; Arrays.sort(listStr,String::compareToIgnoreCase); System.out.println(&quot;Hello World!&quot;); List&lt;String&gt; strings = new ArrayList&lt;String&gt;(); Collections.addAll(strings,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;); // // Person person = new Person();// String[] stringArray = {“1”,”2”};////// Collections.sort(stringArray, (Comparator) (o1, o2) -&gt; 0);// Collections.reverse(strings); Collections.sort(strings, (o1,o2)-&gt;{ int code = o1.hashCode(); return 2; }); //Stream是元素的集合 System.out.println(strings); strings.stream().filter(value-&gt;{ if ( value.isEmpty() == true) { return false; } return true; }).map(strs -&gt;{ return strs+&quot;map&quot;; }).forEach(JavaBeans::setName); //用 Collectors 来进行 reduction 操作 // Map&lt;Integer,List&gt; personGroups = //自定义Supplier Stream&lt;Person&gt; streamPerson = Stream.generate(new Supplier&lt;Person&gt;() { @Override public Person get() { Random seed = new Random(); Integer randomInt = seed.nextInt(100); return new Person(&quot;名字&quot; + randomInt.toString(),randomInt.toString()); } }).limit(10); streamPerson.forEach(person -&gt; { System.out.println(&quot;Supplier::person-&gt;&quot;+person.name+ &quot;:&quot; + person.age); }); //自生成 10 个随机整数 Random seed = new Random(); // int random = seed.nextInt(10); Supplier random = seed::nextInt; Stream.generate(random).limit(10).forEach(value-&gt;{ System.out.println(&quot;我是随机数：：&quot;+value.toString()); }); } // class PersonSupplier implements Supplier&lt;Person&gt; { private int index = 0; private Random random = new Random(); @Override public Person get() { Integer randomInt = random.nextInt(); randomInt.toString(); Stream ss = Stream.generate(random::doubles); return new Person(randomInt.toString(),&quot;11&quot;); } } } //class JavaBeans implements TestNew { public String string = &quot;test&quot;; static public int test() { return 0; } static void setName(String name) { System.out.println(name); } // void request(@Nullable Success success,@Nullable Fail fail) { if (true) { success.succ(&quot;闭包回掉：succ&quot;); } else { fail.fail(&quot;闭包回掉：fail&quot;); } } @Override public void testInterface() { // } }interface TestNew { void testInterface(); }//class Person { // public enum Sex{ MALE,FEMALE } String name; String age; Person(String name,String age) { this.name = name; this.age = age; } }","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"RxJava","slug":"Android/RxJava","date":"2018-07-18T10:08:32.068Z","updated":"2018-07-18T10:08:32.068Z","comments":true,"path":"2018/07/18/Android/RxJava/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/RxJava/","excerpt":"","text":"`javaimport java.util.ArrayList;import java.util.List;import java.util.concurrent.TimeUnit; import io.reactivex.*;import io.reactivex.functions.Action;import io.reactivex.schedulers.Schedulers; /** Created by zzn on 2017/4/28.*/ public class MyRxJava { public List&lt;String&gt; dataList; List&lt;DataModel&gt; result = new ArrayList&lt;&gt;(); public static void main(String[] args) { MyRxJava java = new MyRxJava(); } //RxJava 有四个基本概念：Observable (可观察者，即被观察者)、 Observer (观察者)、 subscribe (订阅)、事件。Observable 和 Observer 通过 subscribe() void setup() { //数据源 Observable&lt;String&gt; obser = Observable.create(new ObservableOnSubscribe&lt;String&gt;() { @Override public void subscribe(ObservableEmitter&lt;String&gt; observableEmitter) throws Exception { observableEmitter.onNext(&quot;Rx-&gt;发送数据0&quot;); observableEmitter.onComplete(); } }); Observable&lt;String&gt; obser1 = Observable.create(new ObservableOnSubscribe&lt;String&gt;() { @Override public void subscribe(ObservableEmitter&lt;String&gt; observableEmitter) throws Exception { observableEmitter.onNext(&quot;Rx-&gt;发送数据1&quot;); observableEmitter.onComplete(); } }); //订阅 obser.subscribe(str-&gt;{//接收数据 System.out.println(str); },err-&gt;{//错误 System.out.println(err.toString()); },()-&gt;{//完成 System.out.println(&quot;完成&quot;); },(com)-&gt;{ System.out.println(&quot;开始订阅&quot;); }); //just 快速创建 观察源 Observable&lt;String&gt; obser_just = Observable.just(&quot;just1&quot;); obser_just.subscribe(s -&gt; { System.out.println(s); }); //遍历 List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;value1&quot;); list.add(&quot;value2&quot;); Observable obser_list = Observable.fromIterable(list); obser_list.subscribe(obj-&gt;{ System.out.println(&quot;index-&gt;&quot;+obj); }); String[] strList = {&quot;1&quot;,&quot;2&quot;,&quot;3&quot;}; List&lt;Observable&lt;String&gt;&gt; task = new ArrayList&lt;&gt;(); for (String str:strList) { task.add(Observable.just(str).subscribeOn(Schedulers.io()).map(this::setStr)); } System.out.println(task); //定时 Observable obser_time = Observable.timer(2, TimeUnit.SECONDS); obser_time.subscribe((str)-&gt;{ System.out.println(&quot;启动定时器&quot;); }); //线程调度 Observable.just(1,2,3,4) .subscribeOn(Schedulers.io()) .observeOn(Schedulers.computation())//AndroidSchedulers.mainThread() .subscribe(str-&gt;{ System.out.println(str); }); } String setStr(String s) { //字符串处理 return s+s; } // MyRxJava() { setup(); } }class DataModel { String userName; String pwd;}","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"内部类","slug":"Android/内部类","date":"2018-07-18T10:08:32.067Z","updated":"2018-07-18T10:08:32.068Z","comments":true,"path":"2018/07/18/Android/内部类/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/内部类/","excerpt":"","text":"内部类 静态内部类 123456789101112131415161718192021222324252627282930313233class StaticOuter &#123; private int a = 1; private static int b = 2;public static void test() &#123; System.out.println(&quot;Outer static test ...&quot;); &#125; public void test2()&#123; System.out.println(&quot;Outer instabce test ...&quot;); &#125; static class StaticInner &#123; public int a = 200; static int b =300; public static void test()&#123; System.out.println(&quot;Inner static test ...&quot;); &#125; public void test2()&#123; System.out.println(&quot;Inner instance test ...&quot;); StaticOuter.test(); new StaticOuter().test2(); System.out.println(&quot;StaticOuter.b = &quot;+StaticOuter.b); &#125; &#125; &#125; 成员内部类 1234567891011121314151617181920212223class MemberOuter&#123; private String s1 = &quot;Outer InstanceMar&quot;; private String s2 = &quot;OuterStatic s2&quot;; public void setS1(String s1) &#123; this.s1 = s1; new MemberOuter().new MemberInner(); this.new MemberInner(); &#125; class MemberInner&#123; String s1= &quot;Inner instanceMae &quot;; static final String s4 = &quot;static final MemberInner&quot;; void test2() &#123; System.out.println(&quot;s2 = &quot;+s2); &#125; &#125; &#125; 匿名内部类`interface Action { public void do();} class Person { public void user(Action pen) { pen.do(); } } public class AnyInnerClass { public static void main(String args[]) { Person p = new Person(); p.user(new Pen() { @Override public void write() { } }); } }","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"笔记","slug":"Android/笔记","date":"2018-07-18T10:08:32.065Z","updated":"2018-07-18T10:08:32.066Z","comments":true,"path":"2018/07/18/Android/笔记/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/笔记/","excerpt":"","text":"开发细节 java windows 环境下jdk 配置(1)新建-&gt;变量名”JAVA_HOME”，变量值”C:\\Java\\jdk1.8.0_05”(即JDK的安装路径) (2)编辑-&gt;变量名”Path”，在原变量值的最后面加上“;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin” (3)新建-&gt;变量名“CLASSPATH”,变量值”.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar”","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"data绑定 kotlin","slug":"Android/data绑定 kotlin","date":"2018-07-18T10:08:32.064Z","updated":"2018-07-18T10:08:32.065Z","comments":true,"path":"2018/07/18/Android/data绑定 kotlin/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/data绑定 kotlin/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;layout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\"&gt; &lt;data&gt; &lt;import type=\"com.example.zzn.myapplication.Main2Activity.Action\"/&gt; &lt;import type=\"com.example.zzn.myapplication.Person\"/&gt; &lt;variable name=\"action\" type=\"Action\"/&gt; &lt;variable name=\"model\" type=\"Person\"/&gt; &lt;/data&gt; &lt;android.support.constraint.ConstraintLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" tools:context=\"com.example.zzn.myapplication.Main2Activity\"&gt; &lt;TextView android:id=\"@+id/textView\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"@&#123;model.name&#125;\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" android:layout_marginTop=\"16dp\" android:layout_marginRight=\"8dp\" app:layout_constraintRight_toRightOf=\"parent\" android:layout_marginEnd=\"8dp\"/&gt; &lt;Button android:text=\"按钮\" android:onClick=\"@&#123;action.tap&#125;\" android:layout_width=\"0dp\" android:layout_height=\"60dp\" android:layout_marginTop=\"32dp\" app:layout_constraintTop_toBottomOf=\"@+id/textView\" android:layout_marginLeft=\"8dp\" app:layout_constraintLeft_toLeftOf=\"parent\" android:layout_marginRight=\"8dp\" app:layout_constraintRight_toRightOf=\"parent\" app:layout_constraintHorizontal_bias=\"0.502\"/&gt; &lt;/android.support.constraint.ConstraintLayout&gt; &lt;/layout&gt; `kotlinpublic class Main2Activity : AppCompatActivity() { private var receiver:MyReceiver? = null private val mNotiName = &quot;com.example.zzn.myapplication.MY_NOTI&quot; //绑定事件 inner class Action { //点击事件 fun tap(view:View) { Toast.makeText(view.context,&quot;发送广播&quot;,Toast.LENGTH_SHORT).show() val intent = Intent(this@Main2Activity.mNotiName) sendBroadcast(intent) } } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) // setContentView(R.layout.activity_main2) val binding = DataBindingUtil.setContentView&lt;ActivityMain2Binding&gt;(this,R.layout.activity_main2) val person =Person() person.name = &quot;zhanshan&quot; person.age = &quot;11&quot; binding.action = Action() binding.model = person setBoardCast() } //动态广播 fun setBoardCast() { receiver = MyReceiver() val filter = IntentFilter(mNotiName) registerReceiver(receiver,filter) } } //public class Person { var name:String? = null var age:String? = null }public class MyReceiver : BroadcastReceiver() { override fun onReceive(context: Context, intent: Intent) { Toast.makeText(context, &quot;收到广播&quot;, Toast.LENGTH_LONG).show() } }","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"主题相关","slug":"Android/主题相关","date":"2018-07-18T10:08:32.062Z","updated":"2018-07-18T10:08:32.063Z","comments":true,"path":"2018/07/18/Android/主题相关/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/主题相关/","excerpt":"","text":"`xml @color/colorPrimary @color/colorPrimaryDark @color/colorAccent @color/colorAccent","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"常用n2排序算法","slug":"编程/常用n2排序算法","date":"2018-07-18T09:58:09.794Z","updated":"2018-07-18T10:09:38.246Z","comments":true,"path":"2018/07/18/编程/常用n2排序算法/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/编程/常用n2排序算法/","excerpt":"","text":"`c++ #include int num[] = {8,6,3,5,1,3,7,9}; // 8 void swap(int &amp;a,int &amp;b) { int temp = 0; temp = a; a = b; b = temp; } // 冒泡排序void sort1(int arr[],int n) { int i,j = 0; for (i = 0; i &lt; n; ++i) { for (j = 0; j &lt; n - i -1; ++j) { if (arr[j]&gt;arr[j+1]){ swap(arr[j],arr[j+1]); } } } } // 选择排序void sort2(int arr[],int n) { for (int i = 0; i &lt; n; ++i) { // 每次循环第一个i默认最小值 int minIndex = i; for (int j = i+1; j &lt; n; ++j) { if (arr[minIndex] &gt; arr[j]) { minIndex = j; } } // 替换最小值 swap(arr[minIndex],arr[i]); } } // 插入排序 void sort3(int arr[], int n) { for (int i = 1; i &lt; n; ++i) { // 对比i前几个元素 for (int j = i; j &gt;= 1; j--) { if (arr[j]&lt;arr[j-1]) { swap(arr[j],arr[j-1]); } } } } // 插入排序优化void sort4(int arr[],int n) { for (int i = 1; i &lt; n; i++) { /* code */ int j = 0; int temp = arr[i]; for (j = i; j &gt; 0 &amp;&amp; arr[j-1]&gt;temp; j--) { /* code */ arr[j] = arr[j-1]; } arr[j] = temp; } } int main(int argc, char const argv[]){ / code */ sort4(num,8); for (int i = 0; i &lt; 8; ++i) { printf(“%d\\n”, num[i]); } return 0;}","categories":[{"name":"编程","slug":"编程","permalink":"https://Alexzzn.github.io/categories/编程/"}],"tags":[],"keywords":[{"name":"编程","slug":"编程","permalink":"https://Alexzzn.github.io/categories/编程/"}]},{"title":"常用nlogn排序算法","slug":"编程/常用nlogn排序算法","date":"2018-07-18T09:58:09.793Z","updated":"2018-07-18T10:09:36.924Z","comments":true,"path":"2018/07/18/编程/常用nlogn排序算法/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/编程/常用nlogn排序算法/","excerpt":"","text":"归并排序算法`c++ #include // 归并排序void __merge(int arr[],int l,int mid,int r) { // int aux[r-l+1]; int *aux = new int[r-l+1]; // 复制aux数组 for (int i = l; i &lt;= r; i++) { aux[i-l] = arr[i]; } // 对比下标 i,j k int i = l,j = mid + 1; for (int k=l;k&lt;=r;k++) { // 判断索引越界 if (i &gt; mid) { arr[k] = aux[j-l]; j++; } else if (j &gt; r) { arr[k] = aux[i-l]; i++; } else if (aux[i-l] &gt; aux[j-l]) { // 比较两边下表索引 arr[k] = aux[j-l]; j++; } else { arr[k] = aux[i-l]; i++; } } delete []aux; } void __mergeSort(int arr[],int l,int r) { if (l &gt;= r) { return; } int mid = (l+r) / 2; // 递归 把数组分成 单个元素 __mergeSort(arr,l,mid); __mergeSort(arr,mid+1,r); __merge(arr,l,mid,r); } void mergeSort(int arr[],int n) { __mergeSort(arr,0,n-1); } int main(int argc, char const *argv[]) { int arr[] = {3,5,2}; mergeSort(arr,3); for (int i=0; i&lt;3; i++) { printf(&quot;%d\\n&quot;,arr[i]); } return 0; }","categories":[{"name":"编程","slug":"编程","permalink":"https://Alexzzn.github.io/categories/编程/"}],"tags":[],"keywords":[{"name":"编程","slug":"编程","permalink":"https://Alexzzn.github.io/categories/编程/"}]},{"title":"CPlus知识点","slug":"编程/CPlus知识点","date":"2018-07-18T09:58:09.792Z","updated":"2018-07-18T10:09:36.923Z","comments":true,"path":"2018/07/18/编程/CPlus知识点/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/编程/CPlus知识点/","excerpt":"","text":"Person.h12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970//// Person.hpp// CPlusL//// Created by ZZN on 2018/3/19.// Copyright © 2018年 ZZN. All rights reserved.//#ifndef Person_hpp#define Person_hpp#include &lt;iostream&gt;using namespace std;class Student;class Person &#123;private: int age; public: string name; // 初始化列表 Person(int _pid = 0); const int pid; // 拷贝构造函数 Person(const Person &amp;p,int _pid = 0); void desc(); void setAge(int age); // 引用 void reference(); // 声明add 回调 void swap(int a, int b,const function&lt;void(int value)&gt; &amp;test); // 纯虚函数 virtual void learn() = 0; // 友元函数 friend void print_info(Person &amp;c) &#123; // Student:: 指定 c.desc(); &#125;; &#125;;#endif /* Person_hpp */#ifndef Student_hpp#define Student_hpp// 学生class Student:virtual public Person &#123;public: // 派生类 释放 virtual ~Student(); void getName(); // 实现 void print_info(Person &amp;c) &#123; c.desc(); &#125;;&#125;;#endif 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162//// Person.cpp// CPlusL//// Created by ZZN on 2018/3/19.// Copyright © 2018年 ZZN. All rights reserved.//#include &quot;Person.hpp&quot;Person::Person(int _pid):pid(_pid) &#123; this-&gt;age = 0; this-&gt;name = &quot;&quot;; &#125;Person::Person(const Person &amp;p,int _pid):pid(_pid) &#123; &#125;void Person::desc() &#123; cout &lt;&lt; this-&gt;age &lt;&lt; this-&gt;name &lt;&lt; endl;&#125;void Person::setAge(int _a) &#123; this-&gt;age = _a;&#125;void Person::swap(int a, int b, const function&lt;void (int)&gt; &amp;test) &#123; auto sum = a + b; test(sum);&#125;void Person::reference() &#123; // int a = 10; // 指针 指向a地址 int *p = &amp;a; int *&amp;q = p; // 指针p的引用 *q = 20; // const int x = 3; int y = 5; int *const m = &amp;x; int const *n = &amp;y; *m = 10; n = &amp;y; cout &lt;&lt; a &lt;&lt; m &lt;&lt; endl;&#125; Main.m1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253//// main.cpp// CPlusL//// Created by ZZN on 2018/3/19.// Copyright © 2018年 ZZN. All rights reserved.//#include &lt;iostream&gt;#include &quot;Person.hpp&quot;#include &quot;STLib.hpp&quot;int main(int argc, const char * argv[]) &#123; // 栈中变量 Person p1; p1.name = &quot;zhanshan&quot;; p1.desc(); // 堆中变量 auto p2 = new Person(); p2-&gt;name = &quot;王五&quot;; p2-&gt;setAge(20); p2-&gt;desc(); // 对象数组 内存回收 auto pa = new Person[3]; pa[0].desc(); pa[1].reference(); pa++; pa-&gt;desc(); pa--; delete []pa; // lamada p2-&gt;swap(5, 5, [](int v)-&gt;void&#123; std::cout &lt;&lt; &quot;age:&quot; &lt;&lt; v &lt;&lt; endl; &#125;); p2-&gt;reference(); // auto lib = new STLib(); lib-&gt;HelloWorld(&quot;Haha&quot;); delete p2; return 0;&#125;","categories":[{"name":"编程","slug":"编程","permalink":"https://Alexzzn.github.io/categories/编程/"}],"tags":[],"keywords":[{"name":"编程","slug":"编程","permalink":"https://Alexzzn.github.io/categories/编程/"}]},{"title":"常用算法","slug":"编程/常用算法","date":"2018-07-18T09:58:09.792Z","updated":"2018-07-18T10:09:36.923Z","comments":true,"path":"2018/07/18/编程/常用算法/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/编程/常用算法/","excerpt":"","text":"快速排序12345678910111213141516171819202122232425262728293031323334时间复杂度：O（nlogn）代码实现：//快速排序 //快速排序 // 快速排序法func sort4( list:inout Array&lt;Int&gt;,start:Int,end:Int) &#123; if start &lt; end &#123; var low = start, high = end ,mid = list[low] while low &lt; high &#123; while (low &lt; high) &amp;&amp; list[high] &gt;= mid &#123; high -= 1 &#125; list[low] = list[high] while (low &lt; high &amp;&amp; list[low] &lt; mid) &#123; low += 1 &#125; list[high] = list[low] &#125; list[low] = mid sort4(list: &amp;list, start: start, end: low-1) sort4(list: &amp;list, start: low+1, end: end) &#125;&#125; 二分法查找`java public int search(int[] arr,int num ) { int low = 0; int high = arr.length-1; while (low &lt;= high ) { int middle = (low + high)/2; if (num == arr[middle]) { return middle; } else if (num &lt; arr[middle]) { return middle -1; } else { return middle + 1; } } return -1; }","categories":[{"name":"编程","slug":"编程","permalink":"https://Alexzzn.github.io/categories/编程/"}],"tags":[],"keywords":[{"name":"编程","slug":"编程","permalink":"https://Alexzzn.github.io/categories/编程/"}]},{"title":"黑苹果相关","slug":"系统相关/黑苹果相关","date":"2018-07-18T09:57:53.838Z","updated":"2018-07-18T10:09:13.887Z","comments":true,"path":"2018/07/18/系统相关/黑苹果相关/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/系统相关/黑苹果相关/","excerpt":"","text":"`新系统 // http://bbs.pcbeta.com/viewthread-1722308-1-1.html1，开启hidpi HDMI sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool YES2,开启HDMI 输入限制： https://github.com/Floris497/mac-pixel-clock-patch-V23，开启hidpi： http://bbs.feng.com/read-htm-tid-10434986.html","categories":[{"name":"系统相关","slug":"系统相关","permalink":"https://Alexzzn.github.io/categories/系统相关/"}],"tags":[],"keywords":[{"name":"系统相关","slug":"系统相关","permalink":"https://Alexzzn.github.io/categories/系统相关/"}]},{"title":"java注解","slug":"Android/java注解","date":"2018-07-18T09:57:38.572Z","updated":"2018-07-18T09:57:38.572Z","comments":true,"path":"2018/07/18/Android/java注解/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/java注解/","excerpt":"","text":"`javaimport DAO.Filter; import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method; public class Main { // public static void main(String[] args) { Main main = new Main(); main.setup(); } // void setup() { Filter f1 = new Filter(); f1.setId(&quot;10&quot;); try { String text = query(f1); System.out.println(text); } catch (NoSuchMethodException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } } String query(Filter filter) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException { StringBuffer stringBuffer = new StringBuffer(); //获取class Class c = filter.getClass(); boolean isExist = c.isAnnotationPresent(Table.class); if (isExist == false) { return null; } Table table = (Table) c.getAnnotation(Table.class); String tableName = table.value(); stringBuffer.append(&quot;select * from &quot;).append(tableName).append(&quot; where 1 = 1 &quot;); //遍历 Field[] fields = c.getDeclaredFields(); for (Field field:fields) { boolean iscolum = field.isAnnotationPresent(Column.class); if (iscolum == false) { continue; } Column column = field.getAnnotation(Column.class); String name = column.value(); //拿到字段和get方法 String fieldName = field.getName(); String getMethodName = &quot;get&quot; + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1); //执行method Method getMethod = c.getMethod(getMethodName); String fieldValue = (String) getMethod.invoke(filter); if (fieldValue == null) { continue; } //拼接sql stringBuffer.append(&quot; and &quot;).append(fieldName).append(&quot; = &quot;).append(fieldValue); } return stringBuffer.toString(); } } @Target({ElementType.FIELD})@Retention(RetentionPolicy.RUNTIME)@interface Column { String value();} @Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@interface Table { String value(); }","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"java网络","slug":"Android/java网络","date":"2018-07-18T09:57:38.570Z","updated":"2018-07-18T09:57:38.571Z","comments":true,"path":"2018/07/18/Android/java网络/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/java网络/","excerpt":"","text":"网络网络的基本概念： 网络的7种构架: 1,硬件层 2，数据层 3，数据链路层 4，传输层 5，会话层 6，表示层 7，应用层 TCP/IP的四层构架： 1，网络数据链路 2，传输层 3，会话层 4，应用层 三次握手，数据包，应答，数据包重发","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"kotlin ѧϰ","slug":"Android/kotlin 小结","date":"2018-07-18T09:57:38.566Z","updated":"2018-07-19T01:11:07.165Z","comments":true,"path":"2018/07/18/Android/kotlin 小结/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/kotlin 小结/","excerpt":"","text":"基础123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172class Person&#123; private var clo:(()-&gt;Unit)? = null public var name:String? = null&#125;//扩展属性val Person.kinds:Intget() = 1//扩展函数fun Person.desc()&#123; println(\"扩展函数\")&#125;enum class Direction &#123; North,South,West,East&#125;//lamadafun testClosure(closure: ()-&gt;Unit) &#123; closure()&#125;1, Double 64 ,Float 32, Long 64,Int 32,Short 16,Byte,2, break 和 continue 标签 loop@ for (i in 1..100) &#123; for (j in i..100) &#123; if (...) break@loop &#125; &#125;3, 构造函数 1，class Customer(name: String) &#123;&#125; //一级 2，class Person &#123; // 二级 constructor(parent: Person) &#123; parent.children.add(this) &#125; &#125; 4, 接口重写 interface A &#123; fun foo() &#123; print(\"A\") &#125; fun bar() &#125; interface B &#123; fun foo() &#123; print(\"B\") &#125; fun bar() &#123; print(\"bar\") &#125; &#125; class C : A &#123; override fun bar() &#123; print(\"bar\") &#125; &#125; class D : A, B &#123; override fun foo() &#123; super&lt;A&gt;.foo() super&lt;B&gt;.foo() &#125; &#125; 4， 嵌套类 class Outer &#123; private val bar: Int = 1 class Nested &#123; fun foo() = 2 &#125; 内部类 class Outer &#123; private val bar: Int = 1 inner class Inner &#123; fun foo() = bar &#125; 延伸1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253class LearnOne &#123; // 函数声明 fun sum(a:Int, b:Int):Int &#123; println(a+b) return a+b &#125; // 自推导型的返回值 fun sum1(a: Int, b: Int) = a + b // 返回无意义值 Unit， $ 获取参数值 fun printSum(a: Int, b: Int): Unit &#123; println(\"sum of $a and $b is $&#123;a + b&#125;\") &#125; // 字符串模版 fun str(args:Array&lt;String&gt;) &#123; var a = 1 val s1 = \"a is $a\" var s2 = \"args[1] is $&#123;args[0]&#125;\" println(s1) &#125; // 可空值 fun parseInt(str: String?): Int? &#123; var valueInt = str?.toInt() return valueInt &#125; // 高阶函数 fun &lt;T&gt; locked(lock:Lock,v1:T,v2:T,body:(a:Int)-&gt;T):Boolean where T:Comparable&lt;T&gt;&#123; lock.lock() val a = body(100) println(a) return v1 &gt; v2 &#125; // 测试 fun test() &#123; val lock = ReentrantLock() var l1 = locked(lock,1,2, &#123; a:Int -&gt; 1000 &#125;) print(l1) &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"java线程池","slug":"Android/java线程池","date":"2018-07-18T09:57:38.566Z","updated":"2018-07-18T09:57:38.567Z","comments":true,"path":"2018/07/18/Android/java线程池/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/java线程池/","excerpt":"","text":"`javapackage com.company; import java.util.concurrent.*; public class Main { public static void main(String[] args) { // Executors.newCachedThreadPool(); //创建一个缓冲池，缓冲池容量大小为Integer.MAX_VALUE// Executors.newSingleThreadExecutor(); //创建容量为1的缓冲池// Executors.newFixedThreadPool(int); //创建固定容量大小的缓冲池 // 任务缓存队列及排队策// ArrayBlockingQueue：基于数组的先进先出队列，此队列创建时必须指定大小；// LinkedBlockingQueue：基于链表的先进先出队列，则默认为Integer.MAX_VALUE；// synchronousQueue：不保存提交的任务，而是将直接新建一个线程来执行新来的任务。 // 线程池容量的动态调整// setCorePoolSize：设置核心池大小// setMaximumPoolSize：设置线程池最大能创建的线程数目大小 ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newCachedThreadPool(); // ThreadPoolExecutor executor = new ThreadPoolExecutor(5,20,200,// TimeUnit.MINUTES,new LinkedBlockingDeque()); for (int i = 0;i&lt;100;i++) { MyTask task = new MyTask(i); executor.execute(task); System.out.println(&quot;线程池中线程数目：&quot;+executor.getPoolSize()+&quot;，队列中等待执行的任务数目：&quot;+ executor.getQueue().size()+&quot;，已执行玩别的任务数目：&quot;+executor.getCompletedTaskCount()); } executor.shutdown(); } } class MyTask implements Runnable { // private int taskId; MyTask(int num) { this.taskId = num; } @Override public void run() { try { Thread.currentThread().sleep(4000); System.out.println(&quot;taskId:&quot; + taskId); } catch (InterruptedException e) { e.printStackTrace(); } } }","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"kotlin配置","slug":"Android/kotlin配置","date":"2018-07-18T09:57:38.564Z","updated":"2018-07-18T10:08:32.064Z","comments":true,"path":"2018/07/18/Android/kotlin配置/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/kotlin配置/","excerpt":"","text":"`gradlebuildscript { repositories { jcenter() } dependencies { classpath “org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version” }} apply plugin: ‘com.android.application’apply plugin: ‘kotlin-android’apply plugin: ‘kotlin-android-extensions’ android { compileSdkVersion 23 buildToolsVersion “23.0.2” defaultConfig { applicationId &quot;me.chunyu.spike.wcl_kotlin_demo&quot; minSdkVersion 14 targetSdkVersion 23 versionCode 1 versionName &quot;1.0&quot; } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; } } sourceSets { main.java.srcDirs += &apos;src/main/kotlin&apos; } } dependencies { compile fileTree(dir: ‘libs’, include: [‘*.jar’]) testCompile ‘junit:junit:4.12’ compile ‘com.android.support:appcompat-v7:23.1.1’ compile “org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version”}","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"GCD","slug":"iOS/GCD","date":"2018-07-18T09:57:26.489Z","updated":"2018-07-18T09:57:26.490Z","comments":true,"path":"2018/07/18/iOS/GCD/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/GCD/","excerpt":"","text":"`swift // 后台执行： dispatch_async(dispatch_get_global_queue(0, 0), ^{ // something }); // 主线程执行： dispatch_async(dispatch_get_main_queue(), ^{ // something }); // 一次性执行： static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^{ // code to be executed once }); // 延迟2秒执行： double delayInSeconds = 2.0; dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC); dispatch_after(popTime, dispatch_get_main_queue(), ^(void){ // code to be executed on the main queue after delay }); // 自定义dispatch_queue_t dispatch_queue_t urls_queue = dispatch_queue_create(“blog.devtang.com”, NULL); dispatch_async(urls_queue, ^{ // your code }); dispatch_release(urls_queue); // 合并汇总结果 dispatch_group_t group = dispatch_group_create(); dispatch_group_async(group, dispatch_get_global_queue(0,0), ^{ // 并行执行的线程一 }); dispatch_group_async(group, dispatch_get_global_queue(0,0), ^{ // 并行执行的线程二 }); dispatch_group_notify(group, dispatch_get_global_queue(0,0), ^{ // 汇总结果 });","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"NSLOCATION","slug":"iOS/NSLOCATION","date":"2018-07-18T09:57:26.488Z","updated":"2018-07-18T10:10:22.791Z","comments":true,"path":"2018/07/18/iOS/NSLOCATION/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/NSLOCATION/","excerpt":"","text":"调用 core loaction 中的 CLLocationManager #import &lt;CoreLocation/CoreLocation.h&gt;CLLocationManager *locationManager; 在定位服务中还包含CLGeocoder类用于处理地理编码和逆地理编码（又叫反地理编码）功能。 CLGeocoder *_geocoder;对象方法:reverseGeocodeLocation:location completionHandler: 类方法 :1234567+ (BOOL)locationServicesEnabled;获取是否开启定位服务+ (CLAuthorizationStatus)authorizationStatus; 返回 用户 的操作 的枚举属性desiredAccuracy :定位精度的枚举对象方法:startUpdatingLocation:开始定位追踪，开始定位后将按照用户设置的更新频率执行 1234567-(void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations;方法反馈定位信息stopUpdatingLocation:停止定位追踪requestAlwaysAuthorization:请求获得应用一直使用定位服务授权，注意使用此方法前要在info.plist中配置NSLocationAlwaysUsageDescription","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"浅谈iOS导航栏布局问题","slug":"iOS/浅谈iOS导航栏布局问题","date":"2018-07-18T09:57:26.486Z","updated":"2018-07-18T09:57:26.486Z","comments":true,"path":"2018/07/18/iOS/浅谈iOS导航栏布局问题/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/浅谈iOS导航栏布局问题/","excerpt":"","text":"iOS 安全区域 主要设计几个属性 automaticallyAdjustsScrollViewInsets，contentInsetAdjustmentBehavior,adjustedContentInset,edgesForExtendedLayout iOS11 安全区域后由topLayoutGuider 改为 safeGuider作为相对依赖导航栏透明属性后，scrollview属性的view push是 会由控制器 automaticallyAdjustsScrollViewInsets(iOS10),adjustedContentInset(iOS11) 自动加上 nav的高度， 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// 普通控制器 private func initLayoutUI() &#123; // 禁用系统滚动视图布局 ios10 automaticallyAdjustsScrollViewInsets = false // 布局 contentView.snp.makeConstraints &#123; (make) in if #available(iOS 11.0, *) &#123; if navBgBarTransEnable == true &#123; make.top.bottom.equalTo(0) edgesForExtendedLayout = .top &#125; else &#123; make.top.equalTo(view.safeAreaLayoutGuide.snp.top) make.bottom.equalTo(view.safeAreaLayoutGuide.snp.bottom) &#125; &#125; else &#123; if navBgBarTransEnable == true &#123; edgesForExtendedLayout = .top make.top.bottom.equalToSuperview() &#125; else &#123; make.top.equalTo(topLayoutGuide.snp.bottom) make.bottom.equalTo(bottomLayoutGuide.snp.top) &#125; &#125; make.left.right.equalToSuperview() &#125; &#125; // tablevivew if #available(iOS 11, *) &#123; if navBgBarTransEnable == true &#123; tableView.contentInsetAdjustmentBehavior = .never &#125; else &#123; tableView.contentInsetAdjustmentBehavior = .automatic &#125; //tableView.contentInsetAdjustmentBehavior = .automatic &#125; else &#123; if navBgBarTransEnable == true &#123; automaticallyAdjustsScrollViewInsets = false &#125; else &#123; automaticallyAdjustsScrollViewInsets = true &#125; &#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"iOS进阶学习","slug":"iOS/iOS进阶学习","date":"2018-07-18T09:57:26.484Z","updated":"2018-07-18T10:10:21.988Z","comments":true,"path":"2018/07/18/iOS/iOS进阶学习/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/iOS进阶学习/","excerpt":"","text":"git 回顾 初始化git init 添加文件 git add * 提交git commit -m desc 查看记录 git log 版本回退 git reset --hard HEAD^^ ^表示上一个版本，^^表示上上个, ~表示第几个，34356表示id号 * --hard id 版本恢复查看 git reflog 查看已删除 commit id 添加远程仓库 git remote add origin git@xx.git 修改远程仓库地址 git remote set-url origin git@xx.git push仓库 git push -u origin master tag标签 git tag -m &#39;**&#39; 同步 git push origin 0.02 删除 git push origin :版本号 初级工程师精通oc语言基础精通UIKit熟悉网络通信机制以及常用数据传输协议具备主流开源框架的使用经验（AFNetWorking） 中级工程师技术要求扎实的编程，数据结构，算法基础深入理解语言机制，内存管理，网路，多线程，gui精通常用的设计模式，框架，构架良好的分析，解决问题的能力 高级工程师的技术要求解决研发过程中的关键问题和技术难题调优设备流量，性能，电量等较强的软件设计能力对iOS内部原理有深刻的理解 tableview 要点 cell复用 数据源同步（多线程并发 修改读写数据源）（解决：串行|copy） UI事件传递响应 uiview，calayer uiview -&gt; layer(calayer,(contents-&gt;backing store)) -&gt; backgoundcolor(层级关系) 总结: UIView 是提供显示内容，以及处理触等事件以及参与响应链，CAlayer负责显示视图内容等contents 事件传递、响应链 主要有两个方法参与： hitTest(point:CGPoint,event:UIEvent) -&gt; UIView; point(inside:CGPoint,event:UIEvent)-&gt;Bool; 点击屏幕 -&gt; UIApplication -&gt; UIWindow -&gt; hitTest-&gt; pointInsinde(倒序遍历子视图 hitTest) -&gt; view UIView 绘制流程 UIView.setNeedslayout 实际调用 CALayer.setNeedsDisplay。首先在runloop中注册一个Observer监听 线程BeforeWaiting和Exit的事件。执行注册的callback（执行view的drawrect），通过coreAnimation发送到Gpu（view的拼接，纹理的渲染） 一般的流程 view.addSubview -&gt; CALayer.drawInContent -&gt; CAlayerDelagate.draw(layer,inContext) 离屏渲染 On-Screen Rendering 意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。 Off-Screen Rendering 意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作（光栅化，遮罩，阴影，抗锯齿，圆角）。 OC基础分类 主要使用体现 声明私有方法 分解庞大的类文件 把Framework的私有方法公开 特点 运行时决定 能够为系统类添加分类 能够添加实例方法、类方法、协议、属性(并非实例变量，get set 方法) Runtime数据结构 主要结构 class = objc_class -&gt; 继承objc_object objc_object (isa指针 ) objc_class(Class superClass, cache_t cache, class_data_bits_t bits) isa_t 是共用体结构（指针型isa，非指针型isa） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374// objc_object数据结构struct objc_object &#123;private: isa_t isa;&#125;;// isa共用体结构union isa_t &#123; isa_t() &#123; &#125; isa_t(uintptr_t value) : bits(value) &#123; &#125; Class cls; uintptr_t bits; struct &#123; uintptr_t nonpointer : 1; uintptr_t has_assoc : 1; uintptr_t has_cxx_dtor : 1; uintptr_t shiftcls : 33; // MACH_VM_MAX_ADDRESS uintptr_t magic : 6; uintptr_t weakly_referenced : 1; uintptr_t deallocating : 1; uintptr_t has_sidetable_rc : 1; uintptr_t extra_rc : 19; &#125;; &#125;// objcet_class 结构struct objc_class : objc_object &#123; // Class ISA; Class superclass; cache_t cache; // formerly cache pointer and vtable hash查找 class_data_bits_t bits; // class_rw_t * plus custom rr/alloc flags class_rw_t *data() &#123; return bits.data(); &#125; void setData(class_rw_t *newData) &#123; bits.setData(newData); &#125;&#125;;// 存放 实例方法，属性名struct class_rw_t &#123; uint32_t flags; uint32_t version; const class_ro_t *ro; // 成员信息 method_array_t methods; //方法列表 property_array_t properties; //属性列表 protocol_array_t protocols; //协议列表 Class firstSubclass; Class nextSiblingClass;&#125;// 存放 成员变量信息struct class_ro_t &#123; uint32_t flags; uint32_t instanceStart; uint32_t instanceSize; const uint8_t * ivarLayout; const char * name; // 类名 method_list_t * baseMethodList; protocol_list_t * baseProtocols; const ivar_list_t * ivars; //定义类的成员变量 const uint8_t * weakIvarLayout; property_list_t *baseProperties; //属性列表 method_list_t *baseMethods() const &#123; return baseMethodList; &#125;&#125;; 消息转发","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"Promise","slug":"iOS/Promise","date":"2018-07-18T09:57:26.483Z","updated":"2018-07-18T10:10:21.986Z","comments":true,"path":"2018/07/18/iOS/Promise/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/Promise/","excerpt":"","text":"TODO:// RWPromiseKit promise介绍","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"rac5ѧϰ","slug":"iOS/rac5ѧϰ","date":"2018-07-18T09:57:26.480Z","updated":"2018-07-18T10:10:21.186Z","comments":true,"path":"2018/07/18/iOS/rac5ѧϰ/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/rac5ѧϰ/","excerpt":"","text":"Reactivecocoa 5.0摘自那一抹忧伤 import ReactiveCocoa import Result import ReactiveSwift (值得注意的是Signal 依赖于ReactiveSwift )(NoError 依赖于 Result)主要的类型1.事件（Event）2.监听器（Observer）3.存根（Disposable）4.信号（Signal)主要用法 1.信号的创建1234567891011121314151617181920212223242526272829// MARK: - 0.创建信号的方法 func createSignalMehods() &#123; // 1.通过信号发生器创建(冷信号) let producer = SignalProducer&lt;String, NoError&gt;.init &#123; (observer, _) in print(&quot;新的订阅，启动操作&quot;) observer.send(value: &quot;Hello&quot;) observer.send(value: &quot;World&quot;) &#125; let subscriber1 = Observer&lt;String, NoError&gt;(value: &#123; print(&quot;观察者1接收到值 \\($0)&quot;) &#125;) let subscriber2 = Observer&lt;String, NoError&gt;(value: &#123; print(&quot;观察者2接收到值 \\($0)&quot;) &#125;) print(&quot;观察者1订阅信号发生器&quot;) producer.start(subscriber1) print(&quot;观察者2订阅信号发生器&quot;) producer.start(subscriber2) //注意：发生器将再次启动工作 // 2.通过管道创建（热信号） let (signalA, observerA) = Signal&lt;String, NoError&gt;.pipe() let (signalB, observerB) = Signal&lt;String, NoError&gt;.pipe() Signal.combineLatest(signalA, signalB).observeValues &#123; (value) in print( &quot;收到的值\\(value.0) + \\(value.1)&quot;) &#125; observerA.send(value: &quot;1&quot;) observerA.sendCompleted() observerB.send(value: &quot;2&quot;) observerB.sendCompleted() &#125; 2.文本输入框的监听1234567891011121314// MARK: - 1.监听输入框输入 func testTF() &#123; // 输入时监听 userNameTF.reactive.continuousTextValues.observeValues &#123; text in print(text ?? &quot;&quot;) &#125; // 监听粘贴进来的文本 let result = userNameTF.reactive.values(forKeyPath: &quot;text&quot;) result.start &#123; (text) in print(text) &#125; &#125; 3.按钮监听123456// MARK: - 3.按钮监听 func testBtnClick() &#123; testBtn.reactive.trigger(for: .touchUpInside).observeValues &#123; print(&quot;按钮点击&quot;) &#125; &#125; 4.信号合并12345678910111213141516171819202122232425262728293031323334// MARK: - 4.信号联合 func testCombineLatest() &#123; // 通过管道创建 let (signalA, observerA) = Signal&lt;String, NoError&gt;.pipe() let (signalB, observerB) = Signal&lt;String, NoError&gt;.pipe() Signal.combineLatest(signalA, signalB).observeValues &#123; (value) in print( &quot;收到的值\\(value.0) + \\(value.1)&quot;) &#125; observerA.send(value: &quot;1&quot;) observerA.sendCompleted() observerB.send(value: &quot;2&quot;) observerB.sendCompleted() &#125; // MARK: - 5.信号联合 func testZip() &#123; let (signalA, observerA) = Signal&lt;String, NoError&gt;.pipe() let (signalB, observerB) = Signal&lt;String, NoError&gt;.pipe() Signal.zip(signalA, signalB).observeValues &#123; (value) in print( &quot;收到的值\\(value.0) + \\(value.1)&quot;) &#125; signalA.zip(with: signalB).observeValues &#123; (value) in &#125; observerA.send(value: &quot;1&quot;) observerA.sendCompleted() observerB.send(value: &quot;2&quot;) observerB.sendCompleted() &#125; 5.Scheduler调度器123456789101112// MARK: - 6.Scheduler(调度器) func testScheduler() &#123; // 主线程上延时0.3秒调用 QueueScheduler.main.schedule(after: Date.init(timeIntervalSinceNow: 0.3)) &#123; print(&quot;主线程调用&quot;) &#125; QueueScheduler.init().schedule(after: Date.init(timeIntervalSinceNow: 0.3))&#123; print(&quot;子线程调用&quot;) &#125; &#125; 6.Delegate12345678910let (signal, obser) = Signal&lt;Any, NoError&gt;.pipe() @IBAction func btnClick(btn: UIButton) &#123; obser.send(value: &quot;代理测试&quot;) &#125; // MARK: - 7.Delegate func testDelegate() &#123; redView.signal.observeValues &#123; (value) in print(&quot;按钮点击\\(value)&quot;) &#125; &#125; 7.通知1234567891011121314151617// MARK: - 8.通知 func testNoti() &#123; // 普通的通知方法 NotificationCenter.default.reactive.notifications(forName: Notification.Name(rawValue: &quot;home&quot;)).observeValues &#123; (value) in print(value.object ?? &quot;&quot;) &#125; NotificationCenter.default.post(name: NSNotification.Name(rawValue: &quot;home&quot;), object: nil) // 键盘的通知 NotificationCenter.default.reactive.notifications(forName: Notification.Name(rawValue: &quot;UIKeyboardWillShowNotification&quot; ), object: nil).observeValues &#123; (value) in print(&quot;键盘弹起&quot;) &#125; NotificationCenter.default.reactive.notifications(forName: Notification.Name(rawValue: &quot;UIKeyboardWillHideNotification&quot;), object: nil).observeValues &#123; (value) in print(&quot;键盘收起&quot;) &#125; &#125; 8.KVO12345678// MARK: - 9.KVO func testKVO() &#123; let result = self.view.reactive.values(forKeyPath: &quot;bounds&quot;) result.start &#123; [weak self](rect) in print(self?.view ?? &quot;&quot;) print(rect) &#125; &#125; 9.迭代器12345678910111213141516171819202122232425262728// MARK: - 10.迭代器 func testIterator() &#123; // 数组的迭代器 let array:[String] = [&quot;name&quot;,&quot;name2&quot;] var arrayIterator = array.makeIterator() while let temp = arrayIterator.next() &#123; print(temp) &#125; // swift 系统自带的遍历 array.forEach &#123; (value) in print(value) &#125; // 字典的迭代器 let dict:[String: String] = [&quot;key&quot;:&quot;name&quot;, &quot;key1&quot;:&quot;name1&quot;] var dictIterator = dict.makeIterator() while let temp = dictIterator.next() &#123; print(temp) &#125; // swift 系统自带的遍历 dict.forEach &#123; (key, value) in print(&quot;\\(key) + \\(value)&quot;) &#125; &#125; 10 、其他事件绑定12345678910111213141516171819202122// UI绑定到Model Signal.combineLatest(uerNameTF1.reactive.continuousTextValues,passwordTF1.reactive.continuousTextValues).observeValues &#123; (name, password) in //print(&quot;name = \\(name) + password = \\(password)&quot;) &#125; // 当输入框的两个值长度都大于或者等于6，按钮才可以点击 Signal.combineLatest(uerNameTF1.reactive.continuousTextValues,passwordTF1.reactive.continuousTextValues).map &#123; (name, password) -&gt; Bool in return ((name?.characters.count)! &gt;= 6 &amp;&amp; (password?.characters.count)! &gt;= 6) &#125;.observeValues &#123; [weak self](value) in print(&quot;合并\\(value)&quot;) self?.loginBtn.isEnabled = value &#125; // 参数省略 Signal.combineLatest(uerNameTF1.reactive.continuousTextValues,passwordTF1.reactive.continuousTextValues).map &#123; $0?.characters.count ?? 0 &gt;= 6 &amp;&amp; $1?.characters.count ?? 0 &gt;= 6 &#125;.observeValues &#123; [weak self](value) in print(&quot;合并\\(value)&quot;) self?.loginBtn.isEnabled = value &#125; loginBtn.reactive.isEnabled &lt;~ Signal.combineLatest(uerNameTF1.reactive.continuousTextValues,passwordTF1.reactive.continuousTextValues).map &#123; $0?.characters.count ?? 0 &gt;= 6 &amp;&amp; $1?.characters.count ?? 0 &gt;= 6 &#125; (责任编辑：那一抹忧伤)","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"POP动画","slug":"iOS/POP动画","date":"2018-07-18T09:57:26.478Z","updated":"2018-07-18T09:57:26.479Z","comments":true,"path":"2018/07/18/iOS/POP动画/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/POP动画/","excerpt":"","text":"1，数字文本 ：数字跳动1234567891011121314151617181920212223242526func ani() &#123; amountLab.text = &quot;0&quot; let prop = POPAnimatableProperty.property(withName: &quot;countup&quot;) &#123; (ani) in ani?.writeBlock = &#123; obj,values in guard let lab = obj as? UILabel else &#123; return &#125; guard let a = values?[0] else &#123; return &#125; lab.text = String(format: &quot;%d&quot;, Int(a)) &#125; &#125; as? POPAnimatableProperty let aniBase = POPBasicAnimation.easeOut() aniBase?.property = prop aniBase?.fromValue = 0 aniBase?.toValue = 80 aniBase?.duration = 1 aniBase?.beginTime = CACurrentMediaTime() + 0.5 amountLab.pop_add(aniBase, forKey: &quot;countup&quot;)&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"开发配置","slug":"iOS/开发配置","date":"2018-07-18T09:57:26.475Z","updated":"2018-07-18T10:10:21.180Z","comments":true,"path":"2018/07/18/iOS/开发配置/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/开发配置/","excerpt":"","text":"清华开源软件镜像站点Homebrew 镜像使用帮助1234567cd \"$(brew --repo)\"git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.gitcd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.gitbrew update 使用homebrew-science或者homebrew-python\"$(brew --repo)/Library/Taps/homebrew/homebrew-science\"123456git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-science.gitcd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-python&quot;git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-python.gitbrew update 对于旧版的 CocoaPods 可以使用如下方法使用 tuna 的镜像：123$ pod repo remove master$ pod repo add master https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git$ pod repo update 新版的 CocoaPods 不允许用pod repo add直接添加master库了，但是依然可以：123456$ cd ~/.cocoapods/repos $ pod repo remove master$ git clone https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git master最后进入自己的工程，在自己工程的podFile第一行加上：source &apos;https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git&apos;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"GCD总结","slug":"iOS/GCD总结","date":"2018-07-18T09:57:26.474Z","updated":"2018-07-18T10:10:21.178Z","comments":true,"path":"2018/07/18/iOS/GCD总结/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/GCD总结/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151//: Playground - noun: a place where people can playimport UIKitimport Dispatch//MARK: - DispatchQueue// 初始化一个默认队列let lab = \"com.dispatch\"// 线程的优先级 quality of servicelet qos = DispatchQoS.default// attributes 队列的属性let attr = DispatchQueue.Attributes.concurrent// 自动释放频率let autorelease = DispatchQueue.AutoreleaseFrequency.never// 队列let queue = DispatchQueue.init(label: lab, qos: qos, attributes: attr, autoreleaseFrequency: autorelease, target: nil)// MARK: - 队列分类// 主队列(对应主线程)let mainQueue = DispatchQueue.main// 全局队列let globalQueue = DispatchQueue.global()// 优先级队列let globalQos = DispatchQueue.global(qos: DispatchQoS.QoSClass.background)// MARK: - 任务分类// 串行let serialQueue = DispatchQueue(label: \"com.leo.serialQueue\")// 异步serialQueue.async &#123;&#125;// 同步serialQueue.sync &#123;&#125;// 并行let concurrentQueue = DispatchQueue(label: \"com.leo.concurrentQueue\",attributes:.concurrent)// 异步concurrentQueue.async &#123;&#125;// MARK: - 任务对象let item = DispatchWorkItem &#123;&#125;let item2 = DispatchWorkItem.init(qos: qos, flags: DispatchWorkItemFlags.enforceQoS) &#123;&#125;DispatchQueue.global().async(execute: item)// MARK: - after（延迟执行)let deadline = DispatchTime.now() + 2.0DispatchQueue.global().asyncAfter(deadline: deadline) &#123;&#125;let timer = DispatchSource.makeTimerSource()timer.setEventHandler &#123;&#125;timer.setCancelHandler &#123;&#125;// 1秒后执行，然后10秒后自动取消，允许10毫秒的误差timer.schedule(deadline: .now(), repeating: 2, leeway: .microseconds(10))//timer.schedule(deadline: .now() + .seconds(1), interval: 2.0, leeway: .microseconds(10))timer.resume()DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 10) &#123; timer.cancel()&#125;// MARK: - DispatchGroupfunc test(id:Int,ok:@escaping ()-&gt;()) &#123; print(\"id\",id) ok()&#125;let group = DispatchGroup()group.enter()test(id: 0) &#123; group.leave()&#125;group.enter()test(id: 1) &#123; group.leave()&#125;group.wait(timeout:.now() + 3)item.notify(queue: queue) &#123; print(\"item end\")&#125;queue.async(group: group, execute: item)queue.async(group: group, execute: item2)group.notify(queue: DispatchQueue.main, work: DispatchWorkItem.init(block: &#123; print(\"All network is done\")&#125;))// MARK: - 信号量 Semaphorelet semaphore = DispatchSemaphore.init(value: 2)let queue3 = DispatchQueue.init(label: \"com.semaphore\", qos: .default, attributes: .concurrent, autoreleaseFrequency: .never, target: nil)queue3.async &#123; semaphore.wait() // doSomething test(id: 1, ok: &#123; semaphore.signal() &#125;)&#125;queue3.async &#123; semaphore.wait() // doSomething test(id: 2, ok: &#123; semaphore.signal() &#125;)&#125;queue3.async &#123; semaphore.wait() // doSomething test(id: 3, ok: &#123; semaphore.signal() &#125;)&#125;// Barrier 屏障 线程锁let concurrentQueueBarr = DispatchQueue.init(label: \"com.lab.barr\")concurrentQueueBarr.async &#123; // doSomething&#125;concurrentQueueBarr.async &#123; // doSomething&#125;concurrentQueueBarr.async(group: nil, qos: DispatchQoS.background, flags: .barrier) &#123;&#125;// Operationlet oquque = OperationQueue.init()let op1 = BlockOperation.init &#123; print(\"op1\")&#125;let op2 = BlockOperation.init &#123; print(\"op1\")&#125;op2.addDependency(op1)oquque.addOperation(op1)oquque.addOperation(op2)","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"yogakit iOS","slug":"iOS/yogakit iOS","date":"2018-07-18T09:57:26.473Z","updated":"2018-07-18T09:57:26.473Z","comments":true,"path":"2018/07/18/iOS/yogakit iOS/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/yogakit iOS/","excerpt":"","text":"`swift func flexBox() { let contentV = UIView() contentV.backgroundColor = .lightGray view.addSubview(contentV) let child1 = UIView() child1.backgroundColor = UIColor.red child1.configureLayout { (layout) in layout.isEnabled = true layout.width = 80 layout.height = 80 layout.margin = 20 } let child2 = UIScrollView() child2.backgroundColor = UIColor.blue child2.configureLayout { (layout) in layout.isEnabled = true layout.width = 280 layout.height = 100 layout.margin = 20 layout.flexDirection = .row layout.alignItems = .center let v1 = UIView.init(color: UIColor.black) let v2 = UIView.init(color: UIColor.green) let v3 = UIView.init(color: UIColor.brown) v1.configureLayout(block: { (y1) in y1.isEnabled = true y1.width = 100 y1.height = 40 }) v2.configureLayout(block: { (y2) in y2.isEnabled = true y2.width = 100 y2.height = 40 }) v3.configureLayout(block: { (y3) in y3.isEnabled = true y3.width = 100 y3.height = 40 }) child2.addSubview(v1) child2.addSubview(v2) child2.addSubview(v3) child2.yoga.applyLayout(preservingOrigin: true) child2.contentSize.width = 300 } let child3 = UIView() child3.backgroundColor = UIColor.yellow child3.configureLayout { (layout) in layout.isEnabled = true layout.width = 180 layout.height = 180 layout.margin = 20 } let child4 = UIView() child4.backgroundColor = UIColor.cyan child4.configureLayout { (layout) in layout.isEnabled = true layout.width = 100 layout.height = 100 layout.margin = 20 } contentV.addSubview(child1) contentV.addSubview(child2) contentV.addSubview(child3) contentV.addSubview(child4) contentV.configureLayout { (make) in make.isEnabled = true make.flexDirection = .row make.alignItems = .center make.padding = 20 make.flexWrap = .wrap make.width = YGValue(self.view.bounds.size.width) } view.configureLayout { (make) in make.isEnabled = true make.alignItems = .spaceBetween make.width = YGValue(self.view.bounds.size.width) make.height = YGValue(self.view.bounds.size.height) let scroller = UIScrollView() scroller.backgroundColor = UIColor.groupTableViewBackground scroller.configureLayout(block: { (y) in y.height = 400 y.isEnabled = true y.flexDirection = .column }) self.view.addSubview(scroller) scroller.addSubview(contentV) scroller.yoga.applyLayout(preservingOrigin: true) scroller.contentSize = contentV.bounds.size } view.yoga.applyLayout(preservingOrigin: true) }","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"node","slug":"iOS/node","date":"2018-07-18T09:57:26.471Z","updated":"2018-07-18T10:10:20.348Z","comments":true,"path":"2018/07/18/iOS/node/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/node/","excerpt":"","text":"`c #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; typedef struct node { int data; struct node *pNext; }Node; Node *head = NULL; void createNodeList() { head = (Node*) malloc(sizeof(Node)); if (NULL == head) { return; } else { head-&gt;data = 0; head-&gt;pNext = NULL; return; } } void addNode(Node* node) { if (head == NULL) { return; } Node* p = head-&gt;pNext; Node* q = head; while (p != NULL) { q = p; p = p-&gt;pNext; } q-&gt;pNext = node; node-&gt;pNext = NULL; // return true;} void deleteNode(int index) { if (head == NULL) { return; } Node* p = head-&gt;pNext; int length = 0; while (NULL != p) { length ++; p = p-&gt;pNext; } if (length &lt; index) { return; } else { Node* q = head; p = head; for (int i = 0; i &lt;index ; i++) { q = p; p = p-&gt;pNext; } Node* t = p-&gt;pNext; q-&gt;pNext = t; free(p); return; } } void printNode() { Node* pHead = head; if(head == NULL) { return; } if(pHead-&gt;pNext == NULL) { return; } Node* pi = pHead-&gt;pNext; // Node* pj = pi-&gt;pNext; for (;pi != NULL;pi = pi-&gt;pNext) { printf(&quot;node:%d\\n&quot;,pi-&gt;data); } } int main(int argc, const char * argv[]) { // insert code here… createNodeList(); Node* node1 = (Node*)malloc(sizeof(Node)); node1-&gt;data = 1; node1-&gt;pNext = NULL; Node* node2 = (Node*)malloc(sizeof(Node)); node2-&gt;data = 2; node2-&gt;pNext = NULL; Node* node = (Node*)malloc(sizeof(Node)); node-&gt;data = 3; node-&gt;pNext = NULL; Node* node4 = (Node*)malloc(sizeof(Node)); node4-&gt;data = 6; node4-&gt;pNext = NULL; addNode(node); addNode(node1); addNode(node2); addNode(node4); printNode(); return 0; }","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"git常用命令","slug":"iOS/git常用命令","date":"2018-07-18T09:57:26.470Z","updated":"2018-07-18T10:10:20.347Z","comments":true,"path":"2018/07/18/iOS/git常用命令/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/git常用命令/","excerpt":"","text":"1，本地跟踪远程分支git branch –set-upstream origin/newbranch 2, 查看远程分支 git branch -a 3, 查看本地分支 git branch 4, 切换本地分支 git checkout test 5, 查看远程分支 git branch -a 6, 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改 git reset –hard git log –stat #查看提交统计信息 git log git log 查看该文件每次提交记录 Git远程仓库管理 1234567891011121314git remote -v # 查看远程服务器地址和仓库名称git remote show origin # 查看远程服务器仓库状态git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)git remote rm &lt;repository&gt; # 删除远程仓库 git clone --mirror git@101.37.163.179:iOS/FlowerGold.gitgit remote set-url --push origin https://git.oschina.net/izhongnan/huajinbao.gitgit push --mirror 创建远程仓库1234567891011121314151617git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址git push -u origin master # 客户端首次提交git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且trackgit remote set-head origin master # 设置远程仓库的HEAD指向master分支也可以命令设置跟踪远程库和本地库git branch --set-upstream master origin/mastergit branch --set-upstream develop origin/develop svn 过滤 123456*.o,*.lo,*.la,*.al,.libs,*.so,*.so.[0-9]*,*.a,*.pyc,*.pyo,*.rej,*~,#*#,.#*,.*.swp,.DS_Store,.git,.gitignore,Pods,Podfile.lock,GFQM.xcworkspace/xcuserdata/,GFQM.xcodeproj/xcuserdata/,build","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"swift3_generics","slug":"iOS/swift3_generics","date":"2018-07-18T09:57:26.469Z","updated":"2018-07-18T10:10:20.346Z","comments":true,"path":"2018/07/18/iOS/swift3_generics/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/swift3_generics/","excerpt":"","text":"swift312345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970 import Cocoa//Tfunc swapTwoInts&lt;T&gt;(_ a: inout T, _ b: inout T) &#123; let tempA = a a = b b = tempA &#125;var a = 10, b = 20swapTwoInts(&amp;a, &amp;b)print(a,b)//structstruct Stack&lt;Element&gt; &#123; var items = [Element]() mutating func push(_ item:Element) &#123; items.append(item) &#125; mutating func pop() -&gt; Element &#123; return items.removeLast() &#125; func desprint() &#123; print(items) &#125;&#125;var stack = Stack&lt;Int&gt;()stack.push(a)stack.push(a)stack.desprint()//constraints in actionfunc findIndex&lt;T:Equatable&gt;(_ valueToFind:T,_ array:[T]) -&gt; (Int?)&#123; var esacpIndex:Int = 0; var esacpValue:T? for (index,value) in array.enumerated() &#123; if valueToFind == value &#123; esacpIndex = index esacpValue = value &#125; else &#123; esacpIndex = -1 &#125; &#125; guard (esacpValue != nil) else &#123; print(\"索引:\",esacpIndex,\"值:\",esacpValue!) return (esacpIndex) &#125; print(\"没有找到索引\") return (esacpIndex) &#125;let arr = [5,6,7]let tulps = findIndex(6, arr)","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"oc动态方法绑定","slug":"iOS/oc动态方法绑定","date":"2018-07-18T09:57:26.468Z","updated":"2018-07-18T10:10:19.315Z","comments":true,"path":"2018/07/18/iOS/oc动态方法绑定/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/oc动态方法绑定/","excerpt":"","text":"绑定多个参数1234567891011121314151617181920212223242526272829303132333435 //传递三个及以上的参数- (id)performSelector:(SEL)selector withObjects:(NSArray *)objects &#123; // 方法签名(方法的描述) NSMethodSignature *signature = [[self class] instanceMethodSignatureForSelector:selector]; if (signature == nil) &#123; //可以抛出异常也可以不操作。 &#125; // NSInvocation : 利用一个NSInvocation对象包装一次方法调用（方法调用者、方法名、方法参数、方法返回值） NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature]; invocation.target = self; invocation.selector = selector; // 设置参数 NSInteger paramsCount = signature.numberOfArguments - 2; // 除self、_cmd以外的参数个数 paramsCount = MIN(paramsCount, objects.count); for (NSInteger i = 0; i &lt; paramsCount; i++) &#123; id object = objects[i]; if ([object isKindOfClass:[NSNull class]]) continue; [invocation setArgument:&amp;object atIndex:i + 2]; &#125; // 调用方法 [invocation invoke]; // 获取返回值 id returnValue = nil; if (signature.methodReturnLength) &#123; // 有返回值类型，才去获得返回值 [invocation getReturnValue:&amp;returnValue]; &#125; return returnValue; &#125; 执行objc_msgsend12345678910111213- (void)ObjcMsgSend &#123; NSString *str = @&quot;字符串&quot;; NSNumber *num = @20; NSArray *arr = @[@&quot;v1&quot;, @&quot;v2&quot;]; SEL sel = NSSelectorFromString(@&quot;ObjcMsgSendWithString:withNum:withArray:&quot;); ((void (*) (id, SEL, NSString *, NSNumber *, NSArray *)) objc_msgSend) (self, sel, str, num, arr);&#125;// 执行方法- (void)ObjcMsgSendWithString:(NSString *)string withNum:(NSNumber *)number withArray:(NSArray *)array &#123; NSLog(@&quot;%@, %@, %@&quot;, string, number, array[0]);&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"Promise-iOS","slug":"iOS/Promise-iOS","date":"2018-07-18T09:57:26.468Z","updated":"2018-07-18T10:10:19.314Z","comments":true,"path":"2018/07/18/iOS/Promise-iOS/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/Promise-iOS/","excerpt":"","text":"`swift//// MyPromise.swift// WeexApp//// Created by zzn on 2017/4/28.// Copyright © 2017年 zzn. All rights reserved.// import UIKitimport PromiseKit class MyPromise { init() { setup() } func setup() { login(userName: &quot;lishi&quot;, pwd: &quot;1234&quot;).then{self.getFriend(id: $0.id)}.then{ (list) -&gt; Void in print(list.enumerated()) }.catch { (err) in print(err) } } //模拟登陆 func login(userName:String,pwd:String) -&gt; Promise&lt;Person&gt; { //requestNet let isAcc = true let person = Person() return Promise{ fulfile,reject in if isAcc { person.name = userName person.pwd = pwd fulfile(person) } else { reject(MyError.init(info: &quot;HAHA&quot;)) } } } //模拟获取好友列表 func getFriend(id:String?) -&gt; Promise&lt;[Person]&gt; { //requestNet let perList = [Person(),Person()] return Promise{ fulfile,reject in if id?.isEmpty == true { reject(MyError.init(info: &quot;HAHA&quot;)) } fulfile(perList) } } } class Person { var name:String? var pwd:String? var id = &quot;2332&quot; init() { name = &quot;zhanshan&quot; pwd = &quot;11&quot; } } struct MyError:Error { var info:String }","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"GCD 重点","slug":"iOS/GCD 重点","date":"2018-07-18T09:57:26.467Z","updated":"2018-07-18T09:57:26.467Z","comments":true,"path":"2018/07/18/iOS/GCD 重点/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/GCD 重点/","excerpt":"","text":"DCD`c++ #pragma 信号量 dispatch_semaphore_t semaphore = dispatch_semaphore_create(1); dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); dispatch_async(queue, ^{ // 相当于加锁 dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER); NSLog(@&quot;执行任务1&quot;); // 相当于解锁 dispatch_semaphore_signal(semaphore); }); dispatch_async(queue, ^{ dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER); NSLog(@&quot;执行任务2&quot;); dispatch_semaphore_signal(semaphore); }); dispatch_async(queue, ^{ dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER); NSLog(@&quot;执行任务3&quot;); dispatch_async(dispatch_get_global_queue(0, 0), ^{ [NSThread sleepForTimeInterval:3]; NSLog(@&quot;异步执行任务3&quot;); dispatch_semaphore_signal(semaphore); }); }); dispatch_async(queue, ^{ dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER); NSLog(@&quot;执行任务4&quot;); dispatch_semaphore_signal(semaphore); }); #pragma barrier dispatch_queue_t queue2 = dispatch_queue_create(&quot;zzn.com.01&quot;, DISPATCH_QUEUE_CONCURRENT); dispatch_async(queue2, ^{ // doSomething() [NSThread sleepForTimeInterval:2]; NSLog(@&quot;barrier:执行任务1&quot;); }); dispatch_barrier_async(queue2, ^{ NSLog(@&quot;barrier:执行任务2&quot;); }); #pragma group dispatch_group_t group = dispatch_group_create(); dispatch_queue_t queue3 = dispatch_queue_create(&quot;zzn.com.03&quot;, DISPATCH_QUEUE_CONCURRENT); // dispatch_group_async(group, queue3, ^{ [NSThread sleepForTimeInterval:2]; NSLog(@&quot;group:执行任务1&quot;); }); // 等同 dispatch_group_async dispatch_async(queue3, ^{ dispatch_group_enter(group); [NSThread sleepForTimeInterval:2]; dispatch_group_leave(group); NSLog(@&quot;group:执行任务2&quot;); }); dispatch_group_notify(group, queue3, ^{ NSLog(@&quot;group:执行任务3&quot;); }); dispatch_group_wait(group, DISPATCH_TIME_FOREVER);","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"Facebook，Twitter分享整理","slug":"iOS/Facebook，Twitter分享整理","date":"2018-07-18T09:57:26.466Z","updated":"2018-07-18T09:57:26.466Z","comments":true,"path":"2018/07/18/iOS/Facebook，Twitter分享整理/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/Facebook，Twitter分享整理/","excerpt":"","text":"facebook 分享 分享类型要确定，如果是FBSDKShareLinkContent（链接），要确定好link的地址正确，否则无法弹出分享框，很难排查，Twitter也类似。","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"swift4","slug":"iOS/swift4.1更新","date":"2018-07-18T09:57:26.465Z","updated":"2018-07-18T10:10:19.312Z","comments":true,"path":"2018/07/18/iOS/swift4.1更新/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/swift4.1更新/","excerpt":"","text":"条件一致性如果数组、字典或者可选类型的元素类型遵循Equatable,这可以做相同的操作 合并Equatable和Hashable协议的一致性1234567891011// swift4struct Person: Equatable &#123; static func == (lhs: Person, rhs: Person) -&gt; Bool &#123; return lhs.firstName == rhs.firstName &amp;&amp; lhs.lastName == rhs.lastName &amp;&amp; lhs.birthDate == rhs.birthDate &amp;&amp; ... &#125;&#125;// swift4.1如果 firstName等属性全部遵循了Equatable和Hashable，这可以不用实现 == 运算符 在JSON编码 在Swift 4.1中，苹果给JSONDecoder引入了一个属性keyDecodingStrategy；对应的JSONEncoder引入了一个属性keyEncodingStrategy。这样我们就不需要设置定义CodingKeys了。只需要在decoding的时候把keyDecodingStrategy设置为.convertFromSnakeCase；在encoding的时候把keyEncodingStrategy设置为.convertToSnakeCase。所以上面的代码我们可以改为： 哈希化索引类型 (Index Types Hashable)123let number = [10,20,30,40]let f1 = \\[int].[0]number[keyPath:f1] 支持关联类型的递归约束1234567891011//swift4protocol Foo &#123; associatedtype SomeType: Bar&#125;//swift4.1protocol Sequence &#123; associatedtype SubSequence: Sequence where Iterator.Element == SubSequence.Iterator.Element, SubSequence.SubSequence == SubSequence func dropFirst(_ n: Int) -&gt; Self.SubSequence&#125; 平台有关1234567891011121314151617#if os(iOS) || os(tvOS) import UIKit#endif#if canImport(UIKit) import UIKit#endif#if (arch(i386) || arch(x86_64)) &amp;&amp; (!os(macOS)) print(&quot;Simulator&quot;)#else print(&quot;Device&quot;)#endif#if targetEnvironment(simulator) print(&quot;Simulator&quot;)#endif","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"闭包小结","slug":"iOS/闭包小结","date":"2018-07-18T09:57:26.463Z","updated":"2018-07-18T09:57:26.464Z","comments":true,"path":"2018/07/18/iOS/闭包小结/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/闭包小结/","excerpt":"","text":"12345678910111213void(^closure1)();void(^closure2)();__weak __typeof (self)weakSelf = self;closure1 = ^() &#123; __strong __typeof(weakSelf)strongSelf = weakSelf; [strongSelf doSomething()]; &#125;;closure(); 地址","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"FMDB_OC","slug":"iOS/FMDB_OC","date":"2018-07-18T09:57:26.462Z","updated":"2018-07-18T09:57:26.463Z","comments":true,"path":"2018/07/18/iOS/FMDB_OC/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/FMDB_OC/","excerpt":"","text":"fmdb 的使用:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#获取path:NSArray *dbpath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) FristObject] stringByAppendingPathComponent: @\"mydatabase.db\"];//creat dbFMDataBase *db = [FMDatabase databaseWithPath:dbPath] ;//creat table[db executeUpdate:@\"CREATE TABLE PersonList if no exists(Name text, Age integer, Sex integer, Phone text, Address text, Photo blob)\"];// creat into[db executeUpdate:@\"INSERT INTO PersonList (Name, Age, Sex, Phone, Address, Photo) VALUES (?,?,?,?,?,?)\",@\"Jone\", [NSNumber numberWithInt:20], [NSNumber numberWithInt:0], @“091234567”, @“Taiwan”, [NSData dataWithContentsOfFile: filepath]];//update[db executeUpdate:@\"UPDATE PersonList SET Age = ? WHERE Name = ?\",[NSNumber numberWithInt:30],@“John”];//searchFMResultSet *rs = [db executeQuery:@\"SELECT Name, Age, FROM PersonList\"];while([rs next]) &#123;NSString *name = [rs stringForColumn:@\"Name\"];&#125; [db executeUpdate:@\"DROP TABLE IF EXISTS PersonList;\"];[db executeUpdateWithForamt:@\"insert into table(name,age) values(%@,%d);\"_name,_age]//多线程NSString *path=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0];path=[path stringByAppendingPathComponent:@\"test.sqlite\"];FMDatabaseQueue * queue=[FMDatabaseQueue databaseQueueWithPath:path];[queue inDatabase:^(FMDatabase *db) &#123;NSString *str = @\"create table if not exists t_book(id integer,name varchar)\";BOOL c1= [db executeUpdate:create];&#125;] [queue inDatabase:^(FMDatabase *db) &#123; NSString * insertSql=@\"insert into t_book(id,name) values(?,?)\"; //插入语句1 bool inflag=[db executeUpdate:insertSql,@(2),@\"admin\"]; if(inflag)&#123; NSLog(@\"插入成功\"); &#125; &#125;]; [queue inDatabase:^(FMDatabase *db) &#123; FMResultSet * data=[db executeQuery:@\" select * from t_book \"]; while (data.next) &#123; int ids=[data intForColumn:@\"id\"]; NSString *name=[data stringForColumn:@\"name\"]; &#125; &#125;];","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"webview 注入图片点击js","slug":"iOS/webview 注入图片点击js","date":"2018-07-18T09:57:26.461Z","updated":"2018-07-18T10:10:17.523Z","comments":true,"path":"2018/07/18/iOS/webview 注入图片点击js/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/webview 注入图片点击js/","excerpt":"","text":"在网页加载完成时，通过js获取图片和添加点击的识别方式`swift (void)webViewDidFinishLoad:(UIWebView *)webView { [IDProgressHUD IDPlaceViewHideDirect:self.view]; //这里是js，主要目的实现对url的获取 static NSString * const jsGetImages = @&quot;function getImages(){\\ var objs = document.getElementsByTagName(\\&quot;img\\&quot;);\\ var imgScr = &apos;&apos;;\\ for(var i=0;i&lt;objs.length;i++){\\ imgScr = imgScr + objs[i].src + &apos;+&apos;;\\ };\\ return imgScr;\\ };&quot;; [webView stringByEvaluatingJavaScriptFromString:jsGetImages];//注入js方法 NSString *urlResurlt = [webView stringByEvaluatingJavaScriptFromString:@&quot;getImages()&quot;]; mUrlArray = [NSMutableArray arrayWithArray:[urlResurlt componentsSeparatedByString:@&quot;+&quot;]]; if (mUrlArray.count &gt;= 2) { [mUrlArray removeLastObject]; } //urlResurlt 就是获取到得所有图片的url的拼接；mUrlArray就是所有Url的数组 //添加图片可点击js [mWebView stringByEvaluatingJavaScriptFromString:@&quot;function registerImageClickAction(){\\ var imgs=document.getElementsByTagName(&apos;img&apos;);\\ var length=imgs.length;\\ for(var i=0;i&lt;length;i++){\\ img=imgs[i];\\ img.onclick=function(){\\ window.location.href=&apos;image-preview:&apos;+this.src}\\ }\\ }&quot;]; [mWebView stringByEvaluatingJavaScriptFromString:@&quot;registerImageClickAction();&quot;]; } //在这个方法中捕获到图片的点击事件和被点击图片的url (BOOL)webView:(UIWebView )webView shouldStartLoadWithRequest:(NSURLRequest )request navigationType:(UIWebViewNavigationType)navigationType { //预览图片 if ([request.URL.scheme isEqualToString:@”image-preview”]) { NSString* path = [request.URL.absoluteString substringFromIndex:[@&quot;image-preview:&quot; length]]; path = [path stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]; //path 就是被点击图片的url return NO; } return YES;}","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"Runtime_OC","slug":"iOS/Runtime_OC","date":"2018-07-18T09:57:26.461Z","updated":"2018-07-18T10:10:17.524Z","comments":true,"path":"2018/07/18/iOS/Runtime_OC/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/Runtime_OC/","excerpt":"","text":"runtime oc 参考地址：http://www.jianshu.com/p/f900de4a1495 对象instance –&gt; 类class –&gt; 方法 –&gt; method(-&gt;sel -&gt; imp) –&gt;实现函数 运行时机制最关键核心是objc_msgSend函数，通过给target（类）发送selecter（SEL）来传递消息，通过imp 指针找到method入口,找到匹配的IMP，指向实现的C函数。 运行时可以通过C操作函数，动态地创建修改类信息，动态绑定方法和重写实现，灵活地实现一些自定义功能 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647- 类相关： + 数据类型：class，object； - isa 元类 - superClass 根类 + 操作函数: - class_： + get: 类名，父类; 实例变量，成员变量；属性；实例方法，类方法，方法实现； + copy: 成员变量列表；属性列表；方法列表；协议列表； + add: 成员变量；属性；方法；协议； + replace：属性；方法； + respond:响应方法判断（内省） + isMetaclass:元类判断（内省） + conform:遵循协议判断（内省） - objc_： + get: 实例变量；成员变量；类名；类；元类；关联对象； + copy: 对象；类；类列表；协议列表； + set: 实例变量；成员变量；类；类列表；协议；关联对象； + dispose: 对象； - 动态创建/销毁类、对象 - 成员变量、属性相关： + 数据类型：Ivar；objc_property_t；objc_property_attribute_t； + 操作函数： - ivar_： - property_： - 方法消息相关： + 数据类型：SEL；IMP; Method；方法缓存 + 操作函数: - method_： + invoke: 方法实现的返回值； + get: 方法名；方法实现；参数与返回值相关； + set：方法实现； + exchange：交换方法实现 + 方法调用：msgSend函数（找到方法实现） + 消息转发： - Method Resolution - Fast Forwarding - Normal Forwarding - 协议相关： + 数据类型：Protocol； + 操作函数： - protocol_： + get: 协议；属性； + copy：协议列表；属性列表； + add：属性；方法；协议； + isEqual：判断两协议等同； + comform：判断是否遵循协议； - 其他：类名；版本号；类信息； Method Swizzling;ISA Swizzling； 运行时Runtime的一切都围绕这两个中心：类的动态配置 和 消息传递。通过操作函数来配置类信息，通过msgSend函数传递消息。 1234567891011121314151617181920 struct objc_class &#123; Class isa OBJC_ISA_AVAILABILITY;#if !__OBJC2__ Class super_class OBJC2_UNAVAILABLE; // 父类 const char *name OBJC2_UNAVAILABLE; // 类名 long version OBJC2_UNAVAILABLE; // 类的版本信息，默认为0 long info OBJC2_UNAVAILABLE; // 类信息，供运行期使用的一些位标识 long instance_size OBJC2_UNAVAILABLE; // 类的实例变量大小 struct objc_ivar_list *ivars OBJC2_UNAVAILABLE; // 类的成员变量链表 struct objc_method_list **methodLists OBJC2_UNAVAILABLE; // 方法定义的链表 struct objc_cache *cache OBJC2_UNAVAILABLE; // 方法缓存 struct objc_protocol_list *protocols OBJC2_UNAVAILABLE; // 协议链表#endif&#125; OBJC2_UNAVAILABLE; 数据类型：isa和super_class ：不同的类中可以有相同的方法（同一个类的方法不能同名，哪怕参数类型不同，后面解释…），所以要先确定是那个类。isa和super_class是找到实现函数的关键映射，决定找到存放在哪个类的方法实现。（isa用于自省确定所属类，super_class确定继承关系）。 实例对象的isa指针指向类，类的isa指针指向其元类（metaClass）。对象就是一个含isa指针的结构体。类存储实例对象的方法列表，元类存储类的方法列表，元类也是类对象 文／楚天舒（简书作者）原文链接：http://www.jianshu.com/p/f900de4a1495著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。12345 struct objc_object &#123; Class isa OBJC_ISA_AVAILABILITY;&#125;;typedef struct objc_object *id; 向一个Objective-C对象发送消息时，运行时库会根据实例对象的isa指针找到这个实例对象所属的类。Runtime库会在类的方法列表由super_class指针找到父类的方法列表直至根类NSObject中去寻找与消息对应的selector指向的方法。找到后即运行这个方法。 文／楚天舒（简书作者）原文链接：http://www.jianshu.com/p/f900de4a1495著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。 class_：get: 类名，父类，元类；实例变量，成员变量；属性；实例方法，类方法，方法实现；1234567891011121314151617181920212223// 获取类的类名const char * class_getName ( Class cls );// 获取类的父类Class class_getSuperclass ( Class cls );// 获取实例大小size_t class_getInstanceSize ( Class cls );// 获取类中指定名称实例成员变量的信息Ivar class_getInstanceVariable ( Class cls, const char *name );// 获取类成员变量的信息Ivar class_getClassVariable ( Class cls, const char *name );// 获取指定的属性objc_property_t class_getProperty ( Class cls, const char *name );// 获取实例方法Method class_getInstanceMethod ( Class cls, SEL name );// 获取类方法Method class_getClassMethod ( Class cls, SEL name );// 获取方法的具体实现IMP class_getMethodImplementation ( Class cls, SEL name );IMP class_getMethodImplementation_stret ( Class cls, SEL name );&gt; copy: 成员变量列表；属性列表；方法列表；协议列表； 12345678// 获取整个成员变量列表Ivar * class_copyIvarList ( Class cls, unsigned int *outCount );// 获取属性列表objc_property_t * class_copyPropertyList ( Class cls, unsigned int *outCount );// 获取所有方法的列表Method * class_copyMethodList ( Class cls, unsigned int *outCount );// 获取类实现的协议列表Protocol * class_copyProtocolList ( Class cls, unsigned int *outCount ); b、 操作函数: method_：invoke: 方法实现的返回值；// 调用指定方法的实现id method_invoke ( id receiver, Method m, … ); // 调用返回一个数据结构的方法的实现void method_invoke_stret ( id receiver, Method m, … );get: 方法名；方法实现；参数与返回值相关； // 获取方法名SEL method_getName ( Method m ); // 返回方法的实现IMP method_getImplementation ( Method m );// 获取描述方法参数和返回值类型的字符串const char method_getTypeEncoding ( Method m );// 返回方法的参数的个数unsigned int method_getNumberOfArguments ( Method m );// 通过引用返回方法指定位置参数的类型字符串void method_getArgumentType ( Method m, unsigned int index, char dst, size_t dst_len );copy: 返回值类型，参数类型 // 获取方法的返回值类型的字符串char * method_copyReturnType ( Method m ); // 获取方法的指定位置参数的类型字符串char * method_copyArgumentType ( Method m, unsigned int index ); // 通过引用返回方法的返回值类型字符串void method_getReturnType ( Method m, char *dst, size_t dst_len );set：方法实现； // 设置方法的实现IMP method_setImplementation ( Method m, IMP imp );exchange：交换方法实现 // 交换两个方法的实现void method_exchangeImplementations ( Method m1, Method m2 );description : 方法描述 // 返回指定方法的方法描述结构体struct objc_method_description method_getDescription ( Method m );sel_// 返回给定选择器指定的方法的名称const char sel_getName ( SEL sel ); // 在Objective-C Runtime系统中注册一个方法，将方法名映射到一个选择器，并返回这个选择器SEL sel_registerName ( const char *str ); // 在Objective-C Runtime系统中注册一个方法SEL sel_getUid ( const char *str ); // 比较两个选择器BOOL sel_isEqual ( SEL lhs, SEL rhs );c、方法调用流程：向对象发送消息，实际上是调用objc_msgSend函数，obj_msgSend的实际动作就是：找到这个函数指针，然后调用它。 id objc_msgSend(receiver self, selector _cmd, arg1, arg2, …)self和_cmd是隐藏参数，在编译期被插入实现代码。self：指向消息的接受者target的对象类型，作为一个占位参数，消息传递成功后self将指向消息的receiver。_cmd: 指向方法实现的SEL类型。 当向一般对象发送消息时，调用objc_msgSend；当向super发送消息时，调用的是objc_msgSendSuper； 如果返回值是一个结构体，则会调用objc_msgSend_stret或objc_msgSendSuper_stret。 0.1-检查target是否为nil。如果为nil，直接cleanup，然后return。(这就是我们可以向nil发送消息的原因。)如果方法返回值是一个对象，那么发送给nil的消息将返回nil；如果方法返回值为指针类型，其指针大小为小于或者等于sizeof(void)，float，double，long double 或者long long的整型标量，发送给nil的消息将返回0；如果方法返回值为结构体,发送给nil的消息将返回0。结构体中各个字段的值将都是0；如果方法的返回值不是上述提到的几种情况，那么发送给nil的消息的返回值将是未定义的。0.2-如果target非nil，在target的Class中根据Selector去找IMP。（因为同一个方法可能在不同的类中有不同的实现，所以我们需要依赖于接收者的类来找到的确切的实现）。1-首先它找到selector对应的方法实现: 1.1-在target类的方法缓存列表里检查有没有对应的方法实现，有的话，直接调用。1.2-比较请求的selector和类方法列表中的selector，对应的话，直接调用。 1.3-比较请求的selector和父类方法列表，父类的父类，直至根类，如果有对应，则直接调用。（方法重写拦截父类方法的原理）2-调用方法实现，并将接收者对象及方法的所有参数传给它。3-最后，将实现函数的返回值作为自己的返回值。 d、动态方法解析与消息转发：如果以上的类中没有找到对应的selector（一般保险起见先用respondsToSelector:内省判断）：，还可以利用消息转发机制依次执行以下流程： Method Resolution（动态方法解析）：用所属类的类方法+（BOOL）resolveInstanceMethod:(实例方法)或者+（BOOL）resolveClassMethod:(类方法),在此方法里添加class_addMethod函数。一般用于@dynamic动态属性。（当一个属性声明为@dynamic，就是向编译器保证编译时不用管/get实现，一定会在运行时实现）。Fast Forwarding （快速消息转发）：如果上一步无法响应消息，调用- (id)forwardingTargetForSelector:(SEL)aSelector方法，将消息接受者转发到另一个对象target（不能为self，否则死循环）。 Normal Forwarding（普通消息转发）：如果上一步无法响应消息：调用方法签名- (NSMethodSignature )methodSignatureForSelector:(SEL)aSelector，方法签名目的将函数的参数类型和返回值封装；如果返回非nil，则创建一个NSInvocation对象利用方法签名和selector封装未被处理的消息，作为参数传递给- (void)forwardInvocation:(NSInvocation )anInvocation。这一步比较耗时。 如果以上步骤（消息传递和消息转发）还是不能响应消息，则调动doesNotRecognizeSelector：方法，抛出异常。 unrecognized selector sent to instance(消息转发可以利用转移消息接受对象，实现伪多重继承的效果。) 4、 协议相关：@protocol声明了可以被其他任何类实现的方法，协议仅仅是定义一个接口，而由其他的类去负责实现。数据类型：Protocol； typedef struct objc_object Protocol;protocol是一个对象结构体。 操作函数： objc_:// 返回指定的协议Protocol objc_getProtocol ( const char name ); // 获取运行时所知道的所有协议的数组Protocol * objc_copyProtocolList ( unsigned int outCount ); // 创建新的协议实例Protocol objc_allocateProtocol ( const char name ); // 在运行时中注册新创建的协议void objc_registerProtocol ( Protocol proto );protocol_：get: 协议；属性；// 返回协议名const char protocol_getName ( Protocol p );// 获取协议的指定属性objc_property_t protocol_getProperty ( Protocol proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty );copy：协议列表；属性列表； // 获取协议中的属性列表objc_property_t protocol_copyPropertyList ( Protocol proto, unsigned int outCount );// 获取协议采用的协议Protocol ** protocol_copyProtocolList ( Protocol proto, unsigned int *outCount );add：属性；方法；协议； // 为协议添加方法void protocol_addMethodDescription ( Protocol proto, SEL name, const char types, BOOL isRequiredMethod, BOOL isInstanceMethod ); // 添加一个已注册的协议到协议中void protocol_addProtocol ( Protocol proto, Protocol addition ); // 为协议添加属性void protocol_addProperty ( Protocol proto, const char name, const objc_property_attribute_t *attributes, unsigned int attributeCount, BOOL isRequiredProperty, BOOL isInstanceProperty );isEqual：判断两协议等同； // 测试两个协议是否相等BOOL protocol_isEqual ( Protocol proto, Protocol other );comform：判断是否遵循协议； // 查看协议是否采用了另一个协议BOOL protocol_conformsToProtocol ( Protocol proto, Protocol other );5、 其他：类名；版本号；类信息；（忽略）三、 动态实现： Method Swizzling;Method Swizzling可以在运行时通过修改类的方法列表中selector对应的函数或者设置交换方法实现，来动态修改方法。可以重写某个方法而不用继承，同时还可以调用原先的实现。通常应用于在category中添加一个方法。为保证改变方法引起冲突，确保方法混用只能一次性：比如，在+load方法或者dispatch_once中执行。ISA Swizzling；ISA Swizzling可以动态修改对象的isa指针，改变对象的类，类似于创建子类实现相同的功能。KVO即是同过ISA Swizzling实现的。四、 其他概念：category；super；category:typedef struct objc_category *Category; struct objc_category { char category_name OBJC2_UNAVAILABLE; // 分类名 char class_name OBJC2_UNAVAILABLE; // 分类所属的类名 struct objc_method_list instance_methods OBJC2_UNAVAILABLE; // 实例方法列表 struct objc_method_list class_methods OBJC2_UNAVAILABLE; // 类方法列表 struct objc_protocol_list *protocols OBJC2_UNAVAILABLE; // 分类所实现的协议列表} // objc-runtime-new.h中定义：struct category_t { const char name; // name 是指 class_name 而不是 category_name classref_t cls; // cls是要扩展的类对象，编译期间是不会定义的，而是在Runtime阶段通过name对应到对应的类对象 struct method_list_t instanceMethods; struct method_list_t classMethods; struct protocol_list_t protocols; struct property_list_t *instanceProperties; // instanceProperties表示Category里所有的properties，(这就是我们可以通过objc_setAssociatedObject和objc_getAssociatedObject增加实例变量的原因，)不过这个和一般的实例变量是不一样的 };category就是定义方法的结构体，instance_methods列表是objc_class中方法列表的一个子集，class_methods列表是元类方法列表的一个子集。由其结构成员可知，category为什么不能添加成员变量（可添加属性，只有set/get方法）。 给category添加方法后，category_list会生成method list。这个方法列表是倒序添加的，也就是说，新生成的category的方法会先于旧的category的方法插入。（category的方法会优先于类方法执行）。 super：super并不是隐藏参数，它实际上只是一个”编译器标示符”，它负责告诉编译器，当调用方法时，跳过当前类去调用父类的方法，而不是本类中的方法。self是类的一个隐藏参数，每个方法的实现的第一个参数即为self。实际上给super发消息时，super还是与self指向的是相同的消息接收者。 struct objc_super { unsafe_unretained id receiver; unsafe_unretained Class super_class;};原理：使用super来接收消息时，编译器会生成一个objc_super结构体。发送消息时，不是调用objc_msgSend函数，而是调用objc_msgSendSuper函数: id objc_msgSendSuper ( struct objc_super *super, SEL op, … );该函数实际的操作是：从objc_super结构体指向的superClass的方法列表开始查找selector，找到后以objc-&gt;receiver去调用这个selector。 Runtime开源源码对一些方法的实现： (Class)class ; (Class)class { return object_getClass(self);} (Class)class; (Class)class { return self;} (BOOL)isKindOf:aClass;// (for循环遍历父类，每次判断返回的结果可能不同) (BOOL)isKindOf:aClass{ Class cls; for (cls = isa; cls; cls = cls-&gt;superclass) if (cls == (Class)aClass) return YES; return NO;} (BOOL)isMemberOf:aClass; (BOOL)isMemberOf:aClass{ return isa == (Class)aClass;} 文／楚天舒（简书作者）原文链接：http://www.jianshu.com/p/f900de4a1495著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"iOS开发笔记","slug":"iOS/iOS开发笔记","date":"2018-07-18T09:57:26.460Z","updated":"2018-07-18T10:10:17.522Z","comments":true,"path":"2018/07/18/iOS/iOS开发笔记/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/iOS开发笔记/","excerpt":"","text":"1，pod安装更改源 cocoapods卸载与安装的各种坑http://www.cnblogs.com/hankkk/p/5703050.html 1，pod 安装源过慢1234pod repo remove masterpod repo add master https://git.coding.net/CocoaPods/Specs.gitgit clone https://git.coding.net/CocoaPods/Specs.git ~/.cocoapods/repos/masterpod repo update iOS开发－关闭/收起键盘方法总结前言：作为IOS开发人员，需要经常和表单打交道。因此我对收起键盘的方法作了下总结，IOS收起键盘有三种方法（如果有其它收起键盘的方法请在留言区指错）。 收起键盘的方法：12345678910111213141516171819202122231、点击Return按扭时收起键盘- (BOOL)textFieldShouldReturn: (UITextField *)textField&#123; return [textField resignFirstResponder];&#125; 2、点击背景View收起键盘（你的View必须是继承于UIControl）[self.view endEditing:YES]; 3、你可以在任何地方加上这句话，可以用来统一收起键盘[[[UIApplication sharedApplication] keyWindow] endEditing:YES];这个方法是我不久前碰到的，觉得有用，就记下来了。 4. 还有一个方法是直接发送 resignFirstResponder 消息：[[UIApplication sharedApplication] sendAction: @selector(resignFirstResponder) to:nil from:nil forEvent:nil]; 3.Swift 中的指针使用https://onevcat.com/2015/01/swift-pointer/ Apple 期望在 Swift 中指针能够尽量减少登场几率，因此在 Swift 中指针被映射为了一个泛型类型，并且还比较抽象。这在一定程度上造成了在 Swift 中指针使用的困难，特别是对那些并不熟悉指针，也没有多少指针操作经验的开发者 (包括我自己也是) 来说，在 Swift 中使用指针确实是一个挑战。在这篇文章里，我希望能从最基本的使用开始，总结一下在 Swift 中使用指针的一些常见方式和场景。这篇文章假定你至少知道指针是什么，如果对指针本身的概念不太清楚的话，可以先看看这篇五分钟 C 指针教程 (或者它的中文版本)，应该会很有帮助。 初步 在 Swift 中，指针都使用一个特殊的类型来表示，那就是 UnsafePointer。遵循了 Cocoa 的一贯不可变原则，UnsafePointer 也是不可变的。当然对应地，它还有一个可变变体，UnsafeMutablePointer。绝大部分时间里，C 中的指针都会被以这两种类型引入到 Swift 中：C 中 const 修饰的指针对应 UnsafePointer (最常见的应该就是 C 字符串的 const char * 了)，而其他可变的指针则对应 UnsafeMutablePointer。除此之外，Swift 中存在表示一组连续数据指针的 UnsafeBufferPointer，表示非完整结构的不透明指针 COpaquePointer 等等。另外你可能已经注意到了，能够确定指向内容的指针类型都是泛型的 struct，我们可以通过这个泛型来对指针指向的类型进行约束以提供一定安全性。 对于一个 UnsafePointer 类型，我们可以通过 memory 属性对其进行取值，如果这个指针是可变的 UnsafeMutablePointer 类型，我们还可以通过 memory 对它进行赋值。比如我们想要写一个利用指针直接操作内存的计数器的话，可以这么做：12345678func incrementor(ptr: UnsafeMutablePointer&lt;Int&gt;) &#123; ptr.memory += 1&#125;var a = 10incrementor(&amp;a)a // 11 这里和 C 的指针使用类似，我们通过在变量名前面加上 &amp; 符号就可以将指向这个变量的指针传递到接受指针作为参数的方法中去。在上面的 incrementor 中我们通过直接操作 memory 属性改变了指针指向的内容。 与这种做法类似的是使用 Swift 的 inout 关键字。我们在将变量传入 inout 参数的函数时，同样也使用 &amp; 符号表示地址。不过区别是在函数体内部我们不需要处理指针类型，而是可以对参数直接进行操作。12345678func incrementor1(inout num: Int) &#123; num += 1&#125;var b = 10incrementor1(&amp;b)b // 11 虽然 &amp; 在参数传递时表示的意义和 C 中一样，是某个“变量的地址”，但是在 Swift 中我们没有办法直接通过这个符号获取一个 UnsafePointer 的实例。需要注意这一点和 C 有所不同：1234// 无法编译let a = 100let b = &amp;a指针初始化和内存管理 在 Swift 中不能直接取到现有对象的地址，我们还是可以创建新的 UnsafeMutablePointer 对象。与 Swift 中其他对象的自动内存管理不同，对于指针的管理，是需要我们手动进行内存的申请和释放的。一个 UnsafeMutablePointer 的内存有三种可能状态： 内存没有被分配，这意味着这是一个 null 指针，或者是之前已经释放过内存进行了分配，但是值还没有被初始化内存进行了分配，并且值已经被初始化其中只有第三种状态下的指针是可以保证正常使用的。UnsafeMutablePointer 的初始化方法 (init) 完成的都是从其他类型转换到 UnsafeMutablePointer 的工作。我们如果想要新建一个指针，需要做的是使用 alloc: 这个类方法。该方法接受一个 num: Int 作为参数，将向系统申请 num 个数的对应泛型类型的内存。下面的代码申请了一个 Int 大小的内存，并返回指向这块内存的指针：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455var intPtr = UnsafeMutablePointer&lt;Int&gt;.alloc(1)// &quot;UnsafeMutablePointer(0x7FD3A8E00060)&quot;接下来应该做的是对这个指针的内容进行初始化，我们可以使用 initialize: 方法来完成初始化：intPtr.initialize(10)// intPtr.memory 为 10在完成初始化后，我们就可以通过 memory 来操作指针指向的内存值了。在使用之后，我们最好尽快释放指针指向的内容和指针本身。与 initialize: 配对使用的 destroy 用来销毁指针指向的对象，而与 alloc: 对应的 dealloc: 用来释放之前申请的内存。它们都应该被配对使用：intPtr.destroy()intPtr.dealloc(1)intPtr = nil注意其实在这里对于 Int 这样的在 C 中映射为 int 的 “平凡值” 来说，destroy 并不是必要的，因为这些值被分配在常量段上。但是对于像类的对象或者结构体实例来说，如果不保证初始化和摧毁配对的话，是会出现内存泄露的。所以没有特殊考虑的话，不论内存中到底是什么，保证 initialize: 和 destroy 配对会是一个好习惯。指向数组的指针在 Swift 中将一个数组作为参数传递到 C API 时，Swift 已经帮助我们完成了转换，这在 Apple 的官方博客中有个很好的例子：import Acceleratelet a: [Float] = [1, 2, 3, 4]let b: [Float] = [0.5, 0.25, 0.125, 0.0625]var result: [Float] = [0, 0, 0, 0]vDSP_vadd(a, 1, b, 1, &amp;result, 1, 4)// result now contains [1.5, 2.25, 3.125, 4.0625]对于一般的接受 const 数组的 C API，其要求的类型为 UnsafePointer，而非 const 的数组则对应 UnsafeMutablePointer。使用时，对于 const 的参数，我们直接将 Swift 数组传入 (上例中的 a 和 b)；而对于可变的数组，在前面加上 &amp; 后传入即可 (上例中的 result)。对于传参，Swift 进行了简化，使用起来非常方便。但是如果我们想要使用指针来像之前用 memory 的方式直接操作数组的话，就需要借助一个特殊的类型：UnsafeMutableBufferPointer。Buffer Pointer 是一段连续的内存的指针，通常用来表达像是数组或者字典这样的集合类型。var array = [1, 2, 3, 4, 5]var arrayPtr = UnsafeMutableBufferPointer&lt;Int&gt;(start: &amp;array, count: array.count)// baseAddress 是第一个元素的指针var basePtr = arrayPtr.baseAddress as UnsafeMutablePointer&lt;Int&gt;basePtr.memory // 1basePtr.memory = 10basePtr.memory // 10//下一个元素var nextPtr = basePtr.successor()nextPtr.memory // 2指针操作和转换withUnsafePointer上面我们说过，在 Swift 中不能像 C 里那样使用 &amp; 符号直接获取地址来进行操作。如果我们想对某个变量进行指针操作，我们可以借助 withUnsafePointer 这个辅助方法。这个方法接受两个参数，第一个是 inout 的任意类型，第二个是一个闭包。Swift 会将第一个输入转换为指针，然后将这个转换后的 Unsafe 的指针作为参数，去调用闭包。使用起来大概是这个样子：var test = 10test = withUnsafeMutablePointer(&amp;test, &#123; (ptr: UnsafeMutablePointer&lt;Int&gt;) -&gt; Int in ptr.memory += 1 return ptr.memory&#125;)test // 11 这里其实我们做了和文章一开始的 incrementor 相同的事情，区别在于不需要通过方法的调用来将值转换为指针。这么做的好处对于那些只会执行一次的指针操作来说是显而易见的，可以将“我们就是想对这个指针做点事儿”这个意图表达得更加清晰明确。 unsafeBitCastunsafeBitCast 是非常危险的操作，它会将一个指针指向的内存强制按位转换为目标的类型。因为这种转换是在 Swift 的类型管理之外进行的，因此编译器无法确保得到的类型是否确实正确，你必须明确地知道你在做什么。比如：123let arr = NSArray(object: &quot;meow&quot;)let str = unsafeBitCast(CFArrayGetValueAtIndex(arr, 0), CFString.self)str // “meow” 因为 NSArray 是可以存放任意 NSObject 对象的，当我们在使用 CFArrayGetValueAtIndex 从中取值的时候，得到的结果将是一个 UnsafePointer。由于我们很明白其中存放的是 String 对象，因此可以直接将其强制转换为 CFString。 关于 unsafeBitCast 一种更常见的使用场景是不同类型的指针之间进行转换。因为指针本身所占用的的大小是一定的，所以指针的类型进行转换是不会出什么致命问题的。这在与一些 C API 协作时会很常见。比如有很多 C API 要求的输入是 void *，对应到 Swift 中为 UnsafePointer。我们可以通过下面这样的方式将任意指针转换为 UnsafePointer。123456789var count = 100var voidPtr = withUnsafePointer(&amp;count, &#123; (a: UnsafePointer&lt;Int&gt;) -&gt; UnsafePointer&lt;Void&gt; in return unsafeBitCast(a, UnsafePointer&lt;Void&gt;.self)&#125;)// voidPtr 是 UnsafePointer&lt;Void&gt;。相当于 C 中的 void *// 转换回 UnsafePointer&lt;Int&gt;var intPtr = unsafeBitCast(voidPtr, UnsafePointer&lt;Int&gt;.self)intPtr.memory //100 http://www.cocoachina.com/bbs/read.php?tid=30764112345//swfit oc 宏定义兼容写法extern NSString * const kPOPLayerBackgroundColor;extern NSString * const kPOPLayerBounds;extern NSString * const kPOPLayerCornerRadius;` nav`关于nav过渡的解决方案：RTRootNavigationController，细节原理可参考 JTNavigationController https://github.com/rickytan/RTRootNavigationControllerhttps://github.com/roodkcab/HHNavigationControllerhttps://github.com/DanisFabric","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"WKWebView_OC","slug":"iOS/WKWebView_OC","date":"2018-07-18T09:57:26.459Z","updated":"2018-07-18T10:10:17.522Z","comments":true,"path":"2018/07/18/iOS/WKWebView_OC/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/WKWebView_OC/","excerpt":"","text":"WebKit 设置 WKWebViewConfiguration 配置WKWebView的属性。 self.webView = [[WKWebView alloc] initWithFrame: self.view.bounds configuration:config]; // 通过JS与webview内容交互 // 通过JS与webview内容交互123456config.userContentController = [[WKUserContentController alloc] init]; // 注入JS对象名称AppModel，当JS通过AppModel来调用时， // 我们可以在WKScriptMessageHandler代理中接收到 [config.userContentController addScriptMessageHandler: self name: @\"AppModel\"]; 123456789101112131415161718// 导航代理self.webView.navigationDelegate = self;// 与webview UI交互代理self.webView.UIDelegate = self;// 添加KVO监听[self.webView addObserver:self forKeyPath:@\"loading\" options:NSKeyValueObservingOptionNew context:nil];[self.webView addObserver:self forKeyPath:@\"title\" options:NSKeyValueObservingOptionNew context:nil];[self.webView addObserver:self forKeyPath:@\"estimatedProgress\" options:NSKeyValueObservingOptionNew context:nil]; #pragma mark - WKScriptMessageHandler12345678- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message &#123; if ([message.name isEqualToString:@\"AppModel\"]) &#123; // 打印所传过来的参数，只支持NSNumber, NSString, NSDate, NSArray, // NSDictionary, and NSNull类型 NSLog(@\"%@\", message.body); &#125;&#125; #pragma mark - KVO12345678910111213141516171819202122232425262728- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context &#123; if ([keyPath isEqualToString:@\"loading\"]) &#123; NSLog(@\"loading\"); &#125; else if ([keyPath isEqualToString:@\"title\"]) &#123; self.title = self.webView.title; &#125; else if ([keyPath isEqualToString:@\"estimatedProgress\"]) &#123; NSLog(@\"progress: %f\", self.webView.estimatedProgress); self.progressView.progress = self.webView.estimatedProgress; &#125; // 加载完成 if (!self.webView.loading) &#123; // 手动调用JS代码 // 每次页面完成都弹出来，大家可以在测试时再打开 NSString *js = @\"callJsAlert()\"; [self.webView evaluateJavaScript:js completionHandler:^(id _Nullable response, NSError * _Nullable error) &#123; NSLog(@\"response: %@ error: %@\", response, error); NSLog(@\"call js alert by native\"); &#125;]; [UIView animateWithDuration:0.5 animations:^&#123; self.progressView.alpha = 0; &#125;]; &#125;&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"swift4 包管理","slug":"iOS/swift4 包管理","date":"2018-07-18T09:57:26.458Z","updated":"2018-07-18T10:10:17.521Z","comments":true,"path":"2018/07/18/iOS/swift4 包管理/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/swift4 包管理/","excerpt":"","text":"Swift Package ManagerLinux swift 安装1234// 1， 安装clang编译器sudo apt-get install clang// 2， 直接指定目录export PATH=/path/to/Swift/usr/bin:&quot;$&#123;PATH&#125;&quot; 创建包命令12345678910111213141516171819202122// 创建目录名mkdir MyApp// 创建包swift package init// ├── Package.swift├── README.md├── Sources│ └── MyApp│ └── MyApp.swift└── Tests ├── LinuxMain.swift └── MyAppTests └── MyAppTests.swift// 编译包swift build// 实时编译(main)运行swift package init --type executable// 运行swift run MyApp// 导出xcode工程swift package generate-xcodeproj","categories":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}],"tags":[],"keywords":[{"name":"iOS","slug":"iOS","permalink":"https://Alexzzn.github.io/categories/iOS/"}]},{"title":"django基础","slug":"Server/django基础","date":"2018-07-18T09:57:16.435Z","updated":"2018-07-18T09:57:16.435Z","comments":true,"path":"2018/07/18/Server/django基础/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Server/django基础/","excerpt":"","text":"","categories":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}],"tags":[],"keywords":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}]},{"title":"Python_2","slug":"Server/Python_2","date":"2018-07-18T09:57:16.434Z","updated":"2018-07-18T09:57:16.435Z","comments":true,"path":"2018/07/18/Server/Python_2/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Server/Python_2/","excerpt":"","text":"`python class Person(): sex = ‘male’ name = ‘lishi’ def __init__(self,name,age,weight): self.name = name self._age = age self.__weight = weight #类方法 @classmethod def get_name(cls): return cls.name #成员变量 @property def get_weight(self): return self.__weight #魔术方法 if name == ‘main‘: person1 = Person(‘Zhanshan’,18,60) print(dir(person1)) print(person1.dict) print(person1.get_weight) print(person1._Person__weight) print(Person.get_name()) class ChinaPerson(Person): #替换构造方法 def __init__(self,name,age,language): self.name = name; self.age = age; self.laguage = language pass #创建方法 def __new__(cls, *args, **kwargs): print(&apos;Create new Class&apos;) print(args) return super(ChinaPerson,cls) #.__new__(cls,*args,**kwargs) person2 = ChinaPerson(‘Zhanshan’,18,60,’china’)","categories":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}],"tags":[],"keywords":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}]},{"title":"ruby 升级","slug":"Server/ruby 升级","date":"2018-07-18T09:57:16.432Z","updated":"2018-07-18T10:10:35.450Z","comments":true,"path":"2018/07/18/Server/ruby 升级/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Server/ruby 升级/","excerpt":"","text":"#1、 RVM安装 $ curl -L get.rvm.io | bash -s stable 2、 之后就是等待一段时间之后，就可以安装成功了，使用以下命令来验证$ source ~/.bashrc $ source ~/.bash_profile 3、 测试是否安装正常$ rvm -v 如果出现rvm（版本号）……..&#x77;&#97;&#121;&#110;&#x65;&#115;&#x73;&#101;&#x67;&#x75;&#105;&#110;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;……基本就算是安装RVM成功了。 二、使用RVM升级Ruby 1、查看当前ruby版本1$ ruby -v 这一步会显示出来当前ruby的版本 2、列出已知ruby的版本1$ rvm list known 稍等一下，会出现很多平台不同的ruby的版本，我因为是需要2.2.2以上的版本，所以直接安装2.2.4版本 3、安装ruby 2.2.4`$ rvm install 2.2.4","categories":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}],"tags":[],"keywords":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}]},{"title":"python基本(字符串，函数，单例，属性)用法","slug":"Server/python基本(字符串，函数，单例，属性)用法","date":"2018-07-18T09:57:16.430Z","updated":"2018-07-18T10:10:35.448Z","comments":true,"path":"2018/07/18/Server/python基本(字符串，函数，单例，属性)用法/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Server/python基本(字符串，函数，单例，属性)用法/","excerpt":"","text":"`pythonimport os 终端录入i = input(“ 请输入数字：”)inputNum = int(i) while inputNum &gt; 0: inputNum -= 1 print(inputNum) # print(&quot;输出的数字是%d&quot;,inputNum) #@params retrun string #函数使用 接收多余参数def testNum(a,b,*args,**kwargs): print(a+b) print(args[0]) print(kwargs) return “”testNum(1,2,33,46,name=3)tupleS = (“hh”,) print(id(tuple)) #匿名函数arr = [ {“name”:”zhanshan”,”age”:”19”}, {“name”:”xiaoming”,”age”:”11”}, {“name”:”alex”,”age”:”44”} ] lambdaFunc = lambda x:x[“name”] arr.sort(key = lambdaFunc)print(arr) #声明匿名函数def test(a,b,func): res = func(a,b) print(res) return res lambdaTest = lambda x,y : x + ytest(1,2,lambdaTest) #文件读写操作f1 = open(“test.txt”,”r”,encoding=”utf-8”) f1.write(“文本文件\\n”)f1.write(“hello\\n”)#文件定位f1.seek(2,0) aa = f1.read()print(aa)f1.close() #文件读写old_file = open(“1.pk1”,”rb+”)new_file = open(“2.pk1”,”ab+”)while True: content = old_file.read(1) new_file.write(content) if len(content) == 0: break #文件目录替换path = “/Users/zzn/Desktop/tests”os.makedirs(path,mode=777,exist_ok=True)for num in range(1,5): # print(num) fileP = path + &quot;/hello-&quot; + &quot;%d&quot;%(num) + &quot;.avi&quot; # print(fileP) f = open(fileP,&quot;wb+&quot;) f.close() #修改文件名fileStrList = os.listdir(path)for name in fileStrList: print(name) nameRange = name.find(&quot;-&quot;) if nameRange != 0 : os.chdir(path) os.rename(name,”十里桃花%s”%(name[nameRange:]))#类声明 类方法 类属性 私有属性class Game: num = 0 @classmethod def add(cls): Game.num = 100 def set_name(self): self.name = 12 def get_name(self): self.set_name() return self.name @staticmethod def remove(): pass Game.add()print(Game.num)print(Game().get_name()) #单例模式class Sigleton: __share = None def __new__(cls, *args, **kwargs): if cls.__share == None : cls.__share = object.__new__(cls=cls) else: return cls.__share #异常捕获try: open(“xxx.txt”) except (IOError,NameError):# a = “122”print(“Error”)except Exception as result: print(result) passfinally: pass #自定义 异常class ShortException(Exception): def with_traceback(self, tb) -&gt; BaseException: return super().with_traceback(tb) def __init__(self, *args) -&gt; None: super().__init__(*args) def __str__(self): return &quot;自定义异常&quot; s = 1try: if s == 1: raise ShortException()except ShortException as result: print(result) main函数 ，代码执行入口import syssys.path.append(“/home”)print(name)print(sys.path) import impimp.reload()#循环导入（主模块） #判断相等a = [1,2,3]b = [1,2,3]a == b #Truea is b #False #127以内的数字缓存a = 10b = 10a is bTruea == bTrueimport copy #深拷贝 浅拷贝a = [“haha”,”haha”]b = a #浅拷贝c = copy.deepcopy(a)print(id(a),id(c))d = (a,b)e = copy.copy(d) # d = e 浅拷贝 拷贝不可变类型时 内存指针不变 #正数 原码 = 反码 = 补码 #负数 反码 = 符号位不变 其他位取反 #补码 = 反码+1 对象 属性 声明class Values: def __init__(self): self.__name = &quot;xx&quot; #用法-1 def setName(self,newVaule): self.__name = newVaule def getName(self): return self.__name #用法-2 @property def money(self): return self.__money @money.setter def money(self,newValue): self.__money = newValue pass name = property(getName,setName) v = Values()v.name = “zhanshan” #property 用法1 组织自定义 set，get方法v.money = “100” #声明 get set 方法print(v.name,v.money)","categories":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}],"tags":[],"keywords":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}]},{"title":"ssh相关知识","slug":"Server/ssh相关知识","date":"2018-07-18T09:57:16.430Z","updated":"2018-07-18T10:10:35.449Z","comments":true,"path":"2018/07/18/Server/ssh相关知识/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Server/ssh相关知识/","excerpt":"","text":"基本用法 ssh user@host ssh -p 2222 user@host 指定端口 主要原理:（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。 远程登录 ssh-gen 生成公私钥 -t rsa -m email@qq.com ```12&gt; &gt; copy公钥到host ```ssh-copy-id user@host``` 对应目录```/etc/ssh/sshd_config 如何修改失败，可修改.ssh/authorized_keys文件收到添加 详细介绍","categories":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}],"tags":[],"keywords":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}]},{"title":"linux命令要点","slug":"Server/linux命令要点","date":"2018-07-18T09:57:16.429Z","updated":"2018-07-18T10:10:35.447Z","comments":true,"path":"2018/07/18/Server/linux命令要点/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Server/linux命令要点/","excerpt":"","text":"`管道：ls -al | more查找：grep -n “hello” hello.txt软链接：ln name name2硬链接：ln -s name name2查找： find /User/zzn -name “file“ find /User/zzn -size +100M find /User/zzn -size +100M -size +1G归档管理: //.tar tar -cvf test.tar .py -C /User/zzn tar -xvf test.tar //.tar.gz tar -zcvf test.tar.gz .py tar -zxvf test.tar //.tar.bz2 tar -jcvf test.tar.gz .py tar -jxvf test.tar //zip zip test.zip .py unzip test.zip -d /User/zzn进程信息: ps -aux //运行的程序 kill -9 pid top htop系统相关: shutdown -h 20:20 reboot df -h //磁盘查询 du -h //当前目录占用查询用户相关: sudo useradd -m name1 //创建家目录 su - name1 //切换家目录 sudo passwd name1 userdel -r name sudo -s //切换到root用户 groupadd groupdel //默认账户添加系统组(ubuntu) sudo usermod -a -G sudo name1 sudo useradd -a -g adm name1 //修改文件的所有者 chown name1 chgrp group1 //文件权限 -rwx rwx r-x 文件拥有者权限 文件组权限 访客权限 x-&gt;对于目录可进入 对于文件为可执行（.shell） //改变文件权限 chmod u=rw,g=r,o=r file.txt chmod 641 file.txt vim编辑器: O行首插入 o行末插入 i光标前插入 I行首插入 a光标末插入 A行末插入 yy:复制 光标所在的这一行 4+yy复制4行 p：粘贴 dd：删除 hjkl 控制光标移动 u：撤销 ctrl + r 反撤销 G：回到代码的最后一行 gg：回到代码的第一行 R：替换光标后面的字符","categories":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}],"tags":[],"keywords":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}]},{"title":"Python_1","slug":"Server/Python_1","date":"2018-07-18T09:57:16.429Z","updated":"2018-07-18T10:10:35.448Z","comments":true,"path":"2018/07/18/Server/Python_1/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Server/Python_1/","excerpt":"","text":"`python #!/usr/bin/python3import _threadimport time class Person: name = ‘Haha’ print(“Hello,Python!”) counter = 100miles = 100.00name = “Python” print(counter,miles,name) #多个变量制定a,b,c = 1,2.0,”3”print(type(a),type(b),type(c)) #字符串截取str = “Test_Python”print(str[0:-1])print(str[2:4]) #列表list = [‘abc’,788,’swift’]print(list) #元组a = (“Tuple”,’Array’)print(a[0]) #setstudent = {‘Tom’, ‘Jim’, ‘Mary’, ‘Tom’, ‘Jack’, ‘Rose’} if (‘Rose’ in student) : print(‘Rose 在集合中’)else: print(“Rose 不在集合中”) if (‘b’ not in student) : print(“Not in”) #dictd = {“key1”:”value1”,”key2”:”value2”} del d[‘key1’]print(d.keys())#num = 100counter = 1while counter &lt; num : counter += counter #函数def setName(): name = ‘zhanshan’ print(name)def setAge(): age = 11 print(age)setName()setAge() #壁报sum = lambda arg1,arg2:arg1 + arg2sum(10,20) #文件x = Person() class Thread: # 为线程定义一个函数 def print_time(threadName, delay): count = 0 while count &lt; 5: time.sleep(delay) count += 1 print(&quot;%s: %s&quot; % (threadName, time.ctime(time.time()))) try: _thread.start_new_thread(print_time,(&quot;线程1&quot;,2)) _thread.start_new_thread(print_time, (&quot;线程2&quot;, 4)) except: print(&quot;Error&quot;) while 1: pass t = Thread()","categories":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}],"tags":[],"keywords":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}]},{"title":"phpѧϰ2","slug":"Web/php学习2","date":"2018-07-18T09:53:42.904Z","updated":"2018-07-19T01:11:24.228Z","comments":true,"path":"2018/07/18/Web/php学习2/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/php学习2/","excerpt":"","text":"Day11 1,增删改123456789101112131,数据库设计规范： 1，原子xing性 2，唯一性 3，独立性2，数据库操作： insert into table_name ([a],[b]) values (a1,a2); replace into table_name ([a],[b]) values (a1,a2); insert into table_name set key1=value1，key2=value2； insert into table_name (key1,key2) select key_other1,key_otber2 from table_name23, 删除数据 delete from table_name where [condition] order by key1 desc limit start range;4, 修改数据 update table_name set key1=value1,key2=value2 where [condition] order by `id` desc; 2 ,连接表 1234561，基本形式 table_name1 [action] join table_name2 [on condition] table_name1 [action1] join table_name2 [confition] [action2] join table_name32, select id name from table_name where price &gt; (select 5000)3,select id from table_name where name like ‘%zhangshan%’;4,select *from table_name1 union select *from table_name2; 3,权限管理1234567授予权限： grant 权限列表 on 某库．某个对象 to ‘用户名’@’允许登录的位置’ 【identified by ‘密码’】； eg: grant select, insert, update, delete on testdb.* to common_user@&apos;%&apos;剥夺权限： revoke 权限列表 on 某库．某个对象 from ‘用户名’@’允许登录的位置’ 其含义，跟grant中完全一样； 4,事务：`• 原子性：一个事务中的所有语句，应该做到：要么全做，要么一个都不做；• 一致性：让数据保持逻辑上的“合理性”，比如：一个商品出库时，既要让商品库中的该商品数量减1，又要让对应用户的购物车中的该商品加1；• 隔离性：如果多个事务同时并发执行，但每个事务就像各自独立执行一样。• 持久性：一个事务执行成功，则对数据来说应该是一个明确的硬盘数据更改（而不仅仅是内存中的变化）。 1，开启一个事务： start transaction；​//也可以写成：begin；2，执行多条增删改语句；​//也就是相当于希望这多条语句要作为一个“不可分割”的整体去执行的任务3，判断这些语句执行的结果情况，并进行提交或回滚： if( 没有出错 ）{ commit；​//提交事务；此时就是一次性完成； } else{ rollback；​//回滚事务；此时就是全部撤销； }","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"ESLint配置","slug":"Web/ESLint配置","date":"2018-07-18T09:53:42.903Z","updated":"2018-07-18T09:53:42.903Z","comments":true,"path":"2018/07/18/Web/ESLint配置/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/ESLint配置/","excerpt":"","text":"ESLint的规则有三种级别: “off”或者0，不启用这个规则 “warn”或者1，出现问题会有警告 “error”或者2，出现问题会报错关闭规则1231. /* eslint-disable */ //关闭所有规则2. // eslint-disable-next-line 代码会关闭某一行的所有规则3. // eslint-disable-next-line no-closole 下面的代码在某一行关闭指定的规则 `javascript‘rules’: { “comma-dangle”: [“error”, “never”], //是否允许对象中出现结尾逗号 “no-cond-assign”: 2, //条件语句的条件中不允许出现赋值运算符 “no-console”: 2, //不允许出现console语句 “no-constant-condition”: 2, //条件语句的条件中不允许出现恒定不变的量 “no-control-regex”: 2, //正则表达式中不允许出现控制字符 “no-debugger”: 2, //不允许出现debugger语句 “no-dupe-args”: 2, //函数定义的时候不允许出现重复的参数 “no-dupe-keys”: 2, //对象中不允许出现重复的键 “no-duplicate-case”: 2, //switch语句中不允许出现重复的case标签 “no-empty”: 2, //不允许出现空的代码块 “no-empty-character-class”: 2, //正则表达式中不允许出现空的字符组 “no-ex-assign”: 2, //在try catch语句中不允许重新分配异常变量 “no-extra-boolean-cast”: 2, //不允许出现不必要的布尔值转换 “no-extra-parens”: 0, //不允许出现不必要的圆括号 “no-extra-semi”: 2, //不允许出现不必要的分号 “no-func-assign”: 2, //不允许重新分配函数声明 “no-inner-declarations”: [“error”, “functions”], //不允许在嵌套代码块里声明函数 “no-invalid-regexp”: 2, //不允许在RegExp构造函数里出现无效的正则表达式 “no-irregular-whitespace”: 2, //不允许出现不规则的空格 “no-negated-in-lhs”: 2, //不允许在in表达式语句中对最左边的运算数使用取反操作 “no-obj-calls”: 2, //不允许把全局对象属性当做函数来调用 “no-regex-spaces”: 2, //正则表达式中不允许出现多个连续空格 “quote-props”: 2, //对象中的属性名是否需要用引号引起来 “no-sparse-arrays”: 2, //数组中不允许出现空位置 “no-unreachable”: 2, //在return，throw，continue，break语句后不允许出现不可能到达的语句 “use-isnan”: 2, //要求检查NaN的时候使用isNaN() “valid-jsdoc”: [“error”, { “requireReturn”: false, “requireParamDescription”: false, “requireReturnDescription”: true }], //强制JSDoc注释 “valid-typeof”: [“error”, { “requireStringLiterals”: true }], //在使用typeof表达式比较的时候强制使用有效的字符串 “block-scoped-var”: 2, //将变量声明放在合适的代码块里 “complexity”: 0, //限制条件语句的复杂度 “consistent-return”: 2, //无论有没有返回值都强制要求return语句返回一个值 “curly”: [“error”, “all”], //强制使用花括号的风格 “default-case”: 0, //在switch语句中需要有default语句 “dot-notation”: [“error”, {“allowKeywords”: false, “allowPattern”: “”}], //获取对象属性的时候使用点号 “eqeqeq”: [“error”, “smart”], //比较的时候使用严格等于 “no-alert”: 1, //不允许使用alert，confirm，prompt语句 “no-caller”: 2, //不允许使用arguments.callee和arguments.caller属性 “guard-for-in”: 0, //监视for in循环，防止出现不可预料的情况 “no-div-regex”: 2, //不能使用看起来像除法的正则表达式 “no-else-return”: 0, //如果if语句有return，else里的return不用放在else里 “no-labels”: [“error”, { “allowLoop”: false, “allowSwitch”: false }], //不允许标签语句 “no-eq-null”: 2, //不允许对null用==或者!= “no-eval”: 2, //不允许使用eval() “no-extend-native”: 2, //不允许扩展原生对象 “no-extra-bind”: 2, //不允许不必要的函数绑定 “no-fallthrough”: 2, //不允许switch按顺序全部执行所有case “no-floating-decimal”: 2, //不允许浮点数缺失数字 “no-implied-eval”: 2, //不允许使用隐式eval() “no-iterator”: 2, //不允许使用iterator属性 “no-lone-blocks”: 2, //不允许不必要的嵌套代码块 “no-loop-func”: 2, //不允许在循环语句中进行函数声明 “no-multi-spaces”: 2, //不允许出现多余的空格 “no-multi-str”: 2, //不允许用\\来让字符串换行 “no-global-assign”: 2, //不允许重新分配原生对象 “no-new”: 2, //不允许new一个实例后不赋值或者不比较 “no-new-func”: 2, //不允许使用new Function “no-new-wrappers”: 2, //不允许使用new String，Number和Boolean对象 “no-octal”: 2, //不允许使用八进制字面值 “no-octal-escape”: 2, //不允许使用八进制转义序列 “no-param-reassign”: 0, //不允许重新分配函数参数”no-proto”: 2, //不允许使用proto属性 “no-redeclare”: 2, //不允许变量重复声明 “no-return-assign”: 2, //不允许在return语句中使用分配语句 “no-script-url”: 2, //不允许使用javascript:void(0) “no-self-compare”: 2, //不允许自己和自己比较 “no-sequences”: 2, //不允许使用逗号表达式 “no-throw-literal”: 2, //不允许抛出字面量错误 throw “error” “no-unused-expressions”: 2, //不允许无用的表达式 “no-void”: 2, //不允许void操作符 “no-warning-comments”: [1, {“terms”: [“todo”, “fixme”, “any other term”]}], //不允许警告备注 “no-with”: 2, //不允许使用with语句 “radix”: 1, //使用parseInt时强制使用基数来指定是十进制还是其他进制 “vars-on-top”: 0, //var必须放在作用域顶部 “wrap-iife”: [2, “any”], //立即执行表达式的括号风格 “yoda”: [2, “never”, {“exceptRange”: true}], //不允许在if条件中使用yoda条件 “strict”: [2, “function”], //使用严格模式 “no-catch-shadow”: 2, //不允许try catch语句接受的err变量与外部变量重名”no-delete-var”: 2, //不允许使用delete操作符 “no-label-var”: 2, //不允许标签和变量同名 “no-shadow”: 2, //外部作用域中的变量不能与它所包含的作用域中的变量或参数同名 “no-shadow-restricted-names”: 2, //js关键字和保留字不能作为函数名或者变量名 “no-undef”: 2, //不允许未声明的变量 “no-undef-init”: 2, //不允许初始化变量时给变量赋值undefined “no-undefined”: 2, //不允许把undefined当做标识符使用 “no-unused-vars”: [2, {“vars”: “all”, “args”: “after-used”}], //不允许有声明后未使用的变量或者参数 “no-use-before-define”: [2, “nofunc”], //不允许在未定义之前就使用变量”indent”: 2, //强制一致的缩进风格 “brace-style”: [2, “1tbs”, { “allowSingleLine”: false}], //大括号风格 “camelcase”: [2, {“properties”: “never”}], //强制驼峰命名规则 “comma-style”: [2, “last”], //逗号风格 “consistent-this”: [0, “self”], //当获取当前环境的this是用一样的风格 “eol-last”: 2, //文件以换行符结束 “func-names”: 0, //函数表达式必须有名字 “func-style”: 0, //函数风格，规定只能使用函数声明或者函数表达式 “key-spacing”: [2, {“beforeColon”: false, “afterColon”: true}], //对象字面量中冒号的前后空格 “max-nested-callbacks”: 0, //回调嵌套深度 “new-cap”: [2, {“newIsCap”: true, “capIsNew”: false}], //构造函数名字首字母要大写 “new-parens”: 2, //new时构造函数必须有小括号 “newline-after-var”: 0, //变量声明后必须空一行 “no-array-constructor”: 2, //不允许使用数组构造器 “no-inline-comments”: 0, //不允许行内注释 “no-lonely-if”: 0, //不允许else语句内只有if语句 “no-mixed-spaces-and-tabs”: [2, “smart-tabs”], //不允许混用tab和空格 “no-multiple-empty-lines”: [2, {“max”: 2}], //空行最多不能超过两行 “no-nested-ternary”: 2, //不允许使用嵌套的三目运算符 “no-new-object”: 2, //禁止使用new Object() “fun-call-spacing”: 2, //函数调用时，函数名与()之间不能有空格 “no-ternary”: 0, //不允许使用三目运算符 “no-trailing-spaces”: 2, //一行最后不允许有空格 “no-underscore-dangle”: 2, //不允许标识符以下划线开头 “no-extra-parens”: 0, //不允许出现多余的括号 “one-var”: 0, //强制变量声明放在一起 “operator-assignment”: 0, //赋值运算符的风格 “padded-blocks”: [2, “never”], //块内行首行尾是否空行 “quote-props”: 0, //对象字面量中属性名加引号 “quotes”: [1, “single”, “avoid-escape”], //引号风格 “semi”: [2, “always”], //强制语句分号结尾 “semi-spacing”: [2, {“before”: false, “after”: true}], //分后前后空格 “sort-vars”: 0, //变量声明时排序 “space-before-blocks”: [2, “always”], //块前的空格 “space-before-function-paren”: [2, {“anonymous”: “always”, “named”: “never”}], //函数定义时括号前的空格 “space-infix-ops”: [2, {“int32Hint”: true}], //操作符周围的空格 “keyword-spacing”: 2, //关键字前后的空格 “space-unary-ops”: [2, { “words”: true, “nonwords”: false}], //一元运算符前后不要加空格 “wrap-regex”: 2, //正则表达式字面量用括号括起来 “no-var”: 0, //使用let和const代替var “generator-star-spacing”: [2, “both”], //生成器函数前后空格 “max-depth”: 0, //嵌套块深度 “max-len”: 0, //一行最大长度，单位为字符 “max-params”: 0, //函数最多能有多少个参数 “max-statements”: 0, //函数内最多有几个声明 “no-bitwise”: 0, //不允许使用位运算符 “no-plusplus”: 0 //不允许使用++ –运算符 }","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"Mac工具","slug":"Web/Mac工具","date":"2018-07-18T09:53:42.903Z","updated":"2018-07-18T09:53:42.904Z","comments":true,"path":"2018/07/18/Web/Mac工具/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/Mac工具/","excerpt":"","text":"1.homebrew123451,一般安装目录在:/usr/local/Cellar/ 2,一般配置目录在:/usr/local/etc/php3,获取软件安装的路径:brew --prefix homebrew/php/php70 1.tar 使用1234567891011121314151617181920212223242526-c: 建立压缩档案-x：解压-t：查看内容-r：向压缩归档文件末尾追加文件-u：更新原压缩包中的文件这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。-z：有gzip属性的-j：有bz2属性的-Z：有compress属性的-v：显示所有过程-O：将文件解开到标准输出压缩tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpgtar –czf jpg.tar.gz *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一 个gzip压缩过的包，命名为jpg.tar.gztar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2tar –cZf jpg.tar.Z *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Zrar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linuxzip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux解压tar –xvf file.tar //解压 tar包tar -xzvf file.tar.gz //解压tar.gztar -xjvf file.tar.bz2 //解压 tar.bz2tar –xZvf file.tar.Z //解压tar.Zunrar e file.rar //解压rarunzip file.zip //解压zip 3,Mac环境变量123456789Mac配置环境变量的地方 1./etc/profile （建议不修改这个文件 ） 全局（公有）配置，不管是哪个用户，登录时都会读取该文件。 2./etc/bashrc （一般在这个文件中添加系统级环境变量） 全局（公有）配置，bash shell执行时，不管是何种方式，都会读取此文件。 3.~/.bash_profile （一般在这个文件中添加用户级环境变量） 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次! 4,PHP composer ` 1, 安装 curl -sS https://getcomposer.org/installer | php 执行： php composer.phar 2, 镜像用法 有两种方式启用本镜像服务： 系统全局配置： 即将配置信息添加到 Composer 的全局配置文件 config.json 中。见“方法一” 单个项目配置： 将配置信息添加到某个项目的 composer.json 文件中。见“方法二” 方法一： 修改 composer 的全局配置文件（推荐方式） 打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令： composer config -g repo.packagist composer https://packagist.phpcomposer.com 方法二： 修改当前项目的 composer.json 配置文件： 打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令： composer config repo.packagist composer https://packagist.phpcomposer.com 3,全局安装 全局安装是将 Composer 安装到系统环境变量 PATH 所包含的路径下面，然后就能够在命令行窗口中直接执行 composer 命令了。 Mac 或 Linux 系统： 打开命令行窗口并执行如下命令将前面下载的 composer.phar 文件移动到 /usr/local/bin/ 目录下面： sudo mv composer.phar /usr/local/bin/composer Windows 系统： 找到并进入 PHP 的安装目录（和你在命令行中执行的 php 指令应该是同一套 PHP）。 将 composer.phar 复制到 PHP 的安装目录下面，也就是和 php.exe 在同一级目录。 在 PHP 安装目录下新建一个 composer.bat 文件，并将下列代码保存到此文件中。 @php &quot;%~dp0composer.phar&quot; %* 最后重新打开一个命令行窗口试一试执行 composer --version 看看是否正确输出版本号。","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"Vue 模版指令","slug":"Web/Vue 模版指令","date":"2018-07-18T09:53:42.902Z","updated":"2018-07-18T09:53:42.902Z","comments":true,"path":"2018/07/18/Web/Vue 模版指令/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/Vue 模版指令/","excerpt":"","text":"模版指令v-text 渲染数据 -v-if 控制显示v-on 绑定事件v-for 循环渲染","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"gitlab相关","slug":"Web/gitlab相关","date":"2018-07-18T09:53:42.901Z","updated":"2018-07-18T09:53:42.902Z","comments":true,"path":"2018/07/18/Web/gitlab相关/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/gitlab相关/","excerpt":"","text":"`1.Gitlab创建备份1 #gitlab-rake gitlab:backup:create使用以上命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1393513186_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分, 其中开头的1393513186是备份创建的日期。2.Gitlab恢复 停止相关数据连接服务gitlab-ctl stop unicorngitlab-ctl stop sidekiq 从1393513186编号备份中恢复gitlab-rake gitlab:backup:restore BACKUP=1393513186 启动Gitlabsudo gitlab-ctl start3.Gitlab迁移迁移如同备份与恢复的步骤一样, 只需要将老服务器/var/opt/gitlab/backups目录下的备份文件拷贝到新服务器上的/var/opt/gitlab/backups即可(如果你没修改过默认备份目录的话)。但是需要注意的是新服务器上的Gitlab的版本必须与创建备份时的Gitlab版本号相同. 比如新服务器安装的是最新的8.5版本的Gitlab, 那么迁移之前, 最好将老服务器的Gitlab 升级为8.5再进行备份。4.自动备份通过crontab使用备份命令实现自动备份: sudo su -crontab -e例如加入以下, 实现每天凌晨2点进行一次自动备份:10 2 * /opt/gitlab/bin/gitlab-rake gitlab:backup:create4.注意事项①添加这项是因为添加自动备份后的几天时间里，Gitlab所在的KVM一直宕机。通过模拟cron计划任务，发现第一条gitlab创建备份的过程是先备份出许多(db、repo等文件），再通过这些文件合并成一个备份压缩包，最后删除文件，只剩一个备份压缩包。这就相当于先产生2倍备份压缩包，导致磁盘爆满。恢复也是同样的过程。②Unpacking backup … tar: 1479265387_gitlab_backup.tar: Cannot open: Permission deniedtar: Error is not recoverable: exiting nowunpacking backup failed迁移的备份文件权限不足，可以给足权限，然后再恢复。 ③恢复过程中遇到一个错误：Started GET “/EagleEye/BMH.EagleEye” for 127.0.0.1 at 2016-10-25 10:54:32 +0800Processing by ProjectsController#show as HTML Parameters: {“namespace_id”=&gt;”EagleEye”, “id”=&gt;”BMH.EagleEye”}Completed 500 Internal Server Error in 215ms (ActiveRecord: 19.5ms) OpenSSL::Cipher::CipherError (bad decrypt): app/models/project.rb:383:in import_url&#39; app/models/project.rb:413:inexternal_import?’ app/models/project.rb:405:in import?&#39; app/models/project.rb:421:inimport_in_progress?’ app/controllers/projects_controller.rb:93:in show&#39; lib/gitlab/middleware/go.rb:16:incall’系统是centos 6.2的 ,gitlab是8.8.5迁移到另外一台服务器上的，其它页面都可以正常显示，但是一点击项目就会显示500,。查看/var/log/gitlab/gitlab-rails/production.log日志，发现上述错误 。通过搜索知道，这是gitlab数据迁移时的一个缺陷。解决方法：1、覆盖原来gitlab的 db_key_base 到新的gitlab db_key_base 位置在 /etc/gitlab/gitlab-secrets.json 2、EE版本执行sudo gitlab-rails runner “Project.where(mirror: false).where.not(import_url: nil).each { |p| p.import_data.destroy if p.import_data }” CE版本执行sudo gitlab-rails runner “Project.where.not(import_url: nil).each { |p| p.import_data.destroy if p.import_data }” 重启gitlab，发现500错误不见，项目能访问到。","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"vueѧϰ","slug":"Web/vue基础","date":"2018-07-18T09:53:42.900Z","updated":"2018-07-19T01:11:35.363Z","comments":true,"path":"2018/07/18/Web/vue基础/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/vue基础/","excerpt":"","text":"`html&lt;!DOCTYPE html&gt; test .vTest { background: #444; color: #eee; } 修改背景 背景改变 // 文本类型 new Vue({ el: ‘#app’, data: { message: ‘Hello Vue!’ } }); // 输出html类型 new Vue({ el: ‘#htmlText’, data: { v: ‘html文本输出‘ } }); // 绑定 new Vue({ el: ‘#vTest’, data: { v:false } });","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"reactjs","slug":"Web/reactjs","date":"2018-07-18T09:53:42.900Z","updated":"2018-07-18T09:53:42.900Z","comments":true,"path":"2018/07/18/Web/reactjs/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/reactjs/","excerpt":"","text":"`html&lt;!doctype html&gt; 菜鸟教程 React 实例 #example { width: 200px; height: 200px;; font-size: 18px; background-color: aliceblue; } var LikeButton = React.createClass({ getInitialState: function() { return {liked: false}; }, handleClick: function(event) { this.setState({liked: !this.state.liked}); }, render: function() { var text = this.state.liked ? ‘喜欢’ : ‘不喜欢’; return ( 你{text}我。点我切换状态。 ); } }); function formatName(user) { return user.firstName + ‘-&gt;’ + user.lastName; }; const user = { firstName:’Harper’, lastName:’Perez’ }; const element = (hello,{formatName(user)}); React.render( element, document.getElementById(‘example’) ); React.render( , document.getElementById(‘example1’) );","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"css 定位","slug":"Web/css 定位","date":"2018-07-18T09:53:42.899Z","updated":"2018-07-18T09:53:42.899Z","comments":true,"path":"2018/07/18/Web/css 定位/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/css 定位/","excerpt":"","text":"css定位 标准流 浮动 定位 两大元素 块级元素&lt;div,table,h1~h6,ol,ui,li,p&gt; 内联元素&lt;a,span,img,input&gt; position absolute 相对定位 生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。 元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。 fixed 生成绝对定位的元素，相对于浏览器窗口进行定位。 元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。 relative 生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。 inherit 规定应该从父元素继承 position 属性的值。","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"ES6相关笔记","slug":"Web/ES6相关笔记","date":"2018-07-18T09:53:42.899Z","updated":"2018-07-18T09:53:42.900Z","comments":true,"path":"2018/07/18/Web/ES6相关笔记/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/ES6相关笔记/","excerpt":"","text":"ES6 声明属性 let(块内变量) var（全局变量） 123456// let 适合局部变量for (let i = 0; i &lt; 10; i++) &#123; let i = 5; // i 呈现不同的子作用域&#125; 变量作用域，和变量提升（var） 12345var i; console.log(i); // undefinedconsole.log(i); // 先声明i ReferenceErrorlet i = 2; 暂时性死区，重复声明 12345678910var i = 1;if (i) &#123; i = 2; let i; // 暂时性死区 ==const 对变量声明赋值失败&#125;funtion foo() &#123; let a = 1; let b = 2; // error ==const 重复声明error&#125; 块级作用域，const，顶层对象 123456// 览器环境指的是window对象，在 Node 指的是global对象var a = 1;this.a; // 1 Node 模块和 ES6 模块中this返回的是当前模块window.a; // 1global.a; // 1 变量解构 数组解构赋值 12let [a,b,c] = [1,2,3];console.log(a); // 1 对象的解构赋值 12let &#123;foo,bar&#125; = &#123;foo:&quot;foo1&quot;,bar:&quot;bar1&quot;&#125;console.log(foo); // foo1 字符串的解构赋值 12const [a, b, c, d, e] = &apos;hello&apos;;console.log(a); // h 数值和布尔值的解构赋值 12let &#123;toString: s&#125; = 123;s === Number.prototype.toString // true 函数参数的解构赋值 1234function add([x, y])&#123; return x + y;&#125;add([1, 2]); 函数 作用域 12345678910111213141516var x = 1;function f(x, y = x) &#123; console.log(y);&#125;f(2) // 2//var x = 1;function foo(x, y = function() &#123; x = 2; &#125;) &#123; var x = 3; y(); console.log(x);&#125;foo() // 3x // 1 rest 参数 1234567function add(...values) &#123; let sum = 0; for (var val of values) &#123; sum += val; &#125;&#125; 严格模式 123456789// 严格模式function doSomething(a, b) &#123; &apos;use strict&apos;;&#125;// 默认值、解构赋值、或者扩展运算符 不能使用// 报错function doSomething(a, b = a) &#123; &apos;use strict&apos;;&#125; 箭头函数 属性 12345678910var func1 = (num1,num2) =&gt; &#123;return num1 + num2&#125;// this 作用域function foo() &#123; setTimeout(() =&gt; &#123; console.log(&apos;id:&apos;, this.id); &#125;, 100);&#125;var id = 21;foo.call(&#123; id: 42 &#125;);","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"Flexbox 布局","slug":"Web/Flexbox 布局","date":"2018-07-18T09:53:42.898Z","updated":"2018-07-18T09:53:42.899Z","comments":true,"path":"2018/07/18/Web/Flexbox 布局/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/Flexbox 布局/","excerpt":"","text":"Flex 弹性布局 容器存在 两个轴水平(main axis)和垂直(cross axis)。 主轴左边开始 main start-&gt;main end,交叉轴上开始 cross start -》 cross end 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size 容器的属性 display 属性 flex 容器 inline-flex 行内元素容器 主轴（main axis）：伸缩容器的主轴，伸缩项目主要沿着这条轴进行排列布局。小心，它不一定是水平的；这主要取决于“justify-content”属性（详细见下文）。 主轴起点（main-start）和主轴终点（main-end）：伸缩项目放置在伸缩容器内从主轴起点（main-start）向主轴终点（main-start）方向。 主轴尺寸（main size）：伸缩项目在主轴方向的宽度或高度就是主轴的尺寸。伸缩项目主要的大小属性要么是宽度，要么是高度属性，由哪一个对着主轴方向决定。 侧轴（cross axis）：垂直于主轴称为侧轴。它的方向主要取决于主轴方向。 侧轴起点（cross-start）和侧轴终点（cross-end）：伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。 侧轴尺寸（cross size）：伸缩项目的在侧轴方向的宽度或高度就是项目的侧轴长度，伸缩项目的侧轴长度属性是「width」或「height」属性，由哪一个对着侧轴方向决定。 容器设置 flex-direction 决定主轴的方向12345/* row ：主轴为水平方向，起点在左端 *//* column ：主轴为水平方向，起点在左端 */.box &#123; flex-direction: row | row-reverse | column | column-reverse;&#125; flex-wrap flex-wrap属性定义，如果一条轴线排不下，如何换行 123.box&#123; flex-wrap: nowrap | wrap | wrap-reverse;&#125; flex-flow 是flex-direction属性和flex-wrap属性的简写形式 123.box &#123; flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;&#125; justify-content 属性定义了项目在主轴上的对齐方式 12345678.box &#123; justify-content: flex-start | flex-end | center | space-between | space-around;&#125;//flex-start（默认值）：左对齐//flex-end：右对齐//center： 居中//space-between：两端对齐，项目之间的间隔都相等。//space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 align-items 定义项目在交叉轴上如何对齐 12345678.box &#123; align-items: flex-start | flex-end | center | baseline | stretch;&#125;//flex-start：交叉轴的起点对齐。//flex-end：交叉轴的终点对齐。//center：交叉轴的中点对齐。//baseline: 项目的第一行文字的基线对齐。//stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度 align-content 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用 123456789.box &#123; align-content: flex-start | flex-end | center | space-between | space-around | stretch;&#125;//flex-start：与交叉轴的起点对齐。//flex-end：与交叉轴的终点对齐。//center：与交叉轴的中点对齐。//space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。//space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。//stretch（默认值）：轴线占满整个交叉轴","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"mysql常用语法","slug":"Web/mysql常用语法","date":"2018-07-18T09:53:42.898Z","updated":"2018-07-18T09:53:42.898Z","comments":true,"path":"2018/07/18/Web/mysql常用语法/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/mysql常用语法/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536371，查询表结构： desc table_name; show create table table_name;2, 更改表主键 先删除主键 alter table table_name drop primary key; 然后再添加主键 alter table table_name add primary key(id);3, 创建表 CREATE TABLE `proc` ( `id` int(11) NOT NULL, `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT &apos;&apos;, `name` char(64) NOT NULL DEFAULT &apos;&apos;, `type` enum(&apos;FUNCTION&apos;,&apos;PROCEDURE&apos;) NOT NULL, `specific_name` char(64) NOT NULL DEFAULT &apos;&apos;, `language` enum(&apos;SQL&apos;) NOT NULL DEFAULT &apos;SQL&apos;, `sql_data_access` enum(&apos;CONTAINS_SQL&apos;,&apos;NO_SQL&apos;,&apos;READS_SQL_DATA&apos;,&apos;MODIFIES_SQL_DATA&apos;) NOT NULL DEFAULT &apos;CONTAINS_SQL&apos;, `is_deterministic` enum(&apos;YES&apos;,&apos;NO&apos;) NOT NULL DEFAULT &apos;NO&apos;, `security_type` enum(&apos;INVOKER&apos;,&apos;DEFINER&apos;) NOT NULL DEFAULT &apos;DEFINER&apos;, `param_list` blob NOT NULL, `returns` longblob NOT NULL, `body` longblob NOT NULL, `definer` char(77) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT &apos;&apos;, `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, `modified` timestamp NOT NULL DEFAULT &apos;0000-00-00 00:00:00&apos;, `sql_mode` set(&apos;REAL_AS_FLOAT&apos;,&apos;PIPES_AS_CONCAT&apos;,&apos;ANSI_QUOTES&apos;,&apos;IGNORE_SPACE&apos;,&apos;NOT_USED&apos;,&apos;ONLY_FULL_GROUP_BY&apos;,&apos;NO_UNSIGNED_SUBTRACTION&apos;,&apos;NO_DIR_IN_CREATE&apos;,&apos;POSTGRESQL&apos;,&apos;ORACLE&apos;,&apos;MSSQL&apos;,&apos;DB2&apos;,&apos;MAXDB&apos;,&apos;NO_KEY_OPTIONS&apos;,&apos;NO_TABLE_OPTIONS&apos;,&apos;NO_FIELD_OPTIONS&apos;,&apos;MYSQL323&apos;,&apos;MYSQL40&apos;,&apos;ANSI&apos;,&apos;NO_AUTO_VALUE_ON_ZERO&apos;,&apos;NO_BACKSLASH_ESCAPES&apos;,&apos;STRICT_TRANS_TABLES&apos;,&apos;STRICT_ALL_TABLES&apos;,&apos;NO_ZERO_IN_DATE&apos;,&apos;NO_ZERO_DATE&apos;,&apos;INVALID_DATES&apos;,&apos;ERROR_FOR_DIVISION_BY_ZERO&apos;,&apos;TRADITIONAL&apos;,&apos;NO_AUTO_CREATE_USER&apos;,&apos;HIGH_NOT_PRECEDENCE&apos;,&apos;NO_ENGINE_SUBSTITUTION&apos;,&apos;PAD_CHAR_TO_FULL_LENGTH&apos;) NOT NULL DEFAULT &apos;&apos;, `comment` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL, `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL, `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL, `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL, `body_utf8` longblob, PRIMARY KEY (`db`,`name`,`type`), KEY `id` (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8 4, 修改表明 alter table tableName rename to table_name;","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"web工具配置","slug":"Web/web工具配置","date":"2018-07-18T09:53:42.897Z","updated":"2018-07-18T09:53:42.898Z","comments":true,"path":"2018/07/18/Web/web工具配置/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/web工具配置/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162 scp -p ~/.ssh/id_rsa.pub root@192.168.91.135:/root/.ssh/authorized_keysroot@192.168.91.135's password: 用brew 安装时 有时需要安装两遍1. mysql 安装 rpm -qa | grep mysql rpm -e mysql yum list | grep mysql yum install -y mysql-server mysql mysql-deve以前的版本我们用的是以下修改update user set password=password('root') where user='root';但是在5.7版本中不存在password字段，所有我们要用以下修改进行重置密码update user set authentication_string=password('123456') where user='root';flush privileges配置：/etc/my.cnf文件位置: /var/lib/mysql mysql数据库的数据库文件存放位置log位置：/var/log2.nginx1 SSL功能需要openssl库，下载地址：http://www.openssl.org/2 gzip模块需要zlib库，下载地址：http://www.zlib.net/3 rewrite模块需要pcre库，下载地址：http://www.pcre.org/4,Nginx的安装包：下载地址为：http://nginx.org/en/download.html:yum install -y gcc gcc-c++a.1 tar -zxvf soft/nginx-1.9.9.tar.gza.2 cd nginx-1.9.9/a.3 ./configure --with-pcre=../pcre-8.38/ --with-zlib=../zlib-1.2.8/ --with-openssl=../openssl-SNAP-20160104/a.4 makea.5 make install3.php:yum install php php-devel:yum install php-mysql php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc4,linuxXAMPP 命令库。例如 /opt/lampp/bin/mysql 可执行 MySQL 监视器/opt/lampp/bin/Apache 文档根目录/opt/lampp/htdocs/Apache 配制文件/opt/lampp/etc/httpd.confMySQL 配制文件/opt/lampp/etc/my.cnfPHP 配制文件/opt/lampp/etc/php.iniProFTPD 配制文件。（从 0.9.5 版开始）/opt/lampp/etc/proftpd.confphpMyAdmin 配制文件/opt/lampp/phpmyadmin/config.inc.php mac 配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758591，安装php70； $ brew tap homebrew/dupes $ brew tap homebrew/versions $ brew tap homebrew/homebrew-php // 创建目录 sudo mkdir /usr/local/var sudo chmod 777 /usr/local/var //修改成你自己的用户名和组 sudo chown -R &lt;username&gt;:&lt;group&gt; /usr/local/sbin sudo mkdir /usr/local/sbin/ //安装PHP7 $ brew install php70 //删掉以前安装的PHP5.6 //你可以根据自己的情况来修改 $ brew unlink php56 $ brew link php702，PHP70//因为已经安装homebrew 所以可以直接使用homebrew安装php-fpmbrew tap homebrew/dupesbrew tap homebrew/phpbrew install --without-apache --with-fpm --with-mysql php70配置软连接echo &apos;export PATH=&quot;/usr/local/sbin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profileecho &apos;export PATH=&quot;/usr/local/sbin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc查看端口lsof -Pni4 | grep LISTEN | grep phpmysql 安装brew install mysqlln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents软连接launchctl load ~/Library/LaunchAgents/ homebrew.mxcl.mysql.plist//配置 mysqlmysql_secure_installationnginx的安装brew install nginxsudo cp -v /usr/local/opt/nginx/*.plist /Library/LaunchDaemons/sudo chown root:wheel /Library/LaunchDaemons/homebrew.mxcl.nginx.plistsudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.nginx.plistsudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.nginx.plist/usr/local/etc/nginx/nginx.conf （配置文件路径）/usr/local/var/www （服务器默认路径）/usr/local/Cellar/nginx/1.6.2 （安装路径）//sudo nginx//sudo php-fpm start|reload|stop//sudo nginx -s reload//sudo nginx -s stop 3,java 环境（win） `JAVA环境变量JAVA_HOME、CLASSPATH、PATH设置详解 Windows下JAVA用到的环境变量主要有3个，JAVA_HOME、CLASSPATH、PATH。 1, JAVA_HOME 指向的是JDK的安装路径，如C:\\jdk1.5.0_06，在这路径下你应该能够找到bin、lib等目录。 JAVA_HOME=C:\\jdk1.5.0_06 2, PATH PATH 环境变量原来Windows里面就有，你只需修改一下，使他指向JDK的bin目录，这样你在控制台下面编译、执行程序时就不需要再键入一大串路径了。设置方法是保留原来的PATH的内容，并在其中加上%JAVA_HOME%\\bin PATH=%JAVA_HOME%\\bin;%PATH% 同样，%PATH%是引用以前你设置的PATH环境变量，你照抄以前的值就行了。 3,CLASSPATH 环境变量我放在最后面，是因为以后你出现的莫名其妙的怪问题80%以上都可能是由于CLASSPATH设置不对引起的，所以要加倍小心才行。 CLASSPATH=.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"web相关","slug":"Web/web相关","date":"2018-07-18T09:53:42.895Z","updated":"2018-07-18T09:53:42.896Z","comments":true,"path":"2018/07/18/Web/web相关/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/web相关/","excerpt":"","text":"`1.nginx安装后，NGINX的网站目录位于：/usr/share/nginx/htmlNGINX的配置文件位于：/etc/nginx/nginx.conf启动：service nginx start","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"数据库备份mysql","slug":"Web/数据库备份mysql","date":"2018-07-18T09:53:42.895Z","updated":"2018-07-18T09:53:42.895Z","comments":true,"path":"2018/07/18/Web/数据库备份mysql/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/数据库备份mysql/","excerpt":"","text":"mysql命令行备份数据库 MySQL数据库使用命令行备份|MySQL数据库备份命令 例如： 数据库地址：127.0.0.1 数据库用户名：root 数据库密码：pass 数据库名称：myweb 备份数据库到D盘跟目录 mysqldump -h127.0.0.1 -uroot -ppass myweb &gt; d:/backupfile.sql 备份到当前目录 备份MySQL数据库为带删除表的格式，能够让该备份覆盖已有数据库而不需要手动删除原有数据库 mysqldump --add-drop-table -h127.0.0.1 -uroot -ppass myweb &gt; backupfile.sql 直接将MySQL数据库压缩备份 备份到D盘跟目录 mysqldump -h127.0.0.1 -uroot -ppass myweb | gzip &gt; d:/backupfile.sql.gz 备份MySQL数据库某个(些)表。此例备份table1表和table2表。备份到linux主机的/home下 mysqldump -h127.0.0.1 -uroot -ppass myweb table1 table2 &gt; /home/backupfile.sql 同时备份多个MySQL数据库 mysqldump -h127.0.0.1 -uroot -ppass --databases myweb myweb2 &gt; multibackupfile.sql 仅仅备份数据库结构。同时备份名为myweb数据库和名为myweb2数据库 mysqldump --no-data -h127.0.0.1 -uroot -ppass --databases myweb myweb2 &gt; structurebackupfile.sql 备份服务器上所有数据库 mysqldump --all-databases -h127.0.0.1 -uroot -ppass &gt; allbackupfile.sql 还原MySQL数据库的命令。还原当前备份名为backupfile.sql的数据库 mysql -h127.0.0.1 -uroot -ppass myweb &lt; backupfile.sql 还原压缩的MySQL数据库 gunzip &lt; backupfile.sql.gz | mysql -h127.0.0.1 -uroot -ppass myweb 将数据库转移到新服务器。此例为将本地数据库myweb复制到远程数据库名为serweb中，其中远程数据库必须有名为serweb的数据库 mysqldump -h127.0.0.1 -uroot -ppass myweb | mysql --host=***.***.***.*** -u数据库用户名 -p数据库密码 -C serweb","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"Promise小结 js","slug":"Web/Promise小结 js","date":"2018-07-18T09:53:42.894Z","updated":"2018-07-18T09:53:42.895Z","comments":true,"path":"2018/07/18/Web/Promise小结 js/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/Promise小结 js/","excerpt":"","text":"Primise 总结 js回调 同步回调 123456func add(a,b,func)&#123; func(a+b)&#125;;console.log('start');add(1,2,v=&gt;console.log(v));console.log('end'); 异步回调 123456func add(a,b,func)&#123; setTimeout(()=&gt;func(a+b),1000);&#125;;console.log('start');add(1,2,v=&gt;console.log(v));console.log('end');3. 回调 12345678910111213141516// 嵌套回调func1(function(v1)) &#123; func2(function(v2))&#123; func3(function(v3))&#123; console.log(v1+v2+v3); &#125; &#125;&#125;// Promise 回调func1().then(function()&#123; return v1;&#125;).then(function(obj)&#123; return v1+obj;&#125;).then(function(obj)&#123; return v3 + obj;&#125;) Promise 使用 resolve &amp; reject promise构造函数生成Promise对象，入参函数resolve，reject 1234567&gt; var promise = new Promise(function(resolve,reject)&#123;&gt; // if succ&gt; resolve('succ');&gt; // if err&gt; reject('err');&gt; &#125;)&gt; Fulfilled &amp; Rejected Promise对象一开始是Pending的准备状态 执行了resolve()，状态变为onFulfilled状态 执行了reject()，状态变为onRejected状态 便捷构造方法 1234&gt; Promise.resolve(1);&gt; // ==&gt; new Promise((resolve) =&gt; resolve(1));&gt; 1234&gt; Promise.reject(new Error(\"BOOM\")) &gt; // ===&gt; new Promise((resolve, reject) =&gt; reject(new Error(\"BOOM\")));&gt; 异常捕获 catch catch方法可以捕获到then中抛出的错误 12345678910&gt; var promise = Promise.resolve();&gt; promise.then(function() &#123;&gt; return 'success';&gt; &#125;).then(function (success) &#123;&gt; console.log(success);&gt; throw new Error(\"Another BOOM!\");&gt; &#125;).catch(function (error) &#123;&gt; console.log(error); // 可以正常捕捉到异常&gt; &#125;);&gt;","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"singleTon","slug":"Web/singleTon","date":"2018-07-18T09:53:42.894Z","updated":"2018-07-18T09:53:42.894Z","comments":true,"path":"2018/07/18/Web/singleTon/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/singleTon/","excerpt":"","text":"`javapublic class Helper { private static Helper instance = new Helper(); private Helper (){} public static Helper getInstance() { if (instance == null) { instance = new Helper(); } return instance; } void getName() { System.out.println(&quot;getName&quot;); } private static class Singleton{ private static Helper singleton = new Helper(); } public static Helper getInstance2() { return Singleton.singleton; } static Helper shared = getInstance2(); } class Person { public Person() { // TODO Auto-generated constructor stub Helper.shared.getName(); }}","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"phpѧϰ1","slug":"Web/php学习1","date":"2018-07-18T09:53:42.893Z","updated":"2018-07-19T01:11:18.434Z","comments":true,"path":"2018/07/18/Web/php学习1/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/php学习1/","excerpt":"","text":"Day11234567891011121314151617181920212223242526272829303132333435//php配置(apache)1，httpd.conf 中添加PHPIniDir \"php语言包所在的目录\"2，站点的核心： 1，ServerName 站点名称 2，DocumentRoot 站点真实目录3，目录访问权限： &lt;Directory \"要设置权限的物理路径\"&gt; Options Index #设置目录可显示“文件列表” Order Deny,Allow #先拒绝后允许或先允许后拒绝，不管哪个顺序，都是是后者覆盖前者 Allow from All #在文件夹中设定权限 AllowOverride all &lt;/Directory&gt;4，分布式访问式权限 目录访问权限中的“分布式权限”： 一个站点的任何一个文件夹，都可以对其进行“单独权限设置”： 1，需要在该文件夹中放入一个特殊名字的文件： .htaccess 2，该文件夹的内容，几乎可以跟Directory中的设置一样 3，该文件中的设置，优先于Directory中的设置，即如果有同样设置项但值不同，以.htaccess中的为准； 4，.htaccess中的设置项，无需重启apache，就可以立即生效。5，多站点配置： 1，在http.conf中，打开虚拟主机配置文件：apache安装位置/conf/extra/httpd-vhosts.conf 2，格式： &lt;VirtualHost&gt; ServerName .... DocumentRoot ..... &lt;Directory .....&gt; &lt;/Directory&gt; &lt;/VirtualHost&gt; 3，ServerAlias 别名1 别名2 写在ServerName并列的位置。 Day21234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191,Php 书写短格式，在php.ini中打开short_open_tag = ON;2,Php 书写特性 1，变量区分大小写 2，常量通常也区分，可设置不区分 3，函数名，（if for return ...） 4, 分号 结束3，变量 1，值传递 $ver1 = 1; $ver2 = $ver1; 2，引用传递 $ver1 = 1; $ver2 = &amp; $ver1; 3，可变变量 $ver1 = \"ver2\"; $ver2 = 10; echo $$ver2; 4, 预定义变量： $_GET;$_POST;$_REQUSET;$_SERVER;_GLOBALS 1，均为数组 2，系统定义与维护 3，超全局作用域 4，不同情景具有不同的值 :$_POST;$_GET;表单提交 //提交get表单有 5种形式； 1, &lt;from action = \"xx.php method = \"get\"&gt; &lt;input type = \"text\" name = \"data1\"/&gt; &lt;input type = \"text\" name = \"data2\"/&gt; &lt;input type = \"submit name = \"submit\"/&gt; &lt;/from&gt; 2, &lt;a href = \"xxx.php?data1 = data1 &amp; data2 = data2\"&gt;链接传递&lt;/a&gt; 3, &lt;script&gt; location.href = \"xxx.php?data1=data1 &amp; data2 = data2\" &lt;/script&gt; 4, &lt;script&gt; location.assign = \"xxx.php?data1=data1 &amp; data2 = data2\" &lt;/script&gt; 5, //header(\"location:xxx.php\") //header(\"location:xxx.php? data1 = \"data1\" &amp; data2 = \"data2\") :$_REQUEST; 为$_POST,$_GET合集:如果变量名相同时，后者覆盖前者 :$_SERVER; 1,$_SERVER['REMOTE_ADDR']:获取访问者的IP地址 2,$_SERVER['SERVER_ADDR']:获取访问者的ip地址 3,$_SERVER['SERVER_NAME']:获取服务器NAME(servername) 4,$_SERVER['DOCUMENT_ROOT'];获取站点的真实物理地址，其实就是站点设置中的documentroot 5,$_SERVER['PHP_SELF'];获取当前网页地址 6,$_SERVER['SCRIPT_FILENAME'];获取当前网页地址物理路径 7,$_SERVER['QUERY_STRING'];获取当前网页地址中的所有get数据 :$_GLOBALS:全局变量 4，常量：常量相对于变量来说，其中储存的数据不会改变的标识符。 1,define(\"VERSION\",\"1.0\") 2,const version = \"1.0\" //取值 $a = VERSION; $a = constant(\"VERSION\"); 区别: 1，使用形式不同。 2，可变程度不同（不可改变和销毁） 3，全局作用域 4，只能储存标量类型(bool,float,int,string) 判断: 1，defined(\"VERSION\") 是否定义 预定义常量: M_PI:圆周率的常量值 PHP_OS:php运行所在的操作系统 PHP_VERSION:版本号 PHP_INT_MAX:最大的整数值 PHP_EOL:换行符 魔术变量: __FILE__ //当前文件的完整路径 __DIR__ //当前文件所在的目录 __LINE__ //当前文件的行号 5,数据类型: 1,基本类型 整数类型:int.integer 浮点数类型:float 字符串类型:string 布尔类型:bool,boolean 2,复合类型 数组:array 对象:object 3，特殊类型 空类型:null 资源类型resource 4，整数类型 $v = 123; //10 dec $v = 0123; //8 oct $v = 0x123; //16 hex //十进制转化： decbin(),decoct(),dechex() // 2,8 16 5, 浮点 //精度为3位比较 if (round($v/3 * 1000) == round(2.7*1000)) &#123; &#125;; 6，字符串 $str = &lt;&lt;&lt; \"a\" Hello World \"a\"; • var_dump()：用于输出变量的“完整信息”，几乎只用于调试代码。 • getType($变量名)：获取该变量的类型名字，返回的是一个表示该类型名字的字符串，比如：“string”，“bool”，“double”，“int” • setType($变量名，“目标类型”)：将该变量强制改变为目标类型； • isset(), empty(), unset(); • 比较 \"==\"(模糊比较) \"===\"(精确比较) Day31234567891011121314151，运算符 1，逻辑运算 &amp;&amp;(与), ||(或), !(非) 2, 字符串拼接 . '将两个字符串连接并类型转换' 3，赋值运算符 : '+=' ,'-=','*'2,条件运算 1, Bool ? v2 : v3;3,位运算符 1,'&amp;'(位与) '|'(位或) '~'(位取反) '^'(位异或) '&lt;&lt;'(左移动) 4,原码，反码，补码， '反码': 正数的反码是起原码本身，负数的反码是 其符号位不变，其它位取反 '补码': 正数等于本身，负数：符号位不变，其它位取反后加＋1 Day61234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162631,函数 1，参数: 1: func_get_args();//获取实参数据列表，成为一个数组 2: func_get_arg($i);//获取第$i个实参数据，$i从0开始算起； 3：func_num_args();//获取实参的数量（个数） 2,匿名函数: 1; $func1 = function($str):String&#123; echo \"匿名函数\"; return strtoupper($str); &#125; $func1(\"Hello\"); 2: function func1($x,$y,$z):int &#123; retrun $x + $y + $z($x + $y); &#125; $f1 = function($v1,$v2):int &#123; return $v1 + $v2; &#125; func1(1,2,$f1(1,2)); 3,作用域： 1,要点 1，全局范围不能访问局部变量 2，局部范围不能访问全局变量； 3，函数内部的变量（局部变量），通常在函数调用执行结束后，被“销毁”。 4，局部静态变量，在函数调用结束后不被销毁； 2，局部操作全局变量 1，使用global关键字实现 :function()&#123; global $v1; $v1 = 66; &#125; 2，使用$GLOBALS超全局变量来实现 function() &#123; $GLOBAILS['v1'] = 66; &#125; 3,函数相关的系统函数操作 • function_exists()：判断函数是否被定义过。其中使用的参数为“函数名” 4,其他常用系统函数: • 字符串函数： 1: 输出与格式化：echo , print, printf, print_r, var_dump. 2: 字符串去除与填充：trim, ltrim, rtrim, str_pad 3: 字符串连接与分割：implode, join， explode, str_split 4: 字符串截取：substr, strchr, strrchr, 5: 字符串替换：str_replace, substr_replace 6: 字符串长度与位置： strlen, strpos, strrpos, 7: 字符转换：strtolower, strtoupper, lcfirst, ucfirst, ucwords 8: 特殊字符处理：nl2br, addslashes, htmlspecialchars, htmlspecialchars_decode, 5.递归函数: function factorial($n) &#123; if ($n == 1) &#123; return 1; &#125; return $n * factorial($n - 1); &#125; Day71234567891011121314151617181920 1,数组基础 1, each()函数的使用 1,foreach($arr as $key=&gt;$value) &#123; &#125; 2,while( list($key,$value) = each($arr) ) &#123; &#125; 3,each()函数的作用：先取得一个数组的“当前单元”的下标和值（并放入一个数组），然后将指针移到下一个单元。 4,常用数组相关函数 1，count()，key()，range()，asort() ``` - ## Day8 1,MYSQL ` 1，连接sql mysql -h 0.0.0.0 -u root -p 或 mysql --host=服务器地址 --user=用户名 --port=端口 --password 2，数据库的备份和恢复： 1，mysqldump -h &apos;ip&apos; -u &apos;name&apos; -p &apos;databaseName&apos; &gt; &apos;文件名&apos; 2, mysql -h localhost -u root -p &apos;databaseName&apos; &lt; 文件名&apos; 3, 创建数据库 create database dbTest charset utf8 collate utf_general_ci; 4，删除数据库 drop database if exists databaseName; //修改 alter database database_name charset utf8 5,表操作 1,创建表 create table table_name111 ( id int auto_increment, user_name varchar(20) not null, f1 float,f2 double,f3 time, f4 text, f5 decimal(10,3), primary key(id), unique(user_name) ); 2,外键索引 //创建tab1 create table class_info ( id int auto_increment, class_name varchar(20) not null, stu_count float, primary key(id), unique key(class_name) ); //创建tab2 create table student_info ( id int auto_increment, class_id int, user_name varchar(20), email varchar (50), age int, primary key(id), unique key(user_name), foreign key (class_id) references class_info(id) ); // 主键约束：形式： primary key ( 字段名); 含义（作用）：使该设定字段的值可以用于“唯一确定一行数据”，其实就是“主键”的意思。 唯一约束：形式： unique key ( 字段名); 含义（作用）：使该设定字段的值具有“唯一性”，自然也是可区分的。 外键约束：形式： foreign key ( 字段名) references 其他表名(对应其他表中的字段名) ; 含义（作用）：使该设定字段的值，必须在其谁定的对应表中的对应字段中已经有该值了。 非空约束： 形式： not null，其实就是设定一个字段时写的那个“not null”属性。 这个约束只能写在字段属性上； 默认约束： 形式： default XX值；其实就是设定一个字段时写的那个“default 默认值”属性 这个约束只能写在字段属性上； 检查约束： 形式： check（某种判断语句），比如： create table tab1 ( age tinyint, check (age&gt;=0 and age &lt;100) /*这就是检查约束*/ ) 6，常用关键字 1，表选项就是，创建一个表的时候，对该表的整体设定，主要有如下几个： charset = 要使用的字符编码， engine = 要使用的存储引擎（也叫表类型）， auto_increment = 设定当前表的自增长字段的初始值，默认是1 comment = ‘该表的一些说明文字’ 7，表操作 1，修改表 1，添加字段：alter table table_name add column all_age int; 2，修改字段: alter table tableName change column old_key_word new_key_wrod int; 3，删除字段: alter table table_name drop column key_word 4，添加普通索引: alter table table_name add key(id_key) 5，添加唯一约束:alter table 表名 add unique key (字段名1[，字段名2,...]) 6，添加主键索引(约束)：alter table 表名 add primary key (字段名1[，字段名2,...])； 7，修改表明:alter table 旧表名 rename [to] 新表名； 8，删除表：drop table 【if exists】 表名； 2, • 显示当前数据库中的所有表: show tables； • 显示某表的结构: desc 表名； 或：describe 表名； • 显示某表的创建语句：show create table 表名； • 重命名表：rename table 旧表名 to 新表名； • 从已有表复制表结构：create table [if not exists] 新表名 like 原表名; 3, 扩展php中操作mysql数据的几个函数： $n1 = mysql_num_rows(结果集); //获得该结果集的数据行数； $n2 = mysql_num_fields(结果集); //获得该结果集的数据列数； $name = mysql_field_name(结果集, $i ); //获得结果集的第i个字段的名字！i从0开始算起 8,视图（view）定义语句 语法形式： create view 视图名 【（字段名1，字段名2，字段名3，....）】 as select语句；","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"jquery","slug":"Web/jquery","date":"2018-07-18T09:51:24.193Z","updated":"2018-07-18T09:51:24.193Z","comments":true,"path":"2018/07/18/Web/jquery/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/jquery/","excerpt":"","text":"`html&lt;!DOCTYPE html&gt; Title $(document).ready(function () { //塞选 选择器// $(“ul li:odd”).css(“background-color”,”red”);// $(“ul li:even”).css(“background-color”,”blue”);// $(“ul li:eq(2)”).css(“font-size”,”20px”);// $(“ul li:lt(6)”).css(“font-size”,”18px”); }); $(document).ready(function () { //属性选择器 $(“a[href]”).css(“color”,”red”); $(“a[href = ‘www.baidu.com&#39;]&quot;); $(“a[href ^= ‘web’]”);//选择以web开头的元素 $(“a[href $= ‘net’]”);//选择以net结尾的元素 $(“a[href = ‘baidu’]”);//选择包含baidu的元素 $(“a[href][title = ‘doc’]”);//选择符合 }); //wrap $(document).ready(function () { $(“.wrap li”).hover(function () { $(this).children(“ul”).slideToggle(“fast”,”linear”,function (index,value) { $(this).children(“li”).click(function () { console.log(“log”); }); console.log(“index”); }); }); $(“.btn”).get(0).onclick = function () {// this.backgroundColor = “red”;// alert(“tbn”) }; }); { margin: 0px; padding: 0px; } ul { list-style: none; } .wrap { width: 330px; height: 30px; margin: 100px; display: inline; } .wrap li { float: left; width: 100px; height: 30px; position: relative; } .wrap a { color: black; text-decoration: none; display: block; height: 30px; text-align: center; line-height: 30px; /background-image: url();/ } .wrap li ul { position: absolute; display: none; } 1级菜单 二级菜单 二级菜单 二级菜单 2级菜单 二级菜单 二级菜单 二级菜单 3级菜单 二级菜单 二级菜单 二级菜单","categories":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}],"tags":[],"keywords":[{"name":"Web","slug":"Web","permalink":"https://Alexzzn.github.io/categories/Web/"}]},{"title":"","slug":"iOS/银行卡文档","date":"2018-07-18T07:07:58.000Z","updated":"2018-07-18T07:07:58.000Z","comments":true,"path":"2018/07/18/iOS/银行卡文档/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/银行卡文档/","excerpt":"","text":"`swift (NSString )returnBankName:(NSString) idCard{ //“发卡行.卡种名称”, NSArray* bankName = @[ @&quot;邮储银行·绿卡通&quot; , @&quot;邮储银行·绿卡银联标准卡&quot; , @&quot;邮储银行·绿卡银联标准卡&quot; , @&quot;邮储银行·绿卡专用卡&quot; , @&quot;邮储银行·绿卡银联标准卡&quot;, @&quot;邮储银行·绿卡(银联卡)&quot; , @&quot;邮储银行·绿卡VIP卡&quot; , @&quot;邮储银行·银联标准卡&quot; , @&quot;邮储银行·中职学生资助卡&quot; , @&quot;邮政储蓄银行·IC绿卡通VIP卡&quot;, @&quot;邮政储蓄银行·IC绿卡通&quot; , @&quot;邮政储蓄银行·IC联名卡&quot; , @&quot;邮政储蓄银行·IC预付费卡&quot; , @&quot;邮储银行·绿卡银联标准卡&quot; , @&quot;邮储银行·绿卡通&quot;, @&quot;邮政储蓄银行·武警军人保障卡&quot; ,@&quot;邮政储蓄银行·中国旅游卡（金卡）&quot; ,@&quot;邮政储蓄银行·普通高中学生资助卡&quot; ,@&quot;邮政储蓄银行·中国旅游卡（普卡）&quot;, @&quot;邮政储蓄银行·福农卡&quot; , @&quot;工商银行·牡丹运通卡金卡&quot; , @&quot;工商银行·牡丹运通卡金卡&quot; , @&quot;工商银行·牡丹运通卡金卡&quot; , @&quot;工商银行·牡丹VISA卡(单位卡)&quot;, @&quot;工商银行·牡丹VISA信用卡&quot; , @&quot;工商银行·牡丹VISA卡(单位卡)&quot; , @&quot;工商银行·牡丹VISA信用卡&quot; , @&quot;工商银行·牡丹VISA信用卡&quot; , @&quot;工商银行·牡丹VISA信用卡&quot;, @&quot;工商银行·牡丹VISA信用卡&quot; , @&quot;工商银行·牡丹运通卡普通卡&quot; , @&quot;工商银行·牡丹VISA信用卡&quot; , @&quot;工商银行·牡丹VISA白金卡&quot; , @&quot;工商银行·牡丹贷记卡(银联卡)&quot;, @&quot;工商银行·牡丹贷记卡(银联卡)&quot; , @&quot;工商银行·牡丹贷记卡(银联卡)&quot; , @&quot;工商银行·牡丹贷记卡(银联卡)&quot; , @&quot;工商银行·牡丹欧元卡&quot; , @&quot;工商银行·牡丹欧元卡&quot;, @&quot;工商银行·牡丹欧元卡&quot; , @&quot;工商银行·牡丹万事达国际借记卡&quot; , @&quot;工商银行·牡丹VISA信用卡&quot; , @&quot;工商银行·海航信用卡&quot; , @&quot;工商银行·牡丹VISA信用卡&quot;, @&quot;工商银行·牡丹万事达信用卡&quot; , @&quot;工商银行·牡丹万事达信用卡&quot; , @&quot;工商银行·牡丹万事达信用卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹万事达白金卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·海航信用卡个人普卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot; , @&quot;工商银行·牡丹灵通卡&quot;, @&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·E时代卡&quot; ,@&quot;工商银行·E时代卡&quot; ,@&quot;工商银行·理财金卡&quot; ,@&quot;工商银行·准贷记卡(个普)&quot; , @&quot;工商银行·准贷记卡(个普)&quot; , @&quot;工商银行·准贷记卡(个普)&quot; , @&quot;工商银行·准贷记卡(个普)&quot; , @&quot;工商银行·准贷记卡(个普)&quot; , @&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·准贷记卡(商普)&quot; , @&quot;工商银行·牡丹卡(商务卡)&quot; , @&quot;工商银行·准贷记卡(商金)&quot; , @&quot;工商银行·牡丹卡(商务卡)&quot; , @&quot;工商银行·贷记卡(个普)&quot; , @&quot;工商银行·牡丹卡(个人卡)&quot; , @&quot;工商银行·牡丹卡(个人卡)&quot; , @&quot;工商银行·牡丹卡(个人卡)&quot; , @&quot;工商银行·牡丹卡(个人卡)&quot; , @&quot;工商银行·贷记卡(个金)&quot; , @&quot;工商银行·牡丹交通卡&quot; ,@&quot;工商银行·准贷记卡(个金)&quot; , @&quot;工商银行·牡丹交通卡&quot; ,@&quot;工商银行·贷记卡(商普)&quot; , @&quot;工商银行·贷记卡(商金)&quot; , @&quot;工商银行·牡丹卡(商务卡)&quot; , @&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹交通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·牡丹贷记卡&quot; ,@&quot;工商银行·牡丹贷记卡&quot; ,@&quot;工商银行·牡丹贷记卡&quot; ,@&quot;工商银行·牡丹贷记卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·中央预算单位公务卡&quot; ,@&quot;工商银行·牡丹灵通卡&quot; ,@&quot;工商银行·财政预算单位公务卡&quot; ,@&quot;工商银行·牡丹卡白金卡&quot; ,@&quot;工商银行·牡丹卡普卡&quot; ,@&quot;工商银行·国航知音牡丹信用卡&quot; ,@&quot;工商银行·国航知音牡丹信用卡&quot; ,@&quot;工商银行·国航知音牡丹信用卡&quot; ,@&quot;工商银行·国航知音牡丹信用卡&quot; ,@&quot;工商银行·银联标准卡&quot; ,@&quot;工商银行·中职学生资助卡&quot; ,@&quot;工商银行·专用信用消费卡&quot; ,@&quot;工商银行·牡丹社会保障卡&quot; ,@&quot;中国工商银行·牡丹东航联名卡&quot; ,@&quot;中国工商银行·牡丹东航联名卡&quot; ,@&quot;中国工商银行·牡丹运通白金卡&quot; ,@&quot;中国工商银行·福农灵通卡&quot; ,@&quot;中国工商银行·福农灵通卡&quot; ,@&quot;工商银行·灵通卡&quot; ,@&quot;工商银行·灵通卡&quot; ,@&quot;中国工商银行·中国旅行卡&quot; ,@&quot;工商银行·牡丹卡普卡&quot; ,@&quot;工商银行·国际借记卡&quot; ,@&quot;工商银行·国际借记卡&quot; ,@&quot;工商银行·国际借记卡&quot; ,@&quot;工商银行·国际借记卡&quot; ,@&quot;中国工商银行·牡丹JCB信用卡&quot; , @&quot;中国工商银行·牡丹JCB信用卡&quot; , @&quot;中国工商银行·牡丹JCB信用卡&quot; , @&quot;中国工商银行·牡丹JCB信用卡&quot; , @&quot;中国工商银行·牡丹多币种卡&quot; ,@&quot;中国工商银行·武警军人保障卡&quot; ,@&quot;工商银行·预付芯片卡&quot; ,@&quot;工商银行·理财金账户金卡&quot; ,@&quot;工商银行·灵通卡&quot; ,@&quot;工商银行·牡丹宁波市民卡&quot; ,@&quot;中国工商银行·中国旅游卡&quot; ,@&quot;中国工商银行·中国旅游卡&quot; ,@&quot;中国工商银行·中国旅游卡&quot; ,@&quot;中国工商银行·借记卡&quot; ,@&quot;中国工商银行·借贷合一卡&quot; ,@&quot;中国工商银行·普通高中学生资助卡&quot; ,@&quot;中国工商银行·牡丹多币种卡&quot; ,@&quot;中国工商银行·牡丹多币种卡&quot; ,@&quot;中国工商银行·牡丹百夫长信用卡&quot; ,@&quot;中国工商银行·牡丹百夫长信用卡&quot; ,@&quot;工商银行·工银财富卡&quot; ,@&quot;中国工商银行·中小商户采购卡&quot; ,@&quot;中国工商银行·中小商户采购卡&quot; ,@&quot;中国工商银行·环球旅行金卡&quot; ,@&quot;中国工商银行·环球旅行白金卡&quot; ,@&quot;中国工商银行·牡丹工银大来卡&quot; ,@&quot;中国工商银行·牡丹工银大莱卡&quot; ,@&quot;中国工商银行·IC金卡&quot; ,@&quot;中国工商银行·IC白金卡&quot; ,@&quot;中国工商银行·工行IC卡（红卡）&quot; , @&quot;中国工商银行布鲁塞尔分行·借记卡&quot; , @&quot;中国工商银行布鲁塞尔分行·预付卡&quot; , @&quot;中国工商银行布鲁塞尔分行·预付卡&quot; , @&quot;中国工商银行金边分行·借记卡&quot; , @&quot;中国工商银行金边分行·信用卡&quot; , @&quot;中国工商银行金边分行·借记卡&quot; , @&quot;中国工商银行金边分行·信用卡&quot; , @&quot;中国工商银行加拿大分行·借记卡&quot; , @&quot;中国工商银行加拿大分行·借记卡&quot; , @&quot;中国工商银行加拿大分行·预付卡&quot; , @&quot;中国工商银行巴黎分行·借记卡&quot; , @&quot;中国工商银行巴黎分行·借记卡&quot; , @&quot;中国工商银行巴黎分行·贷记卡&quot; , @&quot;中国工商银行法兰克福分行·贷记卡&quot; , @&quot;中国工商银行法兰克福分行·借记卡&quot; , @&quot;中国工商银行法兰克福分行·贷记卡&quot; , @&quot;中国工商银行法兰克福分行·贷记卡&quot; , @&quot;中国工商银行法兰克福分行·借记卡&quot; , @&quot;中国工商银行法兰克福分行·预付卡&quot; , @&quot;中国工商银行法兰克福分行·预付卡&quot; , @&quot;中国工商银行印尼分行·借记卡&quot; , @&quot;中国工商银行印尼分行·信用卡&quot; , @&quot;中国工商银行米兰分行·借记卡&quot; , @&quot;中国工商银行米兰分行·预付卡&quot; , @&quot;中国工商银行米兰分行·预付卡&quot; , @&quot;中国工商银行阿拉木图子行·借记卡&quot; , @&quot;中国工商银行阿拉木图子行·贷记卡&quot; , @&quot;中国工商银行阿拉木图子行·借记卡&quot; , @&quot;中国工商银行阿拉木图子行·预付卡&quot; , @&quot;中国工商银行万象分行·借记卡&quot; , @&quot;中国工商银行万象分行·贷记卡&quot; , @&quot;中国工商银行卢森堡分行·借记卡&quot; , @&quot;中国工商银行卢森堡分行·贷记卡&quot; , @&quot;中国工商银行澳门分行·E时代卡&quot; , @&quot;中国工商银行澳门分行·E时代卡&quot; , @&quot;中国工商银行澳门分行·E时代卡&quot; , @&quot;中国工商银行澳门分行·理财金账户&quot; , @&quot;中国工商银行澳门分行·理财金账户&quot; , @&quot;中国工商银行澳门分行·理财金账户&quot; , @&quot;中国工商银行澳门分行·预付卡&quot; , @&quot;中国工商银行澳门分行·预付卡&quot; , @&quot;中国工商银行澳门分行·工银闪付预付卡&quot; , @&quot;中国工商银行澳门分行·工银银联公司卡&quot; , @&quot;中国工商银行澳门分行·Diamond&quot; ,@&quot;中国工商银行阿姆斯特丹·借记卡&quot; ,@&quot;中国工商银行卡拉奇分行·借记卡&quot; ,@&quot;中国工商银行卡拉奇分行·贷记卡&quot; ,@&quot;中国工商银行新加坡分行·贷记卡&quot; ,@&quot;中国工商银行新加坡分行·贷记卡&quot; ,@&quot;中国工商银行新加坡分行·借记卡&quot; ,@&quot;中国工商银行新加坡分行·预付卡&quot; ,@&quot;中国工商银行新加坡分行·预付卡&quot; ,@&quot;中国工商银行新加坡分行·借记卡&quot; ,@&quot;中国工商银行新加坡分行·借记卡&quot; ,@&quot;中国工商银行马德里分行·借记卡&quot; ,@&quot;中国工商银行马德里分行·借记卡&quot; ,@&quot;中国工商银行马德里分行·预付卡&quot; ,@&quot;中国工商银行马德里分行·预付卡&quot; ,@&quot;中国工商银行伦敦子行·借记卡&quot; ,@&quot;中国工商银行伦敦子行·工银伦敦借记卡&quot; , @&quot;中国工商银行伦敦子行·借记卡&quot; , @&quot;农业银行·金穗贷记卡&quot; ,@&quot;农业银行·中国旅游卡&quot; ,@&quot;农业银行·普通高中学生资助卡&quot; ,@&quot;农业银行·银联标准卡&quot; ,@&quot;农业银行·金穗贷记卡(银联卡)&quot; , @&quot;农业银行·金穗贷记卡(银联卡)&quot; , @&quot;农业银行·金穗贷记卡(银联卡)&quot; , @&quot;农业银行·金穗贷记卡(银联卡)&quot; , @&quot;农业银行·金穗贷记卡(银联卡)&quot; , @&quot;农业银行·金穗贷记卡(银联卡)&quot; , @&quot;农业银行·VISA白金卡&quot; ,@&quot;农业银行·万事达白金卡&quot; ,@&quot;农业银行·金穗贷记卡(银联卡)&quot; , @&quot;农业银行·金穗贷记卡(银联卡)&quot; , @&quot;农业银行·金穗贷记卡(银联卡)&quot; , @&quot;农业银行·金穗贷记卡(银联卡)&quot; , @&quot;农业银行·金穗贷记卡&quot; ,@&quot;农业银行·中职学生资助卡&quot; ,@&quot;农业银行·专用惠农卡&quot; ,@&quot;农业银行·武警军人保障卡&quot; ,@&quot;农业银行·金穗校园卡(银联卡)&quot; , @&quot;农业银行·金穗星座卡(银联卡)&quot; , @&quot;农业银行·金穗社保卡(银联卡)&quot; , @&quot;农业银行·金穗旅游卡(银联卡)&quot; , @&quot;农业银行·金穗青年卡(银联卡)&quot; , @&quot;农业银行·复合介质金穗通宝卡&quot; , @&quot;农业银行·金穗海通卡&quot; ,@&quot;农业银行·退役金卡&quot; ,@&quot;农业银行·金穗贷记卡&quot; ,@&quot;农业银行·金穗贷记卡&quot; ,@&quot;农业银行·金穗通宝卡(银联卡)&quot; , @&quot;农业银行·金穗惠农卡&quot; ,@&quot;农业银行·金穗通宝银卡&quot; ,@&quot;农业银行·金穗通宝卡(银联卡)&quot; , @&quot;农业银行·金穗通宝卡(银联卡)&quot; , @&quot;农业银行·金穗通宝卡&quot; ,@&quot;农业银行·金穗通宝卡(银联卡)&quot; , @&quot;农业银行·金穗通宝卡(银联卡)&quot; , @&quot;农业银行·金穗通宝钻石卡&quot; ,@&quot;农业银行·掌尚钱包&quot; ,@&quot;农业银行·银联IC卡金卡&quot; , @&quot;农业银行·银联预算单位公务卡金卡&quot; , @&quot;农业银行·银联IC卡白金卡&quot; , @&quot;农业银行·金穗公务卡&quot; ,@&quot;中国农业银行贷记卡·IC普卡&quot; ,@&quot;中国农业银行贷记卡·IC金卡&quot; ,@&quot;中国农业银行贷记卡·澳元卡&quot; ,@&quot;中国农业银行贷记卡·欧元卡&quot; ,@&quot;中国农业银行贷记卡·金穗通商卡&quot; ,@&quot;中国农业银行贷记卡·金穗通商卡&quot; ,@&quot;中国农业银行贷记卡·银联白金卡&quot; ,@&quot;中国农业银行贷记卡·中国旅游卡&quot; ,@&quot;中国农业银行贷记卡·银联IC公务卡&quot; , @&quot;宁波市农业银行·市民卡B卡&quot; , @&quot;中国银行·联名卡&quot; ,@&quot;中国银行·个人普卡&quot; ,@&quot;中国银行·个人金卡&quot; ,@&quot;中国银行·员工普卡&quot; ,@&quot;中国银行·员工金卡&quot; ,@&quot;中国银行·理财普卡&quot; ,@&quot;中国银行·理财金卡&quot; ,@&quot;中国银行·理财银卡&quot; ,@&quot;中国银行·理财白金卡&quot; ,@&quot;中国银行·中行金融IC卡白金卡&quot; , @&quot;中国银行·中行金融IC卡普卡&quot; , @&quot;中国银行·中行金融IC卡金卡&quot; , @&quot;中国银行·中银JCB卡金卡&quot; , @&quot;中国银行·中银JCB卡普卡&quot; , @&quot;中国银行·员工普卡&quot; ,@&quot;中国银行·个人普卡&quot; ,@&quot;中国银行·中银威士信用卡员&quot; ,@&quot;中国银行·中银威士信用卡员&quot; ,@&quot;中国银行·个人白金卡&quot; ,@&quot;中国银行·中银威士信用卡&quot; ,@&quot;中国银行·长城公务卡&quot; ,@&quot;中国银行·长城电子借记卡&quot; ,@&quot;中国银行·中银万事达信用卡&quot; ,@&quot;中国银行·中银万事达信用卡&quot; ,@&quot;中国银行·中银万事达信用卡&quot; ,@&quot;中国银行·中银万事达信用卡&quot; ,@&quot;中国银行·中银万事达信用卡&quot; ,@&quot;中国银行·中银威士信用卡员&quot; ,@&quot;中国银行·长城万事达信用卡&quot; ,@&quot;中国银行·长城万事达信用卡&quot; ,@&quot;中国银行·长城万事达信用卡&quot; ,@&quot;中国银行·长城万事达信用卡&quot; ,@&quot;中国银行·长城万事达信用卡&quot; ,@&quot;中国银行·中银奥运信用卡&quot; ,@&quot;中国银行·长城信用卡&quot; ,@&quot;中国银行·长城信用卡&quot; ,@&quot;中国银行·长城信用卡&quot; ,@&quot;中国银行·长城万事达信用卡&quot; ,@&quot;中国银行·长城公务卡&quot; ,@&quot;中国银行·长城公务卡&quot; ,@&quot;中国银行·中银万事达信用卡&quot; ,@&quot;中国银行·中银万事达信用卡&quot; ,@&quot;中国银行·长城人民币信用卡&quot; ,@&quot;中国银行·长城人民币信用卡&quot; ,@&quot;中国银行·长城人民币信用卡&quot; ,@&quot;中国银行·长城信用卡&quot; ,@&quot;中国银行·长城人民币信用卡&quot; ,@&quot;中国银行·长城人民币信用卡&quot; ,@&quot;中国银行·长城信用卡&quot; ,@&quot;中国银行·银联单币贷记卡&quot; ,@&quot;中国银行·长城信用卡&quot; ,@&quot;中国银行·长城信用卡&quot; ,@&quot;中国银行·长城信用卡&quot; ,@&quot;中国银行·长城电子借记卡&quot; ,@&quot;中国银行·长城人民币信用卡&quot; ,@&quot;中国银行·银联标准公务卡&quot; ,@&quot;中国银行·一卡双账户普卡&quot; ,@&quot;中国银行·财互通卡&quot; ,@&quot;中国银行·电子现金卡&quot; ,@&quot;中国银行·长城人民币信用卡&quot; ,@&quot;中国银行·长城单位信用卡普卡&quot; ,@&quot;中国银行·中银女性主题信用卡&quot; ,@&quot;中国银行·长城单位信用卡金卡&quot; ,@&quot;中国银行·白金卡&quot; ,@&quot;中国银行·中职学生资助卡&quot; ,@&quot;中国银行·银联标准卡&quot; ,@&quot;中国银行·金融IC卡&quot; , @&quot;中国银行·长城社会保障卡&quot; ,@&quot;中国银行·世界卡&quot; ,@&quot;中国银行·社保联名卡&quot; ,@&quot;中国银行·社保联名卡&quot; ,@&quot;中国银行·医保联名卡&quot; ,@&quot;中国银行·医保联名卡&quot; ,@&quot;中国银行·公司借记卡&quot; ,@&quot;中国银行·银联美运顶级卡&quot; ,@&quot;中国银行·长城福农借记卡金卡&quot; ,@&quot;中国银行·长城福农借记卡普卡&quot; ,@&quot;中国银行·中行金融IC卡普卡&quot; , @&quot;中国银行·中行金融IC卡金卡&quot; , @&quot;中国银行·中行金融IC卡白金卡&quot; , @&quot;中国银行·长城银联公务IC卡白金卡&quot; , @&quot;中国银行·中银旅游信用卡&quot; ,@&quot;中国银行·长城银联公务IC卡金卡&quot; , @&quot;中国银行·中国旅游卡&quot; ,@&quot;中国银行·武警军人保障卡&quot; ,@&quot;中国银行·社保联名借记IC卡&quot; , @&quot;中国银行·社保联名借记IC卡&quot; , @&quot;中国银行·医保联名借记IC卡&quot; , @&quot;中国银行·医保联名借记IC卡&quot; , @&quot;中国银行·借记IC个人普卡&quot; , @&quot;中国银行·借记IC个人金卡&quot; , @&quot;中国银行·借记IC个人普卡&quot; , @&quot;中国银行·借记IC白金卡&quot; , @&quot;中国银行·借记IC钻石卡&quot; , @&quot;中国银行·借记IC联名卡&quot; , @&quot;中国银行·普通高中学生资助卡&quot; , @&quot;中国银行·长城环球通港澳台旅游金卡&quot; , @&quot;中国银行·长城环球通港澳台旅游白金卡&quot; , @&quot;中国银行·中银福农信用卡&quot; ,@&quot;中国银行金边分行·借记卡&quot; ,@&quot;中国银行雅加达分行·借记卡&quot; ,@&quot;中国银行首尔分行·借记卡&quot; ,@&quot;中国银行澳门分行·人民币信用卡&quot; ,@&quot;中国银行澳门分行·人民币信用卡&quot; ,@&quot;中国银行澳门分行·中银卡&quot; ,@&quot;中国银行澳门分行·中银卡&quot; ,@&quot;中国银行澳门分行·中银卡&quot; ,@&quot;中国银行澳门分行·中银银联双币商务卡&quot; , @&quot;中国银行澳门分行·预付卡&quot; ,@&quot;中国银行澳门分行·澳门中国银行银联预付卡&quot; , @&quot;中国银行澳门分行·澳门中国银行银联预付卡&quot; , @&quot;中国银行澳门分行·熊猫卡&quot; ,@&quot;中国银行澳门分行·财富卡&quot; ,@&quot;中国银行澳门分行·银联港币卡&quot; ,@&quot;中国银行澳门分行·银联澳门币卡&quot; ,@&quot;中国银行马尼拉分行·双币种借记卡&quot; ,@&quot;中国银行胡志明分行·借记卡&quot; ,@&quot;中国银行曼谷分行·借记卡&quot; ,@&quot;中国银行曼谷分行·长城信用卡环球通&quot; , @&quot;中国银行曼谷分行·借记卡&quot; ,@&quot;建设银行·龙卡准贷记卡&quot; ,@&quot;建设银行·龙卡准贷记卡金卡&quot; ,@&quot;建设银行·中职学生资助卡&quot; ,@&quot;建设银行·乐当家银卡VISA&quot; ,@&quot;建设银行·乐当家金卡VISA&quot; ,@&quot;建设银行·乐当家白金卡&quot; ,@&quot;建设银行·龙卡普通卡VISA&quot; ,@&quot;建设银行·龙卡储蓄卡&quot; ,@&quot;建设银行·VISA准贷记卡(银联卡)&quot; , @&quot;建设银行·VISA准贷记金卡&quot; , @&quot;建设银行·乐当家&quot; ,@&quot;建设银行·乐当家&quot; ,@&quot;建设银行·准贷记金卡&quot; ,@&quot;建设银行·乐当家白金卡&quot; ,@&quot;建设银行·金融复合IC卡&quot; , @&quot;建设银行·银联标准卡&quot; ,@&quot;建设银行·银联理财钻石卡&quot; ,@&quot;建设银行·金融IC卡&quot; , @&quot;建设银行·理财白金卡&quot; ,@&quot;建设银行·社保IC卡&quot; , @&quot;建设银行·财富卡私人银行卡&quot; ,@&quot;建设银行·理财金卡&quot; ,@&quot;建设银行·福农卡&quot; ,@&quot;建设银行·武警军人保障卡&quot; ,@&quot;建设银行·龙卡通&quot; ,@&quot;建设银行·银联储蓄卡&quot; ,@&quot;建设银行·龙卡储蓄卡(银联卡)&quot; , @&quot;建设银行·准贷记卡&quot; ,@&quot;建设银行·理财白金卡&quot; ,@&quot;建设银行·理财金卡&quot; ,@&quot;建设银行·准贷记卡普卡&quot; ,@&quot;建设银行·准贷记卡金卡&quot; ,@&quot;建设银行·龙卡信用卡&quot; ,@&quot;建设银行·建行陆港通龙卡&quot; ,@&quot;中国建设银行·普通高中学生资助卡&quot; ,@&quot;中国建设银行·中国旅游卡&quot; ,@&quot;中国建设银行·龙卡JCB金卡&quot; , @&quot;中国建设银行·龙卡JCB白金卡&quot; , @&quot;中国建设银行·龙卡JCB普卡&quot; , @&quot;中国建设银行·龙卡贷记卡公司卡&quot; , @&quot;中国建设银行·龙卡贷记卡&quot; ,@&quot;中国建设银行·龙卡国际普通卡VISA&quot; , @&quot;中国建设银行·龙卡国际金卡VISA&quot; , @&quot;中国建设银行·VISA白金信用卡&quot; , @&quot;中国建设银行·龙卡国际白金卡&quot; , @&quot;中国建设银行·龙卡国际普通卡MASTER&quot; , @&quot;中国建设银行·龙卡国际金卡MASTER&quot; , @&quot;中国建设银行·龙卡万事达金卡&quot; , @&quot;中国建设银行·龙卡贷记卡&quot; ,@&quot;中国建设银行·龙卡万事达白金卡&quot; ,@&quot;中国建设银行·龙卡贷记卡&quot; ,@&quot;中国建设银行·龙卡万事达信用卡&quot; ,@&quot;中国建设银行·龙卡人民币信用卡&quot; ,@&quot;中国建设银行·龙卡人民币信用金卡&quot; ,@&quot;中国建设银行·龙卡人民币白金卡&quot; ,@&quot;中国建设银行·龙卡IC信用卡普卡&quot; , @&quot;中国建设银行·龙卡IC信用卡金卡&quot; , @&quot;中国建设银行·龙卡IC信用卡白金卡&quot; , @&quot;中国建设银行·龙卡银联公务卡普卡&quot; , @&quot;中国建设银行·龙卡银联公务卡金卡&quot; , @&quot;中国建设银行·中国旅游卡&quot; ,@&quot;中国建设银行·中国旅游卡&quot; ,@&quot;中国建设银行·龙卡IC公务卡&quot; , @&quot;中国建设银行·龙卡IC公务卡&quot; , @&quot;交通银行·交行预付卡&quot; ,@&quot;交通银行·世博预付IC卡&quot; , @&quot;交通银行·太平洋互连卡&quot; ,@&quot;交通银行·太平洋万事顺卡&quot; ,@&quot;交通银行·太平洋互连卡(银联卡)&quot; , @&quot;交通银行·太平洋白金信用卡&quot; ,@&quot;交通银行·太平洋双币贷记卡&quot; ,@&quot;交通银行·太平洋双币贷记卡&quot; ,@&quot;交通银行·太平洋双币贷记卡&quot; ,@&quot;交通银行·太平洋白金信用卡&quot; ,@&quot;交通银行·太平洋双币贷记卡&quot; ,@&quot;交通银行·太平洋万事顺卡&quot; ,@&quot;交通银行·太平洋人民币贷记卡&quot; ,@&quot;交通银行·太平洋人民币贷记卡&quot; ,@&quot;交通银行·太平洋双币贷记卡&quot; ,@&quot;交通银行·太平洋准贷记卡&quot; ,@&quot;交通银行·太平洋准贷记卡&quot; ,@&quot;交通银行·太平洋准贷记卡&quot; ,@&quot;交通银行·太平洋准贷记卡&quot; ,@&quot;交通银行·太平洋借记卡&quot; ,@&quot;交通银行·太平洋借记卡&quot; ,@&quot;交通银行·太平洋人民币贷记卡&quot; ,@&quot;交通银行·太平洋借记卡&quot; ,@&quot;交通银行·太平洋MORE卡&quot; , @&quot;交通银行·白金卡&quot; ,@&quot;交通银行·交通银行公务卡普卡&quot; ,@&quot;交通银行·太平洋人民币贷记卡&quot; ,@&quot;交通银行·太平洋互连卡&quot; ,@&quot;交通银行·太平洋借记卡&quot; ,@&quot;交通银行·太平洋万事顺卡&quot; ,@&quot;交通银行·太平洋贷记卡(银联卡)&quot; , @&quot;交通银行·太平洋贷记卡(银联卡)&quot; , @&quot;交通银行·太平洋贷记卡(银联卡)&quot; , @&quot;交通银行·太平洋贷记卡(银联卡)&quot; , @&quot;交通银行·交通银行公务卡金卡&quot; , @&quot;交通银行·交银IC卡&quot; , @&quot;交通银行香港分行·交通银行港币借记卡&quot; , @&quot;交通银行香港分行·港币礼物卡&quot; , @&quot;交通银行香港分行·双币种信用卡&quot; , @&quot;交通银行香港分行·双币种信用卡&quot; , @&quot;交通银行香港分行·双币卡&quot; ,@&quot;交通银行香港分行·银联人民币卡&quot; ,@&quot;交通银行澳门分行·银联借记卡&quot; ,@&quot;中信银行·中信借记卡&quot; ,@&quot;中信银行·中信借记卡&quot; ,@&quot;中信银行·中信国际借记卡&quot; ,@&quot;中信银行·中信国际借记卡&quot; ,@&quot;中信银行·中国旅行卡&quot; ,@&quot;中信银行·中信借记卡(银联卡)&quot; , @&quot;中信银行·中信借记卡(银联卡)&quot; , @&quot;中信银行·中信贵宾卡(银联卡)&quot; , @&quot;中信银行·中信理财宝金卡&quot; ,@&quot;中信银行·中信理财宝白金卡&quot; ,@&quot;中信银行·中信钻石卡&quot; ,@&quot;中信银行·中信钻石卡&quot; ,@&quot;中信银行·中信借记卡&quot; ,@&quot;中信银行·中信理财宝(银联卡)&quot; , @&quot;中信银行·中信理财宝(银联卡)&quot; , @&quot;中信银行·中信理财宝(银联卡)&quot; , @&quot;中信银行·借记卡&quot; ,@&quot;中信银行·理财宝IC卡&quot; , @&quot;中信银行·理财宝IC卡&quot; , @&quot;中信银行·理财宝IC卡&quot; , @&quot;中信银行·理财宝IC卡&quot; , @&quot;中信银行·理财宝IC卡&quot; , @&quot;中信银行·主账户复合电子现金卡&quot; , @&quot;光大银行·阳光商旅信用卡&quot; ,@&quot;光大银行·阳光商旅信用卡&quot; ,@&quot;光大银行·阳光商旅信用卡&quot; ,@&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·阳光卡(银联卡)&quot; , @&quot;光大银行·借记卡普卡&quot; ,@&quot;光大银行·社会保障IC卡&quot; , @&quot;光大银行·IC借记卡普卡&quot; ,@&quot;光大银行·手机支付卡&quot; ,@&quot;光大银行·联名IC卡普卡&quot; , @&quot;光大银行·借记IC卡白金卡&quot; , @&quot;光大银行·借记IC卡金卡&quot; , @&quot;光大银行·阳光旅行卡&quot; ,@&quot;光大银行·借记IC卡钻石卡&quot; , @&quot;光大银行·联名IC卡金卡&quot; , @&quot;光大银行·联名IC卡白金卡&quot; , @&quot;光大银行·联名IC卡钻石卡&quot; , @&quot;华夏银行·华夏卡(银联卡)&quot; , @&quot;华夏银行·华夏白金卡&quot; ,@&quot;华夏银行·华夏普卡&quot; ,@&quot;华夏银行·华夏金卡&quot; ,@&quot;华夏银行·华夏白金卡&quot; ,@&quot;华夏银行·华夏钻石卡&quot; ,@&quot;华夏银行·华夏卡(银联卡)&quot; , @&quot;华夏银行·华夏至尊金卡(银联卡)&quot; , @&quot;华夏银行·华夏丽人卡(银联卡)&quot; , @&quot;华夏银行·华夏万通卡&quot; ,@&quot;民生银行·民生借记卡(银联卡)&quot; , @&quot;民生银行·民生银联借记卡－金卡&quot; , @&quot;民生银行·钻石卡&quot; ,@&quot;民生银行·民生借记卡(银联卡)&quot; , @&quot;民生银行·民生借记卡(银联卡)&quot; , @&quot;民生银行·民生借记卡(银联卡)&quot; , @&quot;民生银行·民生借记卡&quot; ,@&quot;民生银行·民生国际卡&quot; ,@&quot;民生银行·民生国际卡(银卡)&quot; , @&quot;民生银行·民生国际卡(欧元卡)&quot; , @&quot;民生银行·民生国际卡(澳元卡)&quot; , @&quot;民生银行·民生国际卡&quot; ,@&quot;民生银行·民生国际卡&quot; ,@&quot;民生银行·薪资理财卡&quot; ,@&quot;民生银行·借记卡普卡&quot; ,@&quot;民生银行·民生MasterCard&quot; , @&quot;民生银行·民生MasterCard&quot; , @&quot;民生银行·民生MasterCard&quot; , @&quot;民生银行·民生MasterCard&quot; , @&quot;民生银行·民生JCB信用卡&quot; , @&quot;民生银行·民生JCB金卡&quot; , @&quot;民生银行·民生贷记卡(银联卡)&quot; , @&quot;民生银行·民生贷记卡(银联卡)&quot; , @&quot;民生银行·民生贷记卡(银联卡)&quot; , @&quot;民生银行·民生贷记卡(银联卡)&quot; , @&quot;民生银行·民生贷记卡(银联卡)&quot; , @&quot;民生银行·民生JCB普卡&quot; , @&quot;民生银行·民生贷记卡(银联卡)&quot; , @&quot;民生银行·民生贷记卡(银联卡)&quot; , @&quot;民生银行·民生信用卡(银联卡)&quot; , @&quot;民生银行·民生信用卡(银联卡)&quot; , @&quot;民生银行·民生银联白金信用卡&quot; , @&quot;民生银行·民生贷记卡(银联卡)&quot; , @&quot;民生银行·民生银联个人白金卡&quot; , @&quot;民生银行·公务卡金卡&quot; ,@&quot;民生银行·民生贷记卡(银联卡)&quot; , @&quot;民生银行·民生银联商务信用卡&quot; , @&quot;民生银行·民VISA无限卡&quot; , @&quot;民生银行·民生VISA商务白金卡&quot; , @&quot;民生银行·民生万事达钛金卡&quot; ,@&quot;民生银行·民生万事达世界卡&quot; ,@&quot;民生银行·民生万事达白金公务卡&quot; ,@&quot;民生银行·民生JCB白金卡&quot; , @&quot;民生银行·银联标准金卡&quot; ,@&quot;民生银行·银联芯片普卡&quot; ,@&quot;民生银行·民生运通双币信用卡普卡&quot; ,@&quot;民生银行·民生运通双币信用卡金卡&quot; ,@&quot;民生银行·民生运通双币信用卡钻石卡&quot; , @&quot;民生银行·民生运通双币标准信用卡白金卡&quot; , @&quot;民生银行·银联芯片金卡&quot; ,@&quot;民生银行·银联芯片白金卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·两地一卡通&quot; ,@&quot;招商银行·招行国际卡(银联卡)&quot; , @&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·VISA商务信用卡&quot; ,@&quot;招商银行·招行国际卡(银联卡)&quot; , @&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·招行国际卡(银联卡)&quot; , @&quot;招商银行·世纪金花联名信用卡&quot; , @&quot;招商银行·招行国际卡(银联卡)&quot; , @&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·万事达信用卡&quot; ,@&quot;招商银行·万事达信用卡&quot; ,@&quot;招商银行·万事达信用卡&quot; ,@&quot;招商银行·万事达信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·一卡通(银联卡)&quot; , @&quot;招商银行·万事达信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行·一卡通(银联卡)&quot; , @&quot;招商银行·公司卡(银联卡)&quot; , @&quot;招商银行·金卡&quot; ,@&quot;招商银行·招行一卡通&quot; ,@&quot;招商银行·招行一卡通&quot; ,@&quot;招商银行·万事达信用卡&quot; ,@&quot;招商银行·金葵花卡&quot; ,@&quot;招商银行·电子现金卡&quot; ,@&quot;招商银行·银联IC普卡&quot; , @&quot;招商银行·银联IC金卡&quot; , @&quot;招商银行·银联金葵花IC卡&quot; , @&quot;招商银行·IC公务卡&quot; ,@&quot;招商银行·招商银行信用卡&quot; ,@&quot;招商银行信用卡中心·美国运通绿卡&quot; ,@&quot;招商银行信用卡中心·美国运通金卡&quot; ,@&quot;招商银行信用卡中心·美国运通商务绿卡&quot; , @&quot;招商银行信用卡中心·美国运通商务金卡&quot; , @&quot;招商银行信用卡中心·VISA信用卡&quot; , @&quot;招商银行信用卡中心·MASTER信用卡&quot; , @&quot;招商银行信用卡中心·MASTER信用金卡&quot; , @&quot;招商银行信用卡中心·银联标准公务卡(金卡)&quot; , @&quot;招商银行信用卡中心·VISA信用卡&quot; , @&quot;招商银行信用卡中心·银联标准财政公务卡&quot; , @&quot;招商银行信用卡中心·芯片IC信用卡&quot; , @&quot;招商银行信用卡中心·芯片IC信用卡&quot; , @&quot;招商银行香港分行·香港一卡通&quot; , @&quot;兴业银行·兴业卡(银联卡)&quot; , @&quot;兴业银行·兴业卡(银联标准卡)&quot; , @&quot;兴业银行·兴业自然人生理财卡&quot; , @&quot;兴业银行·兴业智能卡(银联卡)&quot; , @&quot;兴业银行·兴业智能卡&quot; ,@&quot;兴业银行·visa标准双币个人普卡&quot; , @&quot;兴业银行·VISA商务普卡&quot; ,@&quot;兴业银行·VISA商务金卡&quot; ,@&quot;兴业银行·VISA运动白金信用卡&quot; ,@&quot;兴业银行·万事达信用卡(银联卡)&quot; , @&quot;兴业银行·VISA信用卡(银联卡)&quot; , @&quot;兴业银行·加菲猫信用卡&quot; ,@&quot;兴业银行·个人白金卡&quot; ,@&quot;兴业银行·银联信用卡(银联卡)&quot; , @&quot;兴业银行·银联信用卡(银联卡)&quot; , @&quot;兴业银行·银联白金信用卡&quot; ,@&quot;兴业银行·银联标准公务卡&quot; ,@&quot;兴业银行·VISA信用卡(银联卡)&quot; , @&quot;兴业银行·万事达信用卡(银联卡)&quot; , @&quot;兴业银行·银联标准贷记普卡&quot; ,@&quot;兴业银行·银联标准贷记金卡&quot; ,@&quot;兴业银行·银联标准贷记金卡&quot; ,@&quot;兴业银行·银联标准贷记金卡&quot; ,@&quot;兴业银行·兴业信用卡&quot; ,@&quot;兴业银行·兴业信用卡&quot; ,@&quot;兴业银行·兴业信用卡&quot; ,@&quot;兴业银行·银联标准贷记普卡&quot; ,@&quot;兴业银行·银联标准贷记普卡&quot; ,@&quot;兴业银行·兴业芯片普卡&quot; ,@&quot;兴业银行·兴业芯片金卡&quot; ,@&quot;兴业银行·兴业芯片白金卡&quot; ,@&quot;兴业银行·兴业芯片钻石卡&quot; ,@&quot;浦东发展银行·浦发JCB金卡&quot; , @&quot;浦东发展银行·浦发JCB白金卡&quot; , @&quot;浦东发展银行·信用卡VISA普通&quot; , @&quot;浦东发展银行·信用卡VISA金卡&quot; , @&quot;浦东发展银行·浦发银行VISA年青卡&quot; , @&quot;浦东发展银行·VISA白金信用卡&quot; , @&quot;浦东发展银行·浦发万事达白金卡&quot; , @&quot;浦东发展银行·浦发JCB普卡&quot; , @&quot;浦东发展银行·浦发万事达金卡&quot; , @&quot;浦东发展银行·浦发万事达普卡&quot; , @&quot;浦东发展银行·浦发单币卡&quot; ,@&quot;浦东发展银行·浦发银联单币麦兜普卡&quot; , @&quot;浦东发展银行·东方轻松理财卡&quot; , @&quot;浦东发展银行·东方-轻松理财卡普卡&quot; , @&quot;浦东发展银行·东方轻松理财卡&quot; , @&quot;浦东发展银行·东方轻松理财智业金卡&quot; , @&quot;浦东发展银行·东方卡(银联卡)&quot; , @&quot;浦东发展银行·东方卡(银联卡)&quot; , @&quot;浦东发展银行·东方卡(银联卡)&quot; , @&quot;浦东发展银行·公务卡金卡&quot; ,@&quot;浦东发展银行·公务卡普卡&quot; ,@&quot;浦东发展银行·东方卡&quot; ,@&quot;浦东发展银行·东方卡&quot; ,@&quot;浦东发展银行·浦发单币卡&quot; ,@&quot;浦东发展银行·浦发联名信用卡&quot; ,@&quot;浦东发展银行·浦发银联白金卡&quot; ,@&quot;浦东发展银行·轻松理财普卡&quot; ,@&quot;浦东发展银行·移动联名卡&quot; ,@&quot;浦东发展银行·轻松理财消贷易卡&quot; ,@&quot;浦东发展银行·轻松理财普卡（复合卡）&quot; , @&quot;浦东发展银行·贷记卡&quot; ,@&quot;浦东发展银行·贷记卡&quot; ,@&quot;浦东发展银行·东方借记卡（复合卡）&quot; , @&quot;浦东发展银行·电子现金卡（IC卡）&quot; , @&quot;浦东发展银行·移动浦发联名卡&quot; , @&quot;浦东发展银行·东方-标准准贷记卡&quot; , @&quot;浦东发展银行·轻松理财金卡（复合卡）&quot; , @&quot;浦东发展银行·轻松理财白金卡（复合卡）&quot; , @&quot;浦东发展银行·轻松理财钻石卡（复合卡）&quot; , @&quot;浦东发展银行·东方卡&quot; ,@&quot;恒丰银行·九州IC卡&quot; , @&quot;恒丰银行·九州借记卡(银联卡)&quot; , @&quot;恒丰银行·九州借记卡(银联卡)&quot; , @&quot;天津市商业银行·银联卡(银联卡)&quot; , @&quot;烟台商业银行·金通卡&quot; ,@&quot;潍坊银行·鸢都卡(银联卡)&quot; , @&quot;潍坊银行·鸳都卡(银联卡)&quot; , @&quot;临沂商业银行·沂蒙卡(银联卡)&quot; , @&quot;临沂商业银行·沂蒙卡(银联卡)&quot; , @&quot;日照市商业银行·黄海卡&quot; ,@&quot;日照市商业银行·黄海卡(银联卡)&quot; , @&quot;浙商银行·商卡&quot; ,@&quot;浙商银行·商卡&quot; ,@&quot;渤海银行·浩瀚金卡&quot; ,@&quot;渤海银行·渤海银行借记卡&quot; ,@&quot;渤海银行·金融IC卡&quot; , @&quot;渤海银行·渤海银行公司借记卡&quot; , @&quot;星展银行·星展银行借记卡&quot; ,@&quot;星展银行·星展银行借记卡&quot; ,@&quot;恒生银行·恒生通财卡&quot; ,@&quot;恒生银行·恒生优越通财卡&quot; ,@&quot;新韩银行·新韩卡&quot; ,@&quot;上海银行·慧通钻石卡&quot; ,@&quot;上海银行·慧通金卡&quot; ,@&quot;上海银行·私人银行卡&quot; ,@&quot;上海银行·综合保险卡&quot; ,@&quot;上海银行·申卡社保副卡(有折)&quot; , @&quot;上海银行·申卡社保副卡(无折)&quot; , @&quot;上海银行·白金IC借记卡&quot; , @&quot;上海银行·慧通白金卡(配折)&quot; , @&quot;上海银行·慧通白金卡(不配折)&quot; , @&quot;上海银行·申卡(银联卡)&quot; , @&quot;上海银行·申卡借记卡&quot; ,@&quot;上海银行·银联申卡(银联卡)&quot; , @&quot;上海银行·单位借记卡&quot; ,@&quot;上海银行·首发纪念版IC卡&quot; , @&quot;上海银行·申卡贷记卡&quot; ,@&quot;上海银行·申卡贷记卡&quot; ,@&quot;上海银行·J分期付款信用卡&quot; ,@&quot;上海银行·申卡贷记卡&quot; ,@&quot;上海银行·申卡贷记卡&quot; ,@&quot;上海银行·上海申卡IC&quot; ,@&quot;上海银行·申卡贷记卡&quot; ,@&quot;上海银行·申卡贷记卡普通卡&quot; ,@&quot;上海银行·申卡贷记卡金卡&quot; ,@&quot;上海银行·万事达白金卡&quot; ,@&quot;上海银行·万事达星运卡&quot; ,@&quot;上海银行·申卡贷记卡金卡&quot; ,@&quot;上海银行·申卡贷记卡普通卡&quot; ,@&quot;上海银行·安融卡&quot; ,@&quot;上海银行·分期付款信用卡&quot; ,@&quot;上海银行·信用卡&quot; ,@&quot;上海银行·个人公务卡&quot; ,@&quot;上海银行·安融卡&quot; ,@&quot;上海银行·上海银行银联白金卡&quot; ,@&quot;上海银行·贷记IC卡&quot; , @&quot;上海银行·中国旅游卡（IC普卡）&quot; , @&quot;上海银行·中国旅游卡（IC金卡）&quot; , @&quot;上海银行·中国旅游卡（IC白金卡）&quot; , @&quot;上海银行·万事达钻石卡&quot; ,@&quot;上海银行·淘宝IC普卡&quot; , @&quot;北京银行·京卡借记卡&quot; ,@&quot;北京银行·京卡(银联卡)&quot; , @&quot;北京银行·京卡借记卡&quot; ,@&quot;北京银行·京卡&quot; ,@&quot;北京银行·京卡&quot; ,@&quot;北京银行·借记IC卡&quot; , @&quot;北京银行·京卡贵宾金卡&quot; ,@&quot;北京银行·京卡贵宾白金卡&quot; ,@&quot;吉林银行·君子兰一卡通(银联卡)&quot; , @&quot;吉林银行·君子兰卡(银联卡)&quot; , @&quot;吉林银行·长白山金融IC卡&quot; , @&quot;吉林银行·信用卡&quot; ,@&quot;吉林银行·信用卡&quot; ,@&quot;吉林银行·公务卡&quot; ,@&quot;镇江市商业银行·金山灵通卡(银联卡)&quot; , @&quot;镇江市商业银行·金山灵通卡(银联卡)&quot; , @&quot;宁波银行·银联标准卡&quot; ,@&quot;宁波银行·汇通借记卡&quot; ,@&quot;宁波银行·汇通卡(银联卡)&quot; , @&quot;宁波银行·明州卡&quot; ,@&quot;宁波银行·汇通借记卡&quot; ,@&quot;宁波银行·汇通国际卡银联双币卡&quot; ,@&quot;宁波银行·汇通国际卡银联双币卡&quot; ,@&quot;平安银行·新磁条借记卡&quot; ,@&quot;平安银行·平安银行IC借记卡&quot; , @&quot;平安银行·万事顺卡&quot; ,@&quot;平安银行·平安银行借记卡&quot; ,@&quot;平安银行·平安银行借记卡&quot; ,@&quot;平安银行·万事顺借记卡&quot; ,@&quot;焦作市商业银行·月季借记卡(银联卡)&quot; , @&quot;焦作市商业银行·月季城市通(银联卡)&quot; , @&quot;焦作市商业银行·中国旅游卡&quot; ,@&quot;温州银行·金鹿卡&quot; ,@&quot;汉口银行·九通卡(银联卡)&quot; , @&quot;汉口银行·九通卡&quot; ,@&quot;汉口银行·借记卡&quot; ,@&quot;汉口银行·借记卡&quot; ,@&quot;盛京银行·玫瑰卡&quot; ,@&quot;盛京银行·玫瑰IC卡&quot; , @&quot;盛京银行·玫瑰IC卡&quot; , @&quot;盛京银行·玫瑰卡&quot; ,@&quot;盛京银行·玫瑰卡&quot; ,@&quot;盛京银行·玫瑰卡(银联卡)&quot; , @&quot;盛京银行·玫瑰卡(银联卡)&quot; , @&quot;盛京银行·盛京银行公务卡&quot; ,@&quot;洛阳银行·都市一卡通(银联卡)&quot; , @&quot;洛阳银行·都市一卡通(银联卡)&quot; , @&quot;洛阳银行·--&quot; ,@&quot;大连银行·北方明珠卡&quot; ,@&quot;大连银行·人民币借记卡&quot; ,@&quot;大连银行·金融IC借记卡&quot; , @&quot;大连银行·大连市社会保障卡&quot; ,@&quot;大连银行·借记IC卡&quot; , @&quot;大连银行·借记IC卡&quot; , @&quot;大连银行·大连市商业银行贷记卡&quot; , @&quot;大连银行·大连市商业银行贷记卡&quot; , @&quot;大连银行·银联标准公务卡&quot; ,@&quot;苏州市商业银行·姑苏卡&quot; ,@&quot;杭州商业银行·西湖卡&quot; ,@&quot;杭州商业银行·西湖卡&quot; ,@&quot;杭州商业银行·借记IC卡&quot; , @&quot;杭州商业银行·&quot; ,@&quot;南京银行·梅花信用卡公务卡&quot; ,@&quot;南京银行·梅花信用卡商务卡&quot; ,@&quot;南京银行·梅花贷记卡(银联卡)&quot; , @&quot;南京银行·梅花借记卡(银联卡)&quot; , @&quot;南京银行·白金卡&quot; ,@&quot;南京银行·商务卡&quot; ,@&quot;东莞市商业银行·万顺通卡(银联卡)&quot; , @&quot;东莞市商业银行·万顺通卡(银联卡)&quot; , @&quot;东莞市商业银行·万顺通借记卡&quot; , @&quot;东莞市商业银行·社会保障卡&quot; ,@&quot;乌鲁木齐市商业银行·雪莲借记IC卡&quot; , @&quot;乌鲁木齐市商业银行·乌鲁木齐市公务卡&quot; , @&quot;乌鲁木齐市商业银行·福农卡贷记卡&quot; , @&quot;乌鲁木齐市商业银行·福农卡准贷记卡&quot; , @&quot;乌鲁木齐市商业银行·雪莲准贷记卡&quot; , @&quot;乌鲁木齐市商业银行·雪莲贷记卡(银联卡)&quot; , @&quot;乌鲁木齐市商业银行·雪莲借记IC卡&quot; , @&quot;乌鲁木齐市商业银行·雪莲借记卡(银联卡)&quot; , @&quot;乌鲁木齐市商业银行·雪莲卡(银联卡)&quot; , @&quot;绍兴银行·兰花IC借记卡&quot; , @&quot;绍兴银行·社保IC借记卡&quot; , @&quot;绍兴银行·兰花公务卡&quot; ,@&quot;成都商业银行·芙蓉锦程福农卡&quot; ,@&quot;成都商业银行·芙蓉锦程天府通卡&quot; ,@&quot;成都商业银行·锦程卡(银联卡)&quot; , @&quot;成都商业银行·锦程卡金卡&quot; ,@&quot;成都商业银行·锦程卡定活一卡通金卡&quot; , @&quot;成都商业银行·锦程卡定活一卡通&quot; , @&quot;成都商业银行·锦程力诚联名卡&quot; , @&quot;成都商业银行·锦程力诚联名卡&quot; , @&quot;成都商业银行·锦程卡(银联卡)&quot; , @&quot;抚顺银行·借记IC卡&quot; , @&quot;临商银行·借记卡&quot; ,@&quot;宜昌市商业银行·三峡卡(银联卡)&quot; , @&quot;宜昌市商业银行·信用卡(银联卡)&quot; , @&quot;葫芦岛市商业银行·一通卡&quot; ,@&quot;葫芦岛市商业银行·一卡通(银联卡)&quot; , @&quot;天津市商业银行·津卡&quot; ,@&quot;天津市商业银行·津卡贷记卡(银联卡)&quot; , @&quot;天津市商业银行·贷记IC卡&quot; , @&quot;天津市商业银行·--&quot; ,@&quot;天津银行·商务卡&quot; ,@&quot;宁夏银行·宁夏银行公务卡&quot; ,@&quot;宁夏银行·宁夏银行福农贷记卡&quot; ,@&quot;宁夏银行·如意卡(银联卡)&quot; , @&quot;宁夏银行·宁夏银行福农借记卡&quot; , @&quot;宁夏银行·如意借记卡&quot; ,@&quot;宁夏银行·如意IC卡&quot; , @&quot;宁夏银行·宁夏银行如意借记卡&quot; , @&quot;宁夏银行·中国旅游卡&quot; ,@&quot;齐商银行·金达卡(银联卡)&quot; , @&quot;齐商银行·金达借记卡(银联卡)&quot; , @&quot;齐商银行·金达IC卡&quot; , @&quot;徽商银行·黄山卡&quot; ,@&quot;徽商银行·黄山卡&quot; ,@&quot;徽商银行·借记卡&quot; ,@&quot;徽商银行·徽商银行中国旅游卡（安徽）&quot; , @&quot;徽商银行合肥分行·黄山卡&quot; ,@&quot;徽商银行芜湖分行·黄山卡(银联卡)&quot; , @&quot;徽商银行马鞍山分行·黄山卡(银联卡)&quot; , @&quot;徽商银行淮北分行·黄山卡(银联卡)&quot; , @&quot;徽商银行安庆分行·黄山卡(银联卡)&quot; , @&quot;重庆银行·长江卡(银联卡)&quot; , @&quot;重庆银行·长江卡(银联卡)&quot; , @&quot;重庆银行·长江卡&quot; ,@&quot;重庆银行·借记IC卡&quot; , @&quot;哈尔滨银行·丁香一卡通(银联卡)&quot; , @&quot;哈尔滨银行·丁香借记卡(银联卡)&quot; , @&quot;哈尔滨银行·丁香卡&quot; ,@&quot;哈尔滨银行·福农借记卡&quot; ,@&quot;无锡市商业银行·太湖金保卡(银联卡)&quot; , @&quot;丹东银行·借记IC卡&quot; , @&quot;丹东银行·丹东银行公务卡&quot; ,@&quot;兰州银行·敦煌卡&quot; ,@&quot;南昌银行·金瑞卡(银联卡)&quot; , @&quot;南昌银行·南昌银行借记卡&quot; ,@&quot;南昌银行·金瑞卡&quot; ,@&quot;晋商银行·晋龙一卡通&quot; ,@&quot;晋商银行·晋龙一卡通&quot; ,@&quot;晋商银行·晋龙卡(银联卡)&quot; , @&quot;青岛银行·金桥通卡&quot; ,@&quot;青岛银行·金桥卡(银联卡)&quot; , @&quot;青岛银行·金桥卡(银联卡)&quot; , @&quot;青岛银行·金桥卡&quot; ,@&quot;青岛银行·借记IC卡&quot; , @&quot;吉林银行·雾凇卡(银联卡)&quot; , @&quot;吉林银行·雾凇卡(银联卡)&quot; , @&quot;南通商业银行·金桥卡(银联卡)&quot; , @&quot;南通商业银行·金桥卡(银联卡)&quot; , @&quot;日照银行·黄海卡、财富卡借记卡&quot; , @&quot;鞍山银行·千山卡(银联卡)&quot; , @&quot;鞍山银行·千山卡(银联卡)&quot; , @&quot;鞍山银行·千山卡&quot; ,@&quot;青海银行·三江银行卡(银联卡)&quot; , @&quot;青海银行·三江卡&quot; ,@&quot;台州银行·大唐贷记卡&quot; ,@&quot;台州银行·大唐准贷记卡&quot; ,@&quot;台州银行·大唐卡(银联卡)&quot; , @&quot;台州银行·大唐卡&quot; ,@&quot;台州银行·借记卡&quot; ,@&quot;台州银行·公务卡&quot; ,@&quot;泉州银行·海峡银联卡(银联卡)&quot; , @&quot;泉州银行·海峡储蓄卡&quot; ,@&quot;泉州银行·海峡银联卡(银联卡)&quot; , @&quot;泉州银行·海峡卡&quot; ,@&quot;泉州银行·公务卡&quot; ,@&quot;昆明商业银行·春城卡(银联卡)&quot; , @&quot;昆明商业银行·春城卡(银联卡)&quot; , @&quot;昆明商业银行·富滇IC卡（复合卡）&quot; , @&quot;阜新银行·借记IC卡&quot; , @&quot;嘉兴银行·南湖借记卡(银联卡)&quot; , @&quot;廊坊银行·白金卡&quot; ,@&quot;廊坊银行·金卡&quot; ,@&quot;廊坊银行·银星卡(银联卡)&quot; , @&quot;廊坊银行·龙凤呈祥卡&quot; ,@&quot;内蒙古银行·百灵卡(银联卡)&quot; , @&quot;内蒙古银行·成吉思汗卡&quot; ,@&quot;湖州市商业银行·百合卡&quot; ,@&quot;湖州市商业银行·&quot; ,@&quot;沧州银行·狮城卡&quot; ,@&quot;南宁市商业银行·桂花卡(银联卡)&quot; , @&quot;包商银行·雄鹰卡(银联卡)&quot; , @&quot;包商银行·包头市商业银行借记卡&quot; , @&quot;包商银行·雄鹰贷记卡&quot; ,@&quot;包商银行·包商银行内蒙古自治区公务卡&quot; , @&quot;包商银行·贷记卡&quot; ,@&quot;包商银行·借记卡&quot; ,@&quot;连云港市商业银行·金猴神通借记卡&quot; ,@&quot;威海商业银行·通达卡(银联卡)&quot; , @&quot;威海市商业银行·通达借记IC卡&quot; , @&quot;攀枝花市商业银行·攀枝花卡(银联卡)&quot; , @&quot;攀枝花市商业银行·攀枝花卡&quot; ,@&quot;绵阳市商业银行·科技城卡(银联卡)&quot; , @&quot;泸州市商业银行·酒城卡(银联卡)&quot; , @&quot;泸州市商业银行·酒城IC卡&quot; , @&quot;大同市商业银行·云冈卡(银联卡)&quot; , @&quot;三门峡银行·天鹅卡(银联卡)&quot; , @&quot;广东南粤银行·南珠卡(银联卡)&quot; , @&quot;张家口市商业银行·好运IC借记卡&quot; , @&quot;桂林市商业银行·漓江卡(银联卡)&quot; , @&quot;龙江银行·福农借记卡&quot; ,@&quot;龙江银行·联名借记卡&quot; ,@&quot;龙江银行·福农借记卡&quot; ,@&quot;龙江银行·龙江IC卡&quot; , @&quot;龙江银行·社会保障卡&quot; ,@&quot;龙江银行·--&quot; ,@&quot;江苏长江商业银行·长江卡&quot; ,@&quot;徐州市商业银行·彭城借记卡(银联卡)&quot; , @&quot;南充市商业银行·借记IC卡&quot; , @&quot;南充市商业银行·熊猫团团卡&quot; ,@&quot;莱商银行·银联标准卡&quot; ,@&quot;莱芜银行·金凤卡&quot; ,@&quot;莱商银行·借记IC卡&quot; , @&quot;德阳银行·锦程卡定活一卡通&quot; ,@&quot;德阳银行·锦程卡定活一卡通金卡&quot; ,@&quot;德阳银行·锦程卡定活一卡通&quot; ,@&quot;唐山市商业银行·唐山市城通卡&quot; ,@&quot;曲靖市商业银行·珠江源卡&quot; ,@&quot;曲靖市商业银行·珠江源IC卡&quot; , @&quot;温州银行·金鹿信用卡&quot; ,@&quot;温州银行·金鹿信用卡&quot; ,@&quot;温州银行·金鹿公务卡&quot; ,@&quot;温州银行·贷记IC卡&quot; , @&quot;汉口银行·汉口银行贷记卡&quot; ,@&quot;汉口银行·汉口银行贷记卡&quot; ,@&quot;汉口银行·九通香港旅游贷记普卡&quot; ,@&quot;汉口银行·九通香港旅游贷记金卡&quot; ,@&quot;汉口银行·贷记卡&quot; ,@&quot;汉口银行·九通公务卡&quot; ,@&quot;江苏银行·聚宝借记卡&quot; ,@&quot;江苏银行·月季卡&quot; ,@&quot;江苏银行·紫金卡&quot; ,@&quot;江苏银行·绿扬卡(银联卡)&quot; , @&quot;江苏银行·月季卡(银联卡)&quot; , @&quot;江苏银行·九州借记卡(银联卡)&quot; , @&quot;江苏银行·月季卡(银联卡)&quot; , @&quot;江苏银行·聚宝惠民福农卡&quot; ,@&quot;江苏银行·江苏银行聚宝IC借记卡&quot; , @&quot;江苏银行·聚宝IC借记卡VIP卡&quot; , @&quot;长治市商业银行·长治商行银联晋龙卡&quot; , @&quot;承德市商业银行·热河卡&quot; ,@&quot;承德银行·借记IC卡&quot; , @&quot;德州银行·长河借记卡&quot; ,@&quot;德州银行·--&quot; ,@&quot;遵义市商业银行·社保卡&quot; ,@&quot;遵义市商业银行·尊卡&quot; ,@&quot;邯郸市商业银行·邯银卡&quot; ,@&quot;邯郸市商业银行·邯郸银行贵宾IC借记卡&quot; , @&quot;安顺市商业银行·黄果树福农卡&quot; , @&quot;安顺市商业银行·黄果树借记卡&quot; , @&quot;江苏银行·紫金信用卡(公务卡)&quot; , @&quot;江苏银行·紫金信用卡&quot; ,@&quot;江苏银行·天翼联名信用卡&quot; ,@&quot;平凉市商业银行·广成卡&quot; ,@&quot;玉溪市商业银行·红塔卡&quot; ,@&quot;玉溪市商业银行·红塔卡&quot; ,@&quot;浙江民泰商业银行·金融IC卡&quot; , @&quot;浙江民泰商业银行·民泰借记卡&quot; , @&quot;浙江民泰商业银行·金融IC卡C卡&quot; , @&quot;浙江民泰商业银行·银联标准普卡金卡&quot; , @&quot;浙江民泰商业银行·商惠通&quot; ,@&quot;上饶市商业银行·三清山卡&quot; ,@&quot;东营银行·胜利卡&quot; ,@&quot;泰安市商业银行·岱宗卡&quot; ,@&quot;泰安市商业银行·市民一卡通&quot; ,@&quot;浙江稠州商业银行·义卡&quot; ,@&quot;浙江稠州商业银行·义卡借记IC卡&quot; , @&quot;浙江稠州商业银行·公务卡&quot; ,@&quot;自贡市商业银行·借记IC卡&quot; , @&quot;自贡市商业银行·锦程卡&quot; ,@&quot;鄂尔多斯银行·天骄公务卡&quot; ,@&quot;鹤壁银行·鹤卡&quot; ,@&quot;许昌银行·连城卡&quot; ,@&quot;铁岭银行·龙凤卡&quot; ,@&quot;乐山市商业银行·大福卡&quot; ,@&quot;乐山市商业银行·--&quot; ,@&quot;长安银行·长长卡&quot; ,@&quot;长安银行·借记IC卡&quot; , @&quot;重庆三峡银行·财富人生卡&quot; ,@&quot;重庆三峡银行·借记卡&quot; ,@&quot;石嘴山银行·麒麟借记卡&quot; ,@&quot;石嘴山银行·麒麟借记卡&quot; ,@&quot;石嘴山银行·麒麟公务卡&quot; ,@&quot;盘锦市商业银行·鹤卡&quot; ,@&quot;盘锦市商业银行·盘锦市商业银行鹤卡&quot; , @&quot;平顶山银行·平顶山银行公务卡&quot; , @&quot;朝阳银行·鑫鑫通卡&quot; ,@&quot;朝阳银行·朝阳银行福农卡&quot; ,@&quot;朝阳银行·红山卡&quot; ,@&quot;宁波东海银行·绿叶卡&quot; ,@&quot;遂宁市商业银行·锦程卡&quot; ,@&quot;遂宁是商业银行·金荷卡&quot; ,@&quot;保定银行·直隶卡&quot; ,@&quot;保定银行·直隶卡&quot; ,@&quot;凉山州商业银行·锦程卡&quot; ,@&quot;凉山州商业银行·金凉山卡&quot; ,@&quot;漯河银行·福卡&quot; ,@&quot;漯河银行·福源卡&quot; ,@&quot;漯河银行·福源公务卡&quot; ,@&quot;达州市商业银行·锦程卡&quot; ,@&quot;新乡市商业银行·新卡&quot; ,@&quot;晋中银行·九州方圆借记卡&quot; ,@&quot;晋中银行·九州方圆卡&quot; ,@&quot;驻马店银行·驿站卡&quot; ,@&quot;驻马店银行·驿站卡&quot; ,@&quot;驻马店银行·公务卡&quot; ,@&quot;衡水银行·金鼎卡&quot; ,@&quot;衡水银行·借记IC卡&quot; , @&quot;周口银行·如愿卡&quot; ,@&quot;周口银行·公务卡&quot; ,@&quot;阳泉市商业银行·金鼎卡&quot; ,@&quot;阳泉市商业银行·金鼎卡&quot; ,@&quot;宜宾市商业银行·锦程卡&quot; ,@&quot;宜宾市商业银行·借记IC卡&quot; , @&quot;库尔勒市商业银行·孔雀胡杨卡&quot; , @&quot;雅安市商业银行·锦城卡&quot; ,@&quot;雅安市商业银行·--&quot; ,@&quot;安阳银行·安鼎卡&quot; ,@&quot;信阳银行·信阳卡&quot; ,@&quot;信阳银行·公务卡&quot; ,@&quot;信阳银行·信阳卡&quot; ,@&quot;华融湘江银行·华融卡&quot; ,@&quot;华融湘江银行·华融卡&quot; ,@&quot;营口沿海银行·祥云借记卡&quot; ,@&quot;景德镇商业银行·瓷都卡&quot; ,@&quot;哈密市商业银行·瓜香借记卡&quot; ,@&quot;湖北银行·金牛卡&quot; ,@&quot;湖北银行·汉江卡&quot; ,@&quot;湖北银行·借记卡&quot; ,@&quot;湖北银行·三峡卡&quot; ,@&quot;湖北银行·至尊卡&quot; ,@&quot;湖北银行·金融IC卡&quot; , @&quot;西藏银行·借记IC卡&quot; , @&quot;新疆汇和银行·汇和卡&quot; ,@&quot;广东华兴银行·借记卡&quot; ,@&quot;广东华兴银行·华兴银联公司卡&quot; ,@&quot;广东华兴银行·华兴联名IC卡&quot; , @&quot;广东华兴银行·华兴金融IC借记卡&quot; , @&quot;濮阳银行·龙翔卡&quot; ,@&quot;宁波通商银行·借记卡&quot; ,@&quot;甘肃银行·神舟兴陇借记卡&quot; ,@&quot;甘肃银行·甘肃银行神州兴陇IC卡&quot; , @&quot;枣庄银行·借记IC卡&quot; , @&quot;本溪市商业银行·借记卡&quot; ,@&quot;盛京银行·医保卡&quot; ,@&quot;上海农商银行·如意卡(银联卡)&quot; , @&quot;上海农商银行·如意卡(银联卡)&quot; , @&quot;上海农商银行·鑫通卡&quot; ,@&quot;上海农商银行·国际如意卡&quot; ,@&quot;上海农商银行·借记IC卡&quot; , @&quot;常熟市农村商业银行·粒金贷记卡(银联卡)&quot; , @&quot;常熟市农村商业银行·公务卡&quot; ,@&quot;常熟市农村商业银行·粒金准贷卡&quot; ,@&quot;常熟农村商业银行·粒金借记卡(银联卡)&quot; , @&quot;常熟农村商业银行·粒金IC卡&quot; , @&quot;常熟农村商业银行·粒金卡&quot; ,@&quot;深圳农村商业银行·信通卡(银联卡)&quot; , @&quot;深圳农村商业银行·信通商务卡(银联卡)&quot; , @&quot;深圳农村商业银行·信通卡&quot; ,@&quot;深圳农村商业银行·信通商务卡&quot; ,@&quot;广州农村商业银行·福农太阳卡&quot; ,@&quot;广东南海农村商业银行·盛通卡&quot; ,@&quot;广东南海农村商业银行·盛通卡(银联卡)&quot; , @&quot;佛山顺德农村商业银行·恒通卡(银联卡)&quot; , @&quot;佛山顺德农村商业银行·恒通卡&quot; , @&quot;佛山顺德农村商业银行·恒通卡(银联卡)&quot; , @&quot;江阴农村商业银行·暨阳公务卡&quot; , @&quot;江阴市农村商业银行·合作贷记卡(银联卡)&quot; , @&quot;江阴农村商业银行·合作借记卡&quot; , @&quot;江阴农村商业银行·合作卡(银联卡)&quot; , @&quot;江阴农村商业银行·暨阳卡&quot; ,@&quot;重庆农村商业银行·江渝借记卡VIP卡&quot; , @&quot;重庆农村商业银行·江渝IC借记卡&quot; , @&quot;重庆农村商业银行·江渝乡情福农卡&quot; , @&quot;东莞农村商业银行·信通卡(银联卡)&quot; , @&quot;东莞农村商业银行·信通卡(银联卡)&quot; , @&quot;东莞农村商业银行·信通信用卡&quot; , @&quot;东莞农村商业银行·信通借记卡&quot; , @&quot;东莞农村商业银行·贷记IC卡&quot; , @&quot;张家港农村商业银行·一卡通(银联卡)&quot; , @&quot;张家港农村商业银行·一卡通(银联卡)&quot; , @&quot;张家港农村商业银行·&quot; ,@&quot;北京农村商业银行·信通卡&quot; ,@&quot;北京农村商业银行·惠通卡&quot; ,@&quot;北京农村商业银行·凤凰福农卡&quot; ,@&quot;北京农村商业银行·惠通卡&quot; ,@&quot;北京农村商业银行·中国旅行卡&quot; ,@&quot;北京农村商业银行·凤凰卡&quot; ,@&quot;天津农村商业银行·吉祥商联IC卡&quot; , @&quot;天津农村商业银行·信通借记卡(银联卡)&quot; , @&quot;天津农村商业银行·借记IC卡&quot;, @&quot;鄞州农村合作银行·蜜蜂借记卡(银联卡)&quot; , @&quot;宁波鄞州农村合作银行·蜜蜂电子钱包(IC)&quot; , @&quot;宁波鄞州农村合作银行·蜜蜂IC借记卡&quot; , @&quot;宁波鄞州农村合作银行·蜜蜂贷记IC卡&quot; , @&quot;宁波鄞州农村合作银行·蜜蜂贷记卡&quot;, @&quot;宁波鄞州农村合作银行·公务卡&quot; ,@&quot;成都农村商业银行·福农卡&quot; ,@&quot;成都农村商业银行·福农卡&quot; ,@&quot;珠海农村商业银行·信通卡(银联卡)&quot; , @&quot;太仓农村商业银行·郑和卡(银联卡)&quot; , @&quot;太仓农村商业银行·郑和IC借记卡&quot; , @&quot;无锡农村商业银行·金阿福&quot; ,@&quot;无锡农村商业银行·借记IC卡&quot; , @&quot;黄河农村商业银行·黄河卡&quot; ,@&quot;黄河农村商业银行·黄河富农卡福农卡&quot; , @&quot;黄河农村商业银行·借记IC卡&quot; , @&quot;天津滨海农村商业银行·四海通卡&quot;, @&quot;天津滨海农村商业银行·四海通e芯卡&quot; , @&quot;武汉农村商业银行·汉卡&quot; ,@&quot;武汉农村商业银行·汉卡&quot; ,@&quot;武汉农村商业银行·中国旅游卡&quot; ,@&quot;江南农村商业银行·阳湖卡(银联卡)&quot; , @&quot;江南农村商业银行·天天红火卡&quot;, @&quot;江南农村商业银行·借记IC卡&quot; , @&quot;海口联合农村商业银行·海口联合农村商业银行合卡&quot; , @&quot;湖北嘉鱼吴江村镇银行·垂虹卡&quot; , @&quot;福建建瓯石狮村镇银行·玉竹卡&quot; , @&quot;浙江平湖工银村镇银行·金平卡&quot; , @&quot;重庆璧山工银村镇银行·翡翠卡&quot;, @&quot;重庆农村商业银行·银联标准贷记卡&quot; ,@&quot;重庆农村商业银行·公务卡&quot; ,@&quot;南阳村镇银行·玉都卡&quot; ,@&quot;晋中市榆次融信村镇银行·魏榆卡&quot; ,@&quot;三水珠江村镇银行·珠江太阳卡&quot; ,@&quot;东营莱商村镇银行·绿洲卡&quot; ,@&quot;建设银行·单位结算卡&quot; ,@&quot;玉溪市商业银行·红塔卡&quot;]; //BIN号 NSArray* bankBin = @[ @&quot;621098&quot;, @&quot;622150&quot;, @&quot;622151&quot;, @&quot;622181&quot;, @&quot;622188&quot;, @&quot;955100&quot;, @&quot;621095&quot;, @&quot;620062&quot;, @&quot;621285&quot;, @&quot;621798&quot;, @&quot;621799&quot;, @&quot;621797&quot;, @&quot;620529&quot;, @&quot;622199&quot;, @&quot;621096&quot;, @&quot;621622&quot;, @&quot;623219&quot;, @&quot;621674&quot;, @&quot;623218&quot;, @&quot;621599&quot;,@&quot;370246&quot;, @&quot;370248&quot;, @&quot;370249&quot;, @&quot;427010&quot;, @&quot;427018&quot;, @&quot;427019&quot;, @&quot;427020&quot;, @&quot;427029&quot;, @&quot;427030&quot;, @&quot;427039&quot;, @&quot;370247&quot;, @&quot;438125&quot;, @&quot;438126&quot;, @&quot;451804&quot;,@&quot;451810&quot;, @&quot;451811&quot;, @&quot;458071&quot;, @&quot;489734&quot;, @&quot;489735&quot;, @&quot;489736&quot;, @&quot;510529&quot;, @&quot;427062&quot;, @&quot;524091&quot;, @&quot;427064&quot;, @&quot;530970&quot;, @&quot;530990&quot;, @&quot;558360&quot;, @&quot;620200&quot;, @&quot;620302&quot;, @&quot;620402&quot;, @&quot;620403&quot; , @&quot;620404&quot;, @&quot;524047&quot; , @&quot;620406&quot; , @&quot;620407&quot;, @&quot;525498&quot; , @&quot;620409&quot; , @&quot;620410&quot; , @&quot;620411&quot; ,@&quot;620412&quot; ,@&quot;620502&quot;, @&quot;620503&quot;, @&quot;620405&quot;, @&quot;620408&quot;, @&quot;620512&quot;, @&quot;620602&quot;, @&quot;620604&quot;, @&quot;620607&quot;, @&quot;620611&quot;, @&quot;620612&quot;, @&quot;620704&quot;, @&quot;620706&quot;, @&quot;620707&quot;, @&quot;620708&quot;, @&quot;620709&quot;, @&quot;620710&quot;, @&quot;620609&quot;, @&quot;620712&quot; , @&quot;620713&quot; , @&quot;620714&quot; , @&quot;620802&quot; , @&quot;620711&quot; , @&quot;620904&quot; , @&quot;620905&quot; , @&quot;621001&quot; , @&quot;620902&quot; , @&quot;621103&quot; , @&quot;621105&quot; , @&quot;621106&quot; , @&quot;621107&quot; , @&quot;621102&quot; , @&quot;621203&quot; , @&quot;621204&quot; , @&quot;621205&quot; , @&quot;621206&quot; , @&quot;621207&quot; , @&quot;621208&quot; , @&quot;621209&quot; , @&quot;621210&quot; , @&quot;621302&quot; , @&quot;621303&quot; , @&quot;621202&quot; , @&quot;621305&quot; , @&quot;621306&quot; , @&quot;621307&quot; , @&quot;621309&quot; , @&quot;621311&quot; , @&quot;621313&quot; , @&quot;621211&quot; , @&quot;621315&quot; , @&quot;621304&quot; , @&quot;621402&quot; , @&quot;621404&quot; , @&quot;621405&quot; , @&quot;621406&quot; , @&quot;621407&quot; , @&quot;621408&quot; , @&quot;621409&quot; , @&quot;621410&quot; , @&quot;621502&quot; , @&quot;621317&quot; , @&quot;621511&quot; , @&quot;621602&quot; , @&quot;621603&quot; , @&quot;621604&quot; , @&quot;621605&quot; , @&quot;621608&quot; , @&quot;621609&quot; , @&quot;621610&quot; , @&quot;621611&quot; , @&quot;621612&quot; , @&quot;621613&quot; , @&quot;621614&quot; , @&quot;621615&quot; , @&quot;621616&quot; , @&quot;621617&quot; , @&quot;621607&quot; , @&quot;621606&quot; , @&quot;621804&quot; , @&quot;621807&quot; , @&quot;621813&quot; , @&quot;621814&quot; , @&quot;621817&quot; , @&quot;621901&quot; , @&quot;621904&quot; , @&quot;621905&quot; , @&quot;621906&quot; , @&quot;621907&quot; , @&quot;621908&quot; , @&quot;621909&quot; , @&quot;621910&quot; , @&quot;621911&quot; , @&quot;621912&quot; , @&quot;621913&quot; , @&quot;621915&quot; , @&quot;622002&quot; , @&quot;621903&quot; , @&quot;622004&quot; , @&quot;622005&quot; , @&quot;622006&quot; , @&quot;622007&quot; , @&quot;622008&quot; , @&quot;622010&quot; , @&quot;622011&quot; , @&quot;622012&quot; , @&quot;621914&quot; , @&quot;622015&quot; , @&quot;622016&quot; , @&quot;622003&quot; , @&quot;622018&quot; , @&quot;622019&quot; , @&quot;622020&quot; , @&quot;622102&quot; , @&quot;622103&quot; , @&quot;622104&quot; , @&quot;622105&quot; , @&quot;622013&quot; , @&quot;622111&quot; , @&quot;622114&quot; , @&quot;622200&quot; , @&quot;622017&quot; , @&quot;622202&quot; , @&quot;622203&quot; , @&quot;622208&quot; , @&quot;622210&quot; , @&quot;622211&quot; , @&quot;622212&quot; , @&quot;622213&quot; , @&quot;622214&quot; , @&quot;622110&quot; , @&quot;622220&quot; , @&quot;622223&quot; , @&quot;622225&quot; , @&quot;622229&quot; , @&quot;622230&quot; , @&quot;622231&quot; , @&quot;622232&quot; , @&quot;622233&quot; , @&quot;622234&quot; , @&quot;622235&quot; , @&quot;622237&quot; , @&quot;622215&quot; , @&quot;622239&quot; , @&quot;622240&quot; , @&quot;622245&quot; , @&quot;622224&quot; , @&quot;622303&quot; , @&quot;622304&quot; , @&quot;622305&quot; , @&quot;622306&quot; , @&quot;622307&quot; , @&quot;622308&quot; , @&quot;622309&quot; , @&quot;622238&quot; , @&quot;622314&quot; , @&quot;622315&quot; , @&quot;622317&quot; , @&quot;622302&quot; , @&quot;622402&quot; , @&quot;622403&quot; , @&quot;622404&quot; , @&quot;622313&quot; , @&quot;622504&quot; , @&quot;622505&quot; , @&quot;622509&quot; , @&quot;622513&quot; , @&quot;622517&quot; , @&quot;622502&quot; , @&quot;622604&quot; , @&quot;622605&quot; , @&quot;622606&quot; , @&quot;622510&quot; , @&quot;622703&quot; , @&quot;622715&quot; , @&quot;622806&quot; , @&quot;622902&quot; , @&quot;622903&quot; , @&quot;622706&quot; , @&quot;623002&quot; , @&quot;623006&quot; , @&quot;623008&quot; , @&quot;623011&quot; , @&quot;623012&quot; , @&quot;622904&quot; , @&quot;623015&quot; , @&quot;623100&quot; , @&quot;623202&quot; , @&quot;623301&quot; , @&quot;623400&quot; , @&quot;623500&quot; , @&quot;623602&quot; , @&quot;623803&quot; , @&quot;623901&quot; , @&quot;623014&quot; , @&quot;624100&quot; , @&quot;624200&quot; , @&quot;624301&quot; , @&quot;624402&quot; , @&quot;62451804&quot; , @&quot;62451810&quot; , @&quot;62451811&quot; , @&quot;62458071&quot; , @&quot;623700&quot; , @&quot;628288&quot; , @&quot;624000&quot; , @&quot;628286&quot; , @&quot;622206&quot; , @&quot;621225&quot; , @&quot;526836&quot; , @&quot;513685&quot; , @&quot;543098&quot; , @&quot;458441&quot; , @&quot;620058&quot; , @&quot;621281&quot; , @&quot;622246&quot; , @&quot;900000&quot; , @&quot;544210&quot; , @&quot;548943&quot; , @&quot;370267&quot; , @&quot;621558&quot; , @&quot;621559&quot; , @&quot;621722&quot; , @&quot;621723&quot; , @&quot;620086&quot; , @&quot;621226&quot; , @&quot;402791&quot; , @&quot;427028&quot; , @&quot;427038&quot; , @&quot;548259&quot; , @&quot;356879&quot; , @&quot;356880&quot; , @&quot;356881&quot; , @&quot;356882&quot; , @&quot;528856&quot; , @&quot;621618&quot; , @&quot;620516&quot; , @&quot;621227&quot; , @&quot;621721&quot; , @&quot;900010&quot; , @&quot;625330&quot; , @&quot;625331&quot; , @&quot;625332&quot; , @&quot;623062&quot; , @&quot;622236&quot; , @&quot;621670&quot; , @&quot;524374&quot; , @&quot;550213&quot; , @&quot;374738&quot; , @&quot;374739&quot; , @&quot;621288&quot; , @&quot;625708&quot; , @&quot;625709&quot; , @&quot;622597&quot; , @&quot;622599&quot; , @&quot;360883&quot; , @&quot;360884&quot; , @&quot;625865&quot; , @&quot;625866&quot; , @&quot;625899&quot; , @&quot;621376&quot; , @&quot;620054&quot; , @&quot;620142&quot; , @&quot;621428&quot; , @&quot;625939&quot; , @&quot;621434&quot; , @&quot;625987&quot; , @&quot;621761&quot; , @&quot;621749&quot; , @&quot;620184&quot; , @&quot;621300&quot; , @&quot;621378&quot; , @&quot;625114&quot; , @&quot;622159&quot; , @&quot;621720&quot; , @&quot;625021&quot; , @&quot;625022&quot; , @&quot;621379&quot; , @&quot;620114&quot; , @&quot;620146&quot; , @&quot;621724&quot; , @&quot;625918&quot; , @&quot;621371&quot; , @&quot;620143&quot; , @&quot;620149&quot; , @&quot;621414&quot; , @&quot;625914&quot; , @&quot;621375&quot; , @&quot;620187&quot; , @&quot;621433&quot; , @&quot;625986&quot; , @&quot;621370&quot; , @&quot;625925&quot; , @&quot;622926&quot; , @&quot;622927&quot; , @&quot;622928&quot; , @&quot;622929&quot; , @&quot;622930&quot; , @&quot;622931&quot; , @&quot;620124&quot; , @&quot;620183&quot; , @&quot;620561&quot; , @&quot;625116&quot; , @&quot;622227&quot; , @&quot;621372&quot; , @&quot;621464&quot; , @&quot;625942&quot; , @&quot;622158&quot; , @&quot;625917&quot; , @&quot;621765&quot; , @&quot;620094&quot; , @&quot;620186&quot; , @&quot;621719&quot; , @&quot;621719&quot; , @&quot;621750&quot; , @&quot;621377&quot; , @&quot;620148&quot; , @&quot;620185&quot; , @&quot;621374&quot; , @&quot;621731&quot; , @&quot;621781&quot; , @&quot;552599&quot; , @&quot;623206&quot; , @&quot;621671&quot; , @&quot;620059&quot; , @&quot;403361&quot; , @&quot;404117&quot; , @&quot;404118&quot; , @&quot;404119&quot; , @&quot;404120&quot; , @&quot;404121&quot; , @&quot;463758&quot; , @&quot;514027&quot; , @&quot;519412&quot; , @&quot;519413&quot; , @&quot;520082&quot; , @&quot;520083&quot; , @&quot;558730&quot; , @&quot;621282&quot; , @&quot;621336&quot; , @&quot;621619&quot; , @&quot;622821&quot; , @&quot;622822&quot; , @&quot;622823&quot; , @&quot;622824&quot; , @&quot;622825&quot; , @&quot;622826&quot; , @&quot;622827&quot; , @&quot;622828&quot; , @&quot;622836&quot; , @&quot;622837&quot; , @&quot;622840&quot; , @&quot;622841&quot; , @&quot;622843&quot; , @&quot;622844&quot; , @&quot;622845&quot; , @&quot;622846&quot; , @&quot;622847&quot; , @&quot;622848&quot; , @&quot;622849&quot; , @&quot;623018&quot; , @&quot;625996&quot; , @&quot;625997&quot; , @&quot;625998&quot; , @&quot;628268&quot; , @&quot;625826&quot; , @&quot;625827&quot; , @&quot;548478&quot; , @&quot;544243&quot; , @&quot;622820&quot; , @&quot;622830&quot; , @&quot;622838&quot; , @&quot;625336&quot; , @&quot;628269&quot; , @&quot;620501&quot; , @&quot;621660&quot; , @&quot;621661&quot; , @&quot;621662&quot; , @&quot;621663&quot; , @&quot;621665&quot; , @&quot;621667&quot; , @&quot;621668&quot; , @&quot;621669&quot; , @&quot;621666&quot; , @&quot;625908&quot; , @&quot;625910&quot; , @&quot;625909&quot; , @&quot;356833&quot; , @&quot;356835&quot; , @&quot;409665&quot; , @&quot;409666&quot; , @&quot;409668&quot; , @&quot;409669&quot; , @&quot;409670&quot; , @&quot;409671&quot; , @&quot;409672&quot; , @&quot;456351&quot; , @&quot;512315&quot; , @&quot;512316&quot; , @&quot;512411&quot; , @&quot;512412&quot; , @&quot;514957&quot; , @&quot;409667&quot; , @&quot;518378&quot; , @&quot;518379&quot; , @&quot;518474&quot; , @&quot;518475&quot; , @&quot;518476&quot; , @&quot;438088&quot; , @&quot;524865&quot; , @&quot;525745&quot; , @&quot;525746&quot; , @&quot;547766&quot; , @&quot;552742&quot; , @&quot;553131&quot; , @&quot;558868&quot; , @&quot;514958&quot; , @&quot;622752&quot; , @&quot;622753&quot; , @&quot;622755&quot; , @&quot;524864&quot; , @&quot;622757&quot; , @&quot;622758&quot; , @&quot;622759&quot; , @&quot;622760&quot; , @&quot;622761&quot; , @&quot;622762&quot; , @&quot;622763&quot; , @&quot;601382&quot; , @&quot;622756&quot; , @&quot;628388&quot; , @&quot;621256&quot; , @&quot;621212&quot; , @&quot;620514&quot; , @&quot;622754&quot; , @&quot;622764&quot; , @&quot;518377&quot; , @&quot;622765&quot; , @&quot;622788&quot; , @&quot;621283&quot; , @&quot;620061&quot; , @&quot;621725&quot; , @&quot;620040&quot; , @&quot;558869&quot; , @&quot;621330&quot; , @&quot;621331&quot; , @&quot;621332&quot; , @&quot;621333&quot; , @&quot;621297&quot; , @&quot;377677&quot; , @&quot;621568&quot; , @&quot;621569&quot; , @&quot;625905&quot; , @&quot;625906&quot; , @&quot;625907&quot; , @&quot;628313&quot; , @&quot;625333&quot; , @&quot;628312&quot; , @&quot;623208&quot; , @&quot;621620&quot; , @&quot;621756&quot; , @&quot;621757&quot; , @&quot;621758&quot; , @&quot;621759&quot; , @&quot;621785&quot; , @&quot;621786&quot; , @&quot;621787&quot; , @&quot;621788&quot; , @&quot;621789&quot; , @&quot;621790&quot; , @&quot;621672&quot; , @&quot;625337&quot; , @&quot;625338&quot; , @&quot;625568&quot; , @&quot;621648&quot; , @&quot;621248&quot; , @&quot;621249&quot; , @&quot;622750&quot; , @&quot;622751&quot; , @&quot;622771&quot; , @&quot;622772&quot; , @&quot;622770&quot; , @&quot;625145&quot; , @&quot;620531&quot; , @&quot;620210&quot; , @&quot;620211&quot; , @&quot;622479&quot; , @&quot;622480&quot; , @&quot;622273&quot; , @&quot;622274&quot; , @&quot;621231&quot; , @&quot;621638&quot; , @&quot;621334&quot; , @&quot;625140&quot; , @&quot;621395&quot; , @&quot;622725&quot; , @&quot;622728&quot; , @&quot;621284&quot; , @&quot;421349&quot; , @&quot;434061&quot; , @&quot;434062&quot; , @&quot;436728&quot; , @&quot;436742&quot; , @&quot;453242&quot; , @&quot;491031&quot; , @&quot;524094&quot; , @&quot;526410&quot; , @&quot;544033&quot; , @&quot;552245&quot; , @&quot;589970&quot; , @&quot;620060&quot; , @&quot;621080&quot; , @&quot;621081&quot; , @&quot;621466&quot; , @&quot;621467&quot; , @&quot;621488&quot; , @&quot;621499&quot; , @&quot;621598&quot; , @&quot;621621&quot; , @&quot;621700&quot; , @&quot;622280&quot; , @&quot;622700&quot; , @&quot;622707&quot; , @&quot;622966&quot; , @&quot;622988&quot; , @&quot;625955&quot; , @&quot;625956&quot; , @&quot;553242&quot; , @&quot;621082&quot; , @&quot;621673&quot; , @&quot;623211&quot; , @&quot;356896&quot; , @&quot;356899&quot; , @&quot;356895&quot; , @&quot;436718&quot; , @&quot;436738&quot; , @&quot;436745&quot; , @&quot;436748&quot; , @&quot;489592&quot; , @&quot;531693&quot; , @&quot;532450&quot; , @&quot;532458&quot; , @&quot;544887&quot; , @&quot;552801&quot; , @&quot;557080&quot; , @&quot;558895&quot; , @&quot;559051&quot; , @&quot;622166&quot; , @&quot;622168&quot; , @&quot;622708&quot; , @&quot;625964&quot; , @&quot;625965&quot; , @&quot;625966&quot; , @&quot;628266&quot; , @&quot;628366&quot; , @&quot;625362&quot; , @&quot;625363&quot; , @&quot;628316&quot; , @&quot;628317&quot; , @&quot;620021&quot; , @&quot;620521&quot; , @&quot;405512&quot; , @&quot;601428&quot; , @&quot;405512&quot; , @&quot;434910&quot; , @&quot;458123&quot; , @&quot;458124&quot; , @&quot;520169&quot; , @&quot;522964&quot; , @&quot;552853&quot; , @&quot;601428&quot; , @&quot;622250&quot; , @&quot;622251&quot; , @&quot;521899&quot; , @&quot;622254&quot; , @&quot;622255&quot; , @&quot;622256&quot; , @&quot;622257&quot; , @&quot;622258&quot; , @&quot;622259&quot; , @&quot;622253&quot; , @&quot;622261&quot; , @&quot;622284&quot; , @&quot;622656&quot; , @&quot;628216&quot; , @&quot;622252&quot; , @&quot;66405512&quot; , @&quot;622260&quot; , @&quot;66601428&quot; , @&quot;955590&quot; , @&quot;955591&quot; , @&quot;955592&quot; , @&quot;955593&quot; , @&quot;628218&quot; , @&quot;622262&quot; , @&quot;621069&quot; , @&quot;620013&quot; , @&quot;625028&quot; , @&quot;625029&quot; , @&quot;621436&quot; , @&quot;621002&quot; , @&quot;621335&quot; , @&quot;433670&quot; , @&quot;433680&quot; , @&quot;442729&quot; , @&quot;442730&quot; , @&quot;620082&quot; , @&quot;622690&quot; , @&quot;622691&quot; , @&quot;622692&quot; , @&quot;622696&quot; , @&quot;622698&quot; , @&quot;622998&quot; , @&quot;622999&quot; , @&quot;433671&quot; , @&quot;968807&quot; , @&quot;968808&quot; , @&quot;968809&quot; , @&quot;621771&quot; , @&quot;621767&quot; , @&quot;621768&quot; , @&quot;621770&quot; , @&quot;621772&quot; , @&quot;621773&quot; , @&quot;620527&quot; , @&quot;356837&quot; , @&quot;356838&quot; , @&quot;486497&quot; , @&quot;622660&quot; , @&quot;622662&quot; , @&quot;622663&quot; , @&quot;622664&quot; , @&quot;622665&quot; , @&quot;622666&quot; , @&quot;622667&quot; , @&quot;622669&quot; , @&quot;622670&quot; , @&quot;622671&quot; , @&quot;622672&quot; , @&quot;622668&quot; , @&quot;622661&quot; , @&quot;622674&quot; , @&quot;622673&quot; , @&quot;620518&quot; , @&quot;621489&quot; , @&quot;621492&quot; , @&quot;620535&quot; , @&quot;623156&quot; , @&quot;621490&quot; , @&quot;621491&quot; , @&quot;620085&quot; , @&quot;623155&quot; , @&quot;623157&quot; , @&quot;623158&quot; , @&quot;623159&quot; , @&quot;999999&quot; , @&quot;621222&quot; , @&quot;623020&quot; , @&quot;623021&quot; , @&quot;623022&quot; , @&quot;623023&quot; , @&quot;622630&quot; , @&quot;622631&quot; , @&quot;622632&quot; , @&quot;622633&quot; , @&quot;622615&quot; , @&quot;622616&quot; , @&quot;622618&quot; , @&quot;622622&quot; , @&quot;622617&quot; , @&quot;622619&quot; , @&quot;415599&quot; , @&quot;421393&quot; , @&quot;421865&quot; , @&quot;427570&quot; , @&quot;427571&quot; , @&quot;472067&quot; , @&quot;472068&quot; , @&quot;622620&quot; , @&quot;621691&quot; , @&quot;545392&quot; , @&quot;545393&quot; , @&quot;545431&quot; , @&quot;545447&quot; , @&quot;356859&quot; , @&quot;356857&quot; , @&quot;407405&quot; , @&quot;421869&quot; , @&quot;421870&quot; , @&quot;421871&quot; , @&quot;512466&quot; , @&quot;356856&quot; , @&quot;528948&quot; , @&quot;552288&quot; , @&quot;622600&quot; , @&quot;622601&quot; , @&quot;622602&quot; , @&quot;517636&quot; , @&quot;622621&quot; , @&quot;628258&quot; , @&quot;556610&quot; , @&quot;622603&quot; , @&quot;464580&quot; , @&quot;464581&quot; , @&quot;523952&quot; , @&quot;545217&quot; , @&quot;553161&quot; , @&quot;356858&quot; , @&quot;622623&quot; , @&quot;625911&quot; , @&quot;377152&quot; , @&quot;377153&quot; , @&quot;377158&quot; , @&quot;377155&quot; , @&quot;625912&quot; , @&quot;625913&quot; , @&quot;356885&quot; , @&quot;356886&quot; , @&quot;356887&quot; , @&quot;356888&quot; , @&quot;356890&quot; , @&quot;402658&quot; , @&quot;410062&quot; , @&quot;439188&quot; , @&quot;439227&quot; , @&quot;468203&quot; , @&quot;479228&quot; , @&quot;479229&quot; , @&quot;512425&quot; , @&quot;521302&quot; , @&quot;524011&quot; , @&quot;356889&quot; , @&quot;545620&quot; , @&quot;545621&quot; , @&quot;545947&quot; , @&quot;545948&quot; , @&quot;552534&quot; , @&quot;552587&quot; , @&quot;622575&quot; , @&quot;622576&quot; , @&quot;622577&quot; , @&quot;622579&quot; , @&quot;622580&quot; , @&quot;545619&quot; , @&quot;622581&quot; , @&quot;622582&quot; , @&quot;622588&quot; , @&quot;622598&quot; , @&quot;622609&quot; , @&quot;690755&quot; , @&quot;690755&quot; , @&quot;545623&quot; , @&quot;621286&quot; , @&quot;620520&quot; , @&quot;621483&quot; , @&quot;621485&quot; , @&quot;621486&quot; , @&quot;628290&quot; , @&quot;622578&quot; , @&quot;370285&quot; , @&quot;370286&quot; , @&quot;370287&quot; , @&quot;370289&quot; , @&quot;439225&quot; , @&quot;518710&quot; , @&quot;518718&quot; , @&quot;628362&quot; , @&quot;439226&quot; , @&quot;628262&quot; , @&quot;625802&quot; , @&quot;625803&quot; , @&quot;621299&quot; , @&quot;966666&quot; , @&quot;622909&quot; , @&quot;622908&quot; , @&quot;438588&quot; , @&quot;438589&quot; , @&quot;461982&quot; , @&quot;486493&quot; , @&quot;486494&quot; , @&quot;486861&quot; , @&quot;523036&quot; , @&quot;451289&quot; , @&quot;527414&quot; , @&quot;528057&quot; , @&quot;622901&quot; , @&quot;622902&quot; , @&quot;622922&quot; , @&quot;628212&quot; , @&quot;451290&quot; , @&quot;524070&quot; , @&quot;625084&quot; , @&quot;625085&quot; , @&quot;625086&quot; , @&quot;625087&quot; , @&quot;548738&quot; , @&quot;549633&quot; , @&quot;552398&quot; , @&quot;625082&quot; , @&quot;625083&quot; , @&quot;625960&quot; , @&quot;625961&quot; , @&quot;625962&quot; , @&quot;625963&quot; , @&quot;356851&quot; , @&quot;356852&quot; , @&quot;404738&quot; , @&quot;404739&quot; , @&quot;456418&quot; , @&quot;498451&quot; , @&quot;515672&quot; , @&quot;356850&quot; , @&quot;517650&quot; , @&quot;525998&quot; , @&quot;622177&quot; , @&quot;622277&quot; , @&quot;622516&quot; , @&quot;622517&quot; , @&quot;622518&quot; , @&quot;622520&quot; , @&quot;622521&quot; , @&quot;622522&quot; , @&quot;622523&quot; , @&quot;628222&quot; , @&quot;628221&quot; , @&quot;984301&quot; , @&quot;984303&quot; , @&quot;622176&quot; , @&quot;622276&quot; , @&quot;622228&quot; , @&quot;621352&quot; , @&quot;621351&quot; , @&quot;621390&quot; , @&quot;621792&quot; , @&quot;625957&quot; , @&quot;625958&quot; , @&quot;621791&quot; , @&quot;620530&quot; , @&quot;625993&quot; , @&quot;622519&quot; , @&quot;621793&quot; , @&quot;621795&quot; , @&quot;621796&quot; , @&quot;622500&quot; , @&quot;623078&quot; , @&quot;622384&quot; , @&quot;940034&quot; , @&quot;940015&quot; , @&quot;622886&quot; , @&quot;622391&quot; , @&quot;940072&quot; , @&quot;622359&quot; , @&quot;940066&quot; , @&quot;622857&quot; , @&quot;940065&quot; , @&quot;621019&quot; , @&quot;622309&quot; , @&quot;621268&quot; , @&quot;622884&quot; , @&quot;621453&quot; , @&quot;622684&quot; , @&quot;621016&quot; , @&quot;621015&quot; , @&quot;622950&quot; , @&quot;622951&quot; , @&quot;621072&quot; , @&quot;623183&quot; , @&quot;623185&quot; , @&quot;621005&quot; , @&quot;622172&quot; , @&quot;622985&quot; , @&quot;622987&quot; , @&quot;622267&quot; , @&quot;622278&quot; , @&quot;622279&quot; , @&quot;622468&quot; , @&quot;622892&quot; , @&quot;940021&quot; , @&quot;621050&quot; , @&quot;620522&quot; , @&quot;356827&quot; , @&quot;356828&quot; , @&quot;356830&quot; , @&quot;402673&quot; , @&quot;402674&quot; , @&quot;438600&quot; , @&quot;486466&quot; , @&quot;519498&quot; , @&quot;520131&quot; , @&quot;524031&quot; , @&quot;548838&quot; , @&quot;622148&quot; , @&quot;622149&quot; , @&quot;622268&quot; , @&quot;356829&quot; , @&quot;622300&quot; , @&quot;628230&quot; , @&quot;622269&quot; , @&quot;625099&quot; , @&quot;625953&quot; , @&quot;625350&quot; , @&quot;625351&quot; , @&quot;625352&quot; , @&quot;519961&quot; , @&quot;625839&quot; , @&quot;421317&quot; , @&quot;602969&quot; , @&quot;621030&quot; , @&quot;621420&quot; , @&quot;621468&quot; , @&quot;623111&quot; , @&quot;422160&quot; , @&quot;422161&quot; , @&quot;622865&quot; , @&quot;940012&quot; , @&quot;623131&quot; , @&quot;622178&quot; , @&quot;622179&quot; , @&quot;628358&quot; , @&quot;622394&quot; , @&quot;940025&quot; , @&quot;621279&quot; , @&quot;622281&quot; , @&quot;622316&quot; , @&quot;940022&quot; , @&quot;621418&quot; , @&quot;512431&quot; , @&quot;520194&quot; , @&quot;621626&quot; , @&quot;623058&quot; , @&quot;602907&quot; , @&quot;622986&quot; , @&quot;622989&quot; , @&quot;622298&quot; , @&quot;622338&quot; , @&quot;940032&quot; , @&quot;623205&quot; , @&quot;621977&quot; , @&quot;990027&quot; , @&quot;622325&quot; , @&quot;623029&quot; , @&quot;623105&quot; , @&quot;621244&quot; , @&quot;623081&quot; , @&quot;623108&quot; , @&quot;566666&quot; , @&quot;622455&quot; , @&quot;940039&quot; , @&quot;622466&quot; , @&quot;628285&quot; , @&quot;622420&quot; , @&quot;940041&quot; , @&quot;623118&quot; , @&quot;603708&quot; , @&quot;622993&quot; , @&quot;623070&quot; , @&quot;623069&quot; , @&quot;623172&quot; , @&quot;623173&quot; , @&quot;622383&quot; , @&quot;622385&quot; , @&quot;628299&quot; , @&quot;603506&quot; , @&quot;603367&quot; , @&quot;622878&quot; , @&quot;623061&quot; , @&quot;623209&quot; , @&quot;628242&quot; , @&quot;622595&quot; , @&quot;622303&quot; , @&quot;622305&quot; , @&quot;621259&quot; , @&quot;622596&quot; , @&quot;622333&quot; , @&quot;940050&quot; , @&quot;621439&quot; , @&quot;623010&quot; , @&quot;621751&quot; , @&quot;628278&quot; , @&quot;625502&quot; , @&quot;625503&quot; , @&quot;625135&quot; , @&quot;622476&quot; , @&quot;621754&quot; , @&quot;622143&quot; , @&quot;940001&quot; , @&quot;623026&quot; , @&quot;623086&quot; , @&quot;628291&quot; , @&quot;621532&quot; , @&quot;621482&quot; , @&quot;622135&quot; , @&quot;622152&quot; , @&quot;622153&quot; , @&quot;622154&quot; , @&quot;622996&quot; , @&quot;622997&quot; , @&quot;940027&quot; , @&quot;623099&quot; , @&quot;623007&quot; , @&quot;940055&quot; , @&quot;622397&quot; , @&quot;622398&quot; , @&quot;940054&quot; , @&quot;622331&quot; , @&quot;622426&quot; , @&quot;625995&quot; , @&quot;621452&quot; , @&quot;628205&quot; , @&quot;628214&quot; , @&quot;625529&quot; , @&quot;622428&quot; , @&quot;621529&quot; , @&quot;622429&quot; , @&quot;621417&quot; , @&quot;623089&quot; , @&quot;623200&quot; , @&quot;940057&quot; , @&quot;622311&quot; , @&quot;623119&quot; , @&quot;622877&quot; , @&quot;622879&quot; , @&quot;621775&quot; , @&quot;623203&quot; , @&quot;603601&quot; , @&quot;622137&quot; , @&quot;622327&quot; , @&quot;622340&quot; , @&quot;622366&quot; , @&quot;622134&quot; , @&quot;940018&quot; , @&quot;623016&quot; , @&quot;623096&quot; , @&quot;940049&quot; , @&quot;622425&quot; , @&quot;622425&quot; , @&quot;621577&quot; , @&quot;622485&quot; , @&quot;623098&quot; , @&quot;628329&quot; , @&quot;621538&quot; , @&quot;940006&quot; , @&quot;621269&quot; , @&quot;622275&quot; , @&quot;621216&quot; , @&quot;622465&quot; , @&quot;940031&quot; , @&quot;621252&quot; , @&quot;622146&quot; , @&quot;940061&quot; , @&quot;621419&quot; , @&quot;623170&quot; , @&quot;622440&quot; , @&quot;940047&quot; , @&quot;940017&quot; , @&quot;622418&quot; , @&quot;623077&quot; , @&quot;622413&quot; , @&quot;940002&quot; , @&quot;623188&quot; , @&quot;622310&quot; , @&quot;940068&quot; , @&quot;622321&quot; , @&quot;625001&quot; , @&quot;622427&quot; , @&quot;940069&quot; , @&quot;623039&quot; , @&quot;628273&quot; , @&quot;622370&quot; , @&quot;683970&quot; , @&quot;940074&quot; , @&quot;621437&quot; , @&quot;628319&quot; , @&quot;990871&quot; , @&quot;622308&quot; , @&quot;621415&quot; , @&quot;623166&quot; , @&quot;622132&quot; , @&quot;621340&quot; , @&quot;621341&quot; , @&quot;622140&quot; , @&quot;623073&quot; , @&quot;622147&quot; , @&quot;621633&quot; , @&quot;622301&quot; , @&quot;623171&quot; , @&quot;621422&quot; , @&quot;622335&quot; , @&quot;622336&quot; , @&quot;622165&quot; , @&quot;622315&quot; , @&quot;628295&quot; , @&quot;625950&quot; , @&quot;621760&quot; , @&quot;622337&quot; , @&quot;622411&quot; , @&quot;623102&quot; , @&quot;622342&quot; , @&quot;623048&quot; , @&quot;622367&quot; , @&quot;622392&quot; , @&quot;623085&quot; , @&quot;622395&quot; , @&quot;622441&quot; , @&quot;622448&quot; , @&quot;621413&quot; , @&quot;622856&quot; , @&quot;621037&quot; , @&quot;621097&quot; , @&quot;621588&quot; , @&quot;623032&quot; , @&quot;622644&quot; , @&quot;623518&quot; , @&quot;622870&quot; , @&quot;622866&quot; , @&quot;623072&quot; , @&quot;622897&quot; , @&quot;628279&quot; , @&quot;622864&quot; , @&quot;621403&quot; , @&quot;622561&quot; , @&quot;622562&quot; , @&quot;622563&quot; , @&quot;622167&quot; , @&quot;622777&quot; , @&quot;621497&quot; , @&quot;622868&quot; , @&quot;622899&quot; , @&quot;628255&quot; , @&quot;625988&quot; , @&quot;622566&quot; , @&quot;622567&quot; , @&quot;622625&quot; , @&quot;622626&quot; , @&quot;625946&quot; , @&quot;628200&quot; , @&quot;621076&quot; , @&quot;504923&quot; , @&quot;622173&quot; , @&quot;622422&quot; , @&quot;622447&quot; , @&quot;622131&quot; , @&quot;940076&quot; , @&quot;621579&quot; , @&quot;622876&quot; , @&quot;622873&quot; , @&quot;622962&quot; , @&quot;622936&quot; , @&quot;623060&quot; , @&quot;622937&quot; , @&quot;623101&quot; , @&quot;621460&quot; , @&quot;622939&quot; , @&quot;622960&quot; , @&quot;623523&quot; , @&quot;621591&quot; , @&quot;622961&quot; , @&quot;628210&quot; , @&quot;622283&quot; , @&quot;625902&quot; , @&quot;621010&quot; , @&quot;622980&quot; , @&quot;623135&quot; , @&quot;621726&quot; , @&quot;621088&quot; , @&quot;620517&quot; , @&quot;622740&quot; , @&quot;625036&quot; , @&quot;621014&quot; , @&quot;621004&quot; , @&quot;622972&quot; , @&quot;623196&quot; , @&quot;621028&quot; , @&quot;623083&quot; , @&quot;628250&quot; , @&quot;623121&quot; , @&quot;621070&quot; , @&quot;628253&quot; , @&quot;622979&quot; , @&quot;621035&quot; , @&quot;621038&quot; , @&quot;621086&quot; , @&quot;621498&quot; , @&quot;621296&quot; , @&quot;621448&quot; , @&quot;622945&quot; , @&quot;621755&quot; , @&quot;622940&quot; , @&quot;623120&quot; , @&quot;628355&quot; , @&quot;621089&quot; , @&quot;623161&quot; , @&quot;628339&quot; , @&quot;621074&quot; , @&quot;621515&quot; , @&quot;623030&quot; , @&quot;621345&quot; , @&quot;621090&quot; , @&quot;623178&quot; , @&quot;621091&quot; , @&quot;623168&quot; , @&quot;621057&quot; , @&quot;623199&quot; , @&quot;621075&quot; , @&quot;623037&quot; , @&quot;628303&quot; , @&quot;621233&quot; , @&quot;621235&quot; , @&quot;621223&quot; , @&quot;621780&quot; , @&quot;621221&quot; , @&quot;623138&quot; , @&quot;628389&quot; , @&quot;621239&quot; , @&quot;623068&quot; , @&quot;621271&quot; , @&quot;628315&quot; , @&quot;621272&quot; , @&quot;621738&quot; , @&quot;621273&quot; , @&quot;623079&quot; , @&quot;621263&quot; , @&quot;621325&quot; , @&quot;623084&quot; , @&quot;621327&quot; , @&quot;621753&quot; , @&quot;628331&quot; , @&quot;623160&quot; , @&quot;621366&quot; , @&quot;621388&quot; , @&quot;621348&quot; , @&quot;621359&quot; , @&quot;621360&quot; , @&quot;621217&quot; , @&quot;622959&quot; , @&quot;621270&quot; , @&quot;622396&quot; , @&quot;622511&quot; , @&quot;623076&quot; , @&quot;621391&quot; , @&quot;621339&quot; , @&quot;621469&quot; , @&quot;621625&quot; , @&quot;623688&quot; , @&quot;623113&quot; , @&quot;621601&quot; , @&quot;621655&quot; , @&quot;621636&quot; , @&quot;623182&quot; , @&quot;623087&quot; , @&quot;621696&quot; , @&quot;622955&quot; , @&quot;622478&quot; , @&quot;940013&quot; , @&quot;621495&quot; , @&quot;621688&quot; , @&quot;623162&quot; , @&quot;622462&quot; , @&quot;628272&quot; , @&quot;625101&quot; , @&quot;622323&quot; , @&quot;623071&quot; , @&quot;603694&quot; , @&quot;622128&quot; , @&quot;622129&quot; , @&quot;623035&quot; , @&quot;623186&quot; , @&quot;621522&quot; , @&quot;622271&quot; , @&quot;940037&quot; , @&quot;940038&quot; , @&quot;985262&quot; , @&quot;622322&quot; , @&quot;628381&quot; , @&quot;622481&quot; , @&quot;622341&quot; , @&quot;940058&quot; , @&quot;623115&quot; , @&quot;621258&quot; , @&quot;621465&quot; , @&quot;621528&quot; , @&quot;622328&quot; , @&quot;940062&quot; , @&quot;625288&quot; , @&quot;623038&quot; , @&quot;625888&quot; , @&quot;622332&quot; , @&quot;940063&quot; , @&quot;623123&quot; , @&quot;622138&quot; , @&quot;621066&quot; , @&quot;621560&quot; , @&quot;621068&quot; , @&quot;620088&quot; , @&quot;621067&quot; , @&quot;622531&quot; , @&quot;622329&quot; , @&quot;623103&quot; , @&quot;622339&quot; , @&quot;620500&quot; , @&quot;621024&quot; , @&quot;622289&quot; , @&quot;622389&quot; , @&quot;628300&quot; , @&quot;625516&quot; , @&quot;621516&quot; , @&quot;622859&quot; , @&quot;622869&quot; , @&quot;623075&quot; , @&quot;622895&quot; , @&quot;623125&quot; , @&quot;622947&quot; , @&quot;621561&quot; , @&quot;623095&quot; , @&quot;621073&quot; , @&quot;623109&quot; , @&quot;621361&quot; , @&quot;623033&quot; , @&quot;623207&quot; , @&quot;622891&quot; , @&quot;621363&quot; , @&quot;623189&quot; , @&quot;623510&quot; , @&quot;622995&quot; , @&quot;621053&quot; , @&quot;621230&quot; , @&quot;621229&quot; , @&quot;622218&quot; , @&quot;628267&quot; , @&quot;621392&quot; , @&quot;621481&quot; , @&quot;621310&quot; , @&quot;621396&quot; , @&quot;623251&quot; , @&quot;628351&quot;]; int index = -1; if(idCard==nil || idCard.length19){ return @&quot;&quot;; } //6位Bin号 NSString* cardbin_6 = [idCard substringWithRange:NSMakeRange(0, 6)]; for (int i = 0; i &lt; bankBin.count; i++) { if ([cardbin_6 isEqualToString:bankBin[i]]) { index = i; } } if (index != -1) { return bankName[index]; } //8位Bin号 NSString* cardbin_8 = [idCard substringWithRange:NSMakeRange(0, 8)]; for (int i = 0; i &lt; bankBin.count; i++) { if ([cardbin_8 isEqualToString:bankBin[i]]) { index = i; } } if (index != -1) { return bankName[index]; } return @””;}","categories":[],"tags":[],"keywords":[]},{"title":"","slug":"iOS/webviewTojs","date":"2018-07-18T07:07:56.000Z","updated":"2018-07-18T07:07:56.000Z","comments":true,"path":"2018/07/18/iOS/webviewTojs/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/webviewTojs/","excerpt":"","text":"要点 native -&gt; js主要是通过 直接 执行一段 js 函数代码 1，context.evaluateScript(“SwiftFunc()”)//异步 2, webView.stringByEvaluatingJavaScriptFromString(“SwiftFunc()”)//同步 //同步 js -&gt; native 1.通过context?.setObject(unsafeBitCast(temp, to: AnyObject.self), forKeyedSubscript: “test2” as (NSCopying &amp; NSObjectProtocol)!) 2,通过新建model后 通过 setObject注入model， 而model要实现protocol，protocol是要 执行的方法。 在js中onclick 中 实现 model.func() swift文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159 // Swift 调用JS 方法 （无参数） @IBAction func swift_js_pargram(_ sender: AnyObject) &#123; _ = self.context?.evaluateScript(\"Swift_JS1()\")// self.webView.stringByEvaluatingJavaScriptFromString(\"Swift_JS1()\") // 此方法也可行 &#125; // Swift 调用JS 方法 （有参数） @IBAction func swift_js_nopargam(_ sender: AnyObject) &#123; _ = self.context?.evaluateScript(\"Swift_JS2('oc' ,'Swift')\")// self.webView.stringByEvaluatingJavaScriptFromString(\"Swift_JS2('oc','swift')\") // 此方法也可行 &#125; func menthod1() &#123; print(\"JS调用了无参数swift方法\") &#125; func menthod2(_ str1: String, str2: String) &#123; print(\"JS调用了有参数swift方法:参数为\\(str1),\\(str2)\") &#125; func webView(_ webView: UIWebView, didFailLoadWithError error: Error) &#123; print(error) &#125; &#125;extension ViewController: UIWebViewDelegate &#123; func webView(_ webView: UIWebView, shouldStartLoadWith request: URLRequest, navigationType: UIWebViewNavigationType) -&gt; Bool &#123; return true &#125; func webViewDidStartLoad(_ webView: UIWebView) &#123; print(\"webViewDidStartLoad----\") &#125; func webViewDidFinishLoad(_ webView: UIWebView) &#123; print(\"webViewDidFinishLoad----\") self.context = webView.value(forKeyPath: \"documentView.webView.mainFrame.javaScriptContext\") as? JSContext // JS调用了无参数swift方法 let temp1: @convention(block) () -&gt;() = &#123; self.menthod1() &#125; self.context?.setObject(unsafeBitCast(temp1, to: AnyObject.self), forKeyedSubscript: \"showAlart1\" as (NSCopying &amp; NSObjectProtocol)!) // JS调用了有参数swift方法 let temp2: @convention(block) () -&gt;() = &#123; let array = JSContext.currentArguments() // 这里接到的array中的内容是JSValue类型 for object in array! &#123; print(object) &#125; self.menthod2((array?[0] as AnyObject).toString(), str2: (array?[1] as AnyObject).toString()) &#125; self.context?.setObject(unsafeBitCast(temp2, to: AnyObject.self), forKeyedSubscript: \"test2\" as (NSCopying &amp; NSObjectProtocol)!) // 模型注入的方法 let model = JSObjCModel() model.controller = self model.jsContext = context // 这一步是将OCModel这个模型注入到JS中，在JS就可以通过OCModel调用我们暴露的方法了。 context?.setObject(model, forKeyedSubscript: \"OCModel\" as (NSCopying &amp; NSObjectProtocol)!) &#125;&#125;@objc protocol JavaScriptSwiftDelegate: JSExport &#123; func callSystemCamera() func showAlert(_ title: String, msg: String) func callWithDict(_ dict: [String: AnyObject]) func jsCallObjcAndObjcCallJsWithDict(_ dict: [String: AnyObject])&#125;@objc class JSObjCModel: NSObject, JavaScriptSwiftDelegate ,UIImagePickerControllerDelegate,UIActionSheetDelegate,UINavigationControllerDelegate &#123; weak var controller: UIViewController? weak var jsContext: JSContext? func callSystemCamera() &#123; print(controller.debugDescription) let imagePickerController:UIImagePickerController = UIImagePickerController() imagePickerController.delegate = self imagePickerController.allowsEditing = true//true为拍照、选择完进入图片编辑模式 imagePickerController.sourceType = .camera controller?.present(imagePickerController, animated: true, completion: nil)// let jsFunc = self.jsContext?.objectForKeyedSubscript(\"jsFunc\");// _ = jsFunc?.call(withArguments: []); &#125; func showAlert(_ title: String, msg: String) &#123; DispatchQueue.main.async &#123; () -&gt; Void in let alert = UIAlertController(title: title, message: msg, preferredStyle: .alert) alert.addAction(UIAlertAction(title: \"ok\", style: .default, handler: nil)) self.controller?.present(alert, animated: true, completion: nil) &#125; &#125; // JS调用了我们的方法 func callWithDict(_ dict: [String : AnyObject]) &#123; print(\"js call objc method: callWithDict, args: %@\", dict) &#125; // JS调用了我们的又去 func jsCallObjcAndObjcCallJsWithDict(_ dict: [String : AnyObject]) &#123; print(\"js call objc method: jsCallObjcAndObjcCallJsWithDict, args: %@\", dict) // let jsParamFunc = self.jsContext?.objectForKeyedSubscript(\"jsParamFunc\");// let dict = NSDictionary(dictionary: [\"age\": 18, \"height\": 168, \"name\": \"lili\"])// // _ = jsParamFunc?.call(withArguments: [dict])// // _ = JSContext.currentArguments() let url = Bundle.main.url(forResource: \"rc_ac_audio_file_icon.png\", withExtension: nil) let data = NSData.init(contentsOf: url!) let jsPar = jsContext?.objectForKeyedSubscript(\"showImgFunc\");// let argument = image as? NSData ?? NSData() _ = jsPar?.call(withArguments: [data!]) &#125; // func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) &#123; // let image = info[UIImagePickerControllerEditedImage] //as? UIImage ?? UIImage()// // let jsPar = jsContext?.objectForKeyedSubscript(\"jsParamFunc\");// let argument = image as? NSData ?? NSData()// // _ = jsPar?.call(withArguments: [argument])// &#125; html文件`html JS调用Swift方法(无参) JS调用Swift方法(传参) &lt;!-- 模型注入 --&gt; &lt;b&gt;model 注入&lt;/b&gt; &lt;div style=&quot;margin-top: 100px&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;Call ObjC system camera&quot; onclick=&quot;OCModel.callSystemCamera()&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;Call ObjC system alert&quot; onclick=&quot;OCModel.showAlertMsg(&apos;js title&apos;, &apos;js message&apos;)&quot;&gt; &lt;/div&gt; &lt;/hr&gt; &lt;div&gt; &lt;input type=&quot;button&quot; value=&quot;Call ObjC func with JSON &quot; onclick=&quot;OCModel.callWithDict({&apos;name&apos;: &apos;testname&apos;, &apos;age&apos;: 10, &apos;height&apos;: 170})&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;Call ObjC func with JSON and ObjC call js func to pass args.&quot; onclick=&quot;OCModel.jsCallObjcAndObjcCallJsWithDict({&apos;name&apos;: &apos;testname&apos;, &apos;age&apos;: 10, &apos;height&apos;: 170})&quot;&gt; &lt;/div&gt; &lt;div bgcolor=&quot;#ddd0&quot;&gt; &lt;span id=&quot;jsParamFuncSpan&quot; style=&quot;color: red; font-size: 50px;&quot;&gt;interHtml&lt;/span&gt; &lt;/div&gt; &lt;div bgcolor=&quot;#0000&quot;&gt; &lt;img id=&quot;imgShowDiv&quot; src=&quot;&quot; width=&quot;300px&quot; height=&quot;300px&quot; style=&quot;display: block;&quot; /&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; function jsFunc() { alert(&apos;Objective-C call js to show alert&apos;); } // 注意哦，如果JS写错，可能在OC调用JS方法时，都会出错哦。 var jsParamFunc = function(argument) { document.getElementById(&apos;jsParamFuncSpan&apos;).innerHTML = argument[&apos;name&apos;]; }","categories":[],"tags":[],"keywords":[]},{"title":"","slug":"Web/简单shell脚本","date":"2018-07-18T07:07:56.000Z","updated":"2018-07-18T07:07:56.000Z","comments":true,"path":"2018/07/18/Web/简单shell脚本/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Web/简单shell脚本/","excerpt":"","text":"` //获取输入 echo “Input you name” read NAME echo “Hello,$NAME” //变量 var1 = “value1” var2 = var1 // for skill in Java C++ do echo ‘i am good at ${skill} Script’ done bash常用 判断 1）判断表达式 if test (表达式为真) if test !表达式为假 test 表达式1 –a 表达式2 两个表达式都为真 test 表达式1 –o 表达式2 两个表达式有一个为真 2）判断字符串 test –n 字符串 字符串的长度非零 test –z 字符串 字符串的长度为零 test 字符串1＝字符串2 字符串相等 test 字符串1！＝字符串2 字符串不等 3）判断整数 test 整数1 –eq 整数2 整数相等 test 整数1 –ge 整数2 整数1大于等于整数2 test 整数1 –gt 整数2 整数1大于整数2 test 整数1 –le 整数2 整数1小于等于整数2 test 整数1 –lt 整数2 整数1小于整数2 test 整数1 –ne 整数2 整数1不等于整数2 4）判断文件 test File1 –ef File2 两个文件具有同样的设备号和i结点号 test File1 –nt File2 文件1比文件2 新 test File1 –ot File2 文件1比文件2 旧 test –b File 文件存在并且是块设备文件 test –c File 文件存在并且是字符设备文件 test –d File 文件存在并且是目录 test –e File 文件存在 test –f File 文件存在并且是正规文件 test –g File 文件存在并且是设置了组ID test –G File 文件存在并且属于有效组ID test –h File 文件存在并且是一个符号链接（同-L） test –k File 文件存在并且设置了sticky位 test –b File 文件存在并且是块设备文件 test –L File 文件存在并且是一个符号链接（同-h） test –o File 文件存在并且属于有效用户ID test –p File 文件存在并且是一个命名管道 test –r File 文件存在并且可读 test –s File 文件存在并且是一个套接字 test –t FD 文件描述符是在一个终端打开的 test –u File 文件存在并且设置了它的set-user-id位 test –w File 文件存在并且可写 test –x File 文件存在并且可执行#!/bin/shecho “Please input your name”read PERSONecho “Hello,${PERSON}” for循环for loop in java php do echo “i am good at $loop Script” done echo $HOME while循环COUNTER=0while [ $COUNTER lt 5 ]do COUNTER=”expr $COUNTER+1” COUNTER = COUNTER+1 echo $COUNTERdone 数组my_array=(A B “C” D) 相等num1=100num2=100if test $[num1] -eq $[num2]then echo ‘两个数相等！’else echo ‘两个数不相等！’fi 函数demoFun(){ echo “这是我的第一个 shell 函数!”}echo “—–函数开始执行—–”demoFunecho “—–函数执行完毕—–” # 运算符 说明 举例-eq 检测两个数是否相等，相等返回 true。 [ $a -eq $b ] 返回 true。-ne 检测两个数是否相等，不相等返回 true。 [ $a -ne $b ] 返回 true。-gt 检测左边的数是否大于右边的，如果是，则返回 true。 [ $a -gt $b ] 返回 false。-lt 检测左边的数是否小于右边的，如果是，则返回 true。 [ $a -lt $b ] 返回 true。-ge 检测左边的数是否大等于右边的，如果是，则返回 true。 [ $a -ge $b ] 返回 false。-le 检测左边的数是否小于等于右边的，如果是，则返回 true [ $a -le $b ] 返回 true。1,简单shell模拟登录echo -n “login:”read nameecho -n “password:”read password if [ $name = “root” -a $password = “adc” ]; then #statements echo &quot;The Host and password is right&quot; else echo &quot;Host or password Error&quot; fi 2,比较两个数的大小echo “Please enter two number”read aread bif test $a -eq $b ; then #statements echo &quot;a = b&quot; else echo “a != b”fi 3,查找/root/目录下是否存在该文件echo “enter a file name”read fileif test -e /root/$file; then echo “the file exists”else echo “the file is not exists”fi 4.给函数传递参数func() { num1=$1 echo “–func–${num}”}func $@ 5.检查端口号是否已启动n=1echo “检查3306 mysql 端口” while truedo if test $n -gt 20 then echo “3306服务启动失败” break fi sleep 5 n=$(($n+1)) # port=`netstat -antp | grep &quot;localhost:3306&quot;` port = `netstat -nat | grep 3306` # port = `lsof -i tcp:3306` if [ ${#port} -gt 3 ]; then echo &quot;3306服务已经启动&quot; break; fi done","categories":[],"tags":[],"keywords":[]},{"title":"","slug":"iOS/swift3 协议","date":"2018-07-18T07:07:54.000Z","updated":"2018-07-18T07:07:54.000Z","comments":true,"path":"2018/07/18/iOS/swift3 协议/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/swift3 协议/","excerpt":"","text":"//: Playground - noun: a place where people can play`swiftimport UIKit var str = “Hello, playground”class Person { let name: String init(name: String) { self.name = name } var classes: Classess? deinit { print(&quot;\\(name) is being deinitialized&quot;) } } class Classess { let no: String init(no: String) { self.no = no } weak var member: Person? deinit { print(&quot;Apartment \\(no) is being deinitialized&quot;) } } let p1 = Person.init(name: “zhanshan”)let c1 = Classess.init(no: “111”) p1.classes = c1c1.member = p1 print(p1.classes ?? “”)print(c1.member ?? “”)extension Double { var km:Double { return self*888} } let d1:Double = 2d1.km //protocol SomeProtocol { var value1: String { get set } var value2: String { get } static var value3:String { get } //异变方法 mutating func getName() }//protocol TwoProtocol { }//多承载protocol AllProtocol: SomeProtocol, TwoProtocol { //定义属性别名 associatedtype DefineType var weight:DefineType { get } } //结构体继承协议struct Toprotocol:SomeProtocol { mutating internal func getName() { self.value1 = &quot;edit&quot; } internal var value1: String internal var value2: String internal static var value3: String = &quot;value3&quot; var value4:String } var struct1 = Toprotocol.init(value1: “value1”, value2: “value2”, value4: “value4”) var struct2:Toprotocol = struct1struct2.value2 = “2” //定义别名类型struct MobilePhone:AllProtocol { typealias DefineType = Double internal var weight: Double mutating internal func getName() { value2 = &quot;changed&quot; } internal static var value3: String = &quot;&quot; internal var value2: String internal var value1: String } let mobile1 = MobilePhone.DefineType()var mobile2 = MobilePhone.init(weight: 25, value2: “value2”, value1: “value1”)mobile2.getName() //Swift标准库协议 //1, 比较相关的协议struct Student1:Equatable { var math:Int var english:Int static func == (lhs: Student1, rhs: Student1) -&gt; Bool { return lhs.english == rhs.english &amp;&amp; lhs.math == rhs.math } }//Student遵守Equatablelet s1 = Student1.init(math: 20, english: 30)let s2 = Student1.init(math: 20, english: 40)let isTrue1 = s1 == s2 //2, 自定义比较协议public protocol ZZNCompareable { static func &lt; (lhs:Self,rhs:Self) -&gt;Bool} struct Student2:ZZNCompareable { var studentName1:String var studentName2:String //重载 &lt; 运算符 static func &lt; (lhs:Student2,rhs:Student2) -&gt;Bool { return lhs.studentName1 == rhs.studentName2 } //重载 &lt;= 运算符 static func &lt;= (lhs:Student2,rhs:Student2) -&gt;Bool { return lhs.studentName1 == rhs.studentName2 } //重载 &gt; 运算符 static func &gt; (lhs:Student2,rhs:Student2) -&gt;Bool { return lhs.studentName1 == rhs.studentName2 } //重载 &gt;= 运算符 static func &gt;= (lhs:Student2,rhs:Student2) -&gt;Bool { return lhs.studentName1 == rhs.studentName2 } } let ss2 = Student2.init(studentName1: “zz”, studentName2: “zz”)let ss22 = Student2.init(studentName1: “zz”, studentName2: “zw”)ss2 &lt; ss22 //struct Student3: Comparable { var math: Int var english: Int //重载 &lt; 运算符 static func &lt; (lhs:Student3,rhs:Student3) -&gt;Bool { return (lhs.math + lhs.english) &lt; (rhs.math + rhs.english) } //重载 &lt;= 运算符 static func &lt;= (lhs:Student3,rhs:Student3) -&gt;Bool { return (lhs.math + lhs.english) &lt;= (rhs.math + rhs.english) } //重载 &gt; 运算符 static func &gt; (lhs:Student3,rhs:Student3) -&gt;Bool { return (lhs.math + lhs.english) &gt; (rhs.math + rhs.english) } //重载 &gt;= 运算符 static func &gt;= (lhs:Student3,rhs:Student3) -&gt;Bool { return (lhs.math + lhs.english) &gt;= (rhs.math + rhs.english) } //重载 == 运算符 static func == (lhs:Student3,rhs:Student3) -&gt;Bool { return (lhs.math + lhs.english) == (rhs.math + rhs.english) } } let s3_left = Student3(math: 80, english: 60)let s3_right = Student3(math: 70, english: 90)s3_left &gt; s3_right //—–//枚举继承协议protocol NetServiceProtocol { var netName:String { get }//只需实现get mutating func change()//外部修改enum 枚举值 } enum NetServiceType:NetServiceProtocol { case union(String) case mobile(String) case telecom(String) mutating func change() { self = .mobile(&quot;mobile&quot;) } var netName: String { get { return NetServiceType.mobile(&quot;mobile&quot;).netName } } }","categories":[],"tags":[],"keywords":[]},{"title":"","slug":"iOS/runtime","date":"2018-07-18T07:07:54.000Z","updated":"2018-07-18T07:07:54.000Z","comments":true,"path":"2018/07/18/iOS/runtime/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/runtime/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950func test() &#123; var count:UInt32 = 0 let cla = NSClassFromString(\"LDShareContentModel\") let properties = class_copyPropertyList(cla, &amp;count) for i in 0..&lt;count &#123; let index = Int(i) let property = properties[index] let propertyName = property_getName(property) let strName = String.fromCString(propertyName) print(\"---\",strName) &#125; free(properties) // count = 0 let methods = class_copyMethodList(cla, &amp;count) for i in 0..&lt;count &#123; let index = Int(i) let method = methods[index] let sel = method_getName(method) let selName = sel_getName(sel) let argumentNum = method_getNumberOfArguments(method) print(\"selName:\" + \"\\(String.fromCString(selName))---&gt;\" + \"\\(Int(argumentNum))\")//\"个返回值\") var point:Int8 = 0 let argument = method_getReturnType(method, &amp;point, Int(argumentNum))// print(argument) let str = String.fromCString(&amp;point) print(str) &#125; &#125; ` swizzle 交换selector123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566/** * 分类的目的：实现两个方法实现的交换，调用原有方法，有现有方法(自己实现方法)的实现。 */@interface NSObject (MethodSwizzling)/** * 交换对象方法 * * @param origSelector 原有方法 * @param swizzleSelector 现有方法(自己实现方法) */+ (void)yz_swizzleInstanceSelector:(SEL)origSelector swizzleSelector:(SEL)swizzleSelector;/** * 交换类方法 * * @param origSelector 原有方法 * @param swizzleSelector 现有方法(自己实现方法) */+ (void)yz_swizzleClassSelector:(SEL)origSelector swizzleSelector:(SEL)swizzleSelector;@end@implementation NSObject (MethodSwizzling)+ (void)yz_swizzleInstanceSelector:(SEL)origSelector swizzleSelector:(SEL)swizzleSelector &#123; // 获取原有方法 Method origMethod = class_getInstanceMethod(self, origSelector); // 获取交换方法 Method swizzleMethod = class_getInstanceMethod(self, swizzleSelector); // 注意：不能直接交换方法实现，需要判断原有方法是否存在,存在才能交换 // 如何判断？添加原有方法，如果成功，表示原有方法不存在，失败，表示原有方法存在 // 原有方法可能没有实现，所以这里添加方法实现，用自己方法实现 // 这样做的好处：方法不存在，直接把自己方法的实现作为原有方法的实现，调用原有方法，就会来到当前方法的实现 BOOL isAdd = class_addMethod(self, origSelector, method_getImplementation(swizzleMethod), method_getTypeEncoding(swizzleMethod)); if (!isAdd) &#123; // 添加方法失败，表示原有方法存在，直接替换 method_exchangeImplementations(origMethod, swizzleMethod); &#125;else &#123; class_replaceMethod(self, swizzleSelector, method_getImplementation(origMethod), method_getTypeEncoding(origMethod)); &#125;&#125;+ (void)yz_swizzleClassSelector:(SEL)origSelector swizzleSelector:(SEL)swizzleSelector&#123; // 获取原有方法 Method origMethod = class_getClassMethod(self, origSelector); // 获取交换方法 Method swizzleMethod = class_getClassMethod(self, swizzleSelector); // 添加原有方法实现为当前方法实现 BOOL isAdd = class_addMethod(self, origSelector, method_getImplementation(swizzleMethod), method_getTypeEncoding(swizzleMethod)); if (!isAdd) &#123; // 添加方法失败，原有方法存在，直接替换 method_exchangeImplementations(origMethod, swizzleMethod); &#125;&#125; // Singleton`swift func show() { print(&quot;这里是即将要推迟&quot;) } func test() { defer { show() } if str.characters.count &gt;= 2 { print(&quot;跳出该方法的执行&quot;) return } } final class single:NSObject { static let shared = single() private override init(){} func getName() { print(&quot;getName&quot;); } } test()single.shared.getName() final class Single4: NSObject { static var shared: Single4 { struct Static { static let instance: Single4 = Single4() } return Static.instance } private override init() {}} final class Single3:NSObject { class func shared() -&gt; Single3 { struct sta { static let instance:Single3 = Single3(); } return sta.instance } func getname() { } }Single3.shared().getname()","categories":[],"tags":[],"keywords":[]},{"title":"python高级用法(装饰器，迭代器，生成器，闭包)","slug":"Server/python高级用法(装饰器，迭代器，生成器，闭包)","date":"2018-07-18T07:07:54.000Z","updated":"2018-07-19T01:03:49.667Z","comments":true,"path":"2018/07/18/Server/python高级用法(装饰器，迭代器，生成器，闭包)/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Server/python高级用法(装饰器，迭代器，生成器，闭包)/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170import types# 生成器a = [x for x in range(5)]b = (x for x in range(5))print(a,b)for i in b: print(\"迭代器：\",i)# 自定义迭代器def creatNum(num = 5): a,b = 0,1 for i in range(num): yield b a,b = b,a+bval1 = creatNum(5)# print(next(val1))for i in val1: print(\"自定义迭代器：\",i)# 迭代器 判断import collectionsisR = isinstance(a, collections.Iterator)isR1 = isinstance(iter(a), collections.Iterator)print(isR,isR1)# 闭包def colsure(a,b,func): print(\"---\") c = a + b func(c)def exc_func(num): print(\"执行函数\",num)colsure(1,2,exc_func)# 装饰器def check(func): print(\"校验中。。。。\") def inner(): if True: func() else: pass return inner()@checkdef exec1(): print(\"执行操作\")# 多个装饰器def makeBold(func): def wrapperd(): return \"&lt;b&gt;\" + func() + \"&lt;/b&gt;\" return wrapperd #返回函数的指针def makeItaic(func): def wrapperd(): return \"&lt;i&gt;\" + func() + \"&lt;/i&gt;\" return wrapperd@makeBold@makeItaicdef printHello(): return \"hello,world\"val2 = printHello()print(val2)# 通用装饰器def common_check(func): def func_exc(*args,**kwargs): print(\"记录日志。。。\") ret = func(*args,**kwargs) return ret return func_exc@common_checkdef test(a,b): print(a,b) return a + bprint(test(1,2))# 带有参数的装饰器# 先执行 参数 -&gt; 在执行装饰函数def checkArgs(arg) : print(arg) def common_check(func) : def func_exc(*args, **kwargs): print(\"记录日志。。。\") if args == None: ret = func(*args, **kwargs) return ret else: ret = func(*args, **kwargs) return ret+arg return func_exc return common_check@checkArgs(\"alex\")def test1(a,b): print(a,b) return a + bprint(test1(\"1\",\"2\"))print(globals())print(locals())# 动态添加 类属性 属性 对象方法class Person() : def __init__(self): pass#绑定 对象方法def address(self): print(\"hangzhou\")#绑定静态方法@staticmethoddef country(): print(\"china\")@classmethoddef area(): print(\"asian\")p1 = Person()p1.age = 10Person.names = \"zhangshan\"Person.counory = countryPerson.area = areap1.address = types.MethodType(address,p1)p1.address()#def int_max(bits, signed): bits = bits - 1 if signed else bits #条件限制 print(bits)int_max(8,False)#slotsclass Bird: __slots__ = (\"name\",\"age\")b = Bird()b.name = \"zhanshan\"b.age = 19# b.add = \"\"# 类的装饰器class decorate: def __init__(self,func): print(\"初始化\") self.__func = func def __call__(self, *args, **kwargs): print(\"装饰器的功能\") self.__func()@decoratedef test_dec(): print(\"desc\")test_dec() 原类` 原类person = type(“Person2”, (), {“num”: 0})print(person) 继承def func3(self): print(“绑定原类 方法”)p3 = type(“Person3”, (object,), {“name”: “cat”})p3.func3 = types.MethodType(func3, p3) p3.func3() 自定义 类class PrefixMetaclass(type): def __new__(cls, name, bases, attrs): # 给所有属性和方法前面加上前缀 my_ _attrs = ((&apos;my_&apos; + name, value) for name, value in attrs.items()) _attrs = dict((name, value) for name, value in _attrs) # 转化为字典 _attrs[&apos;echo&apos;] = lambda self, phrase: phrase # 增加了一个 echo 方法 return type.__new__(cls, name, bases, _attrs) # 返回创建后的类 class Foo(metaclass=PrefixMetaclass): # __metaclass__ = creatClass #python2 bar = &quot;bar&quot; f1 = Foo()print(f1.echo(“dd”))print(hasattr(Foo,”my_bar”)) # #偏函数def showargs(*args, **wargs): print(args) print(wargs)p1 = functools.partial(showargs,1,2,3)p1() #warps 装饰器（不影响原有函数的 说明文档）import functoolsdef check2(func): “check2” @functools.wraps(func) def warp(): “warp” print(“装饰器”) func() return warp @check2def function2(): “function2–help” print(“function2”) function2()print(help(function2))print(function2.doc)","categories":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}],"tags":[],"keywords":[{"name":"Server","slug":"Server","permalink":"https://Alexzzn.github.io/categories/Server/"}]},{"title":"","slug":"iOS/WebviewBridge小结","date":"2018-07-18T07:07:52.000Z","updated":"2018-07-18T07:07:52.000Z","comments":true,"path":"2018/07/18/iOS/WebviewBridge小结/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/iOS/WebviewBridge小结/","excerpt":"","text":"html 页面1234567891011121314151617181920212223242526272829 //1 申请交互function setupWebViewJavascriptBridge(callback) &#123; if (window.WebViewJavascriptBridge) &#123; return callback(WebViewJavascriptBridge); &#125; if (window.WVJBCallbacks) &#123; return window.WVJBCallbacks.push(callback); &#125; window.WVJBCallbacks = [callback]; var WVJBIframe = document.createElement('iframe'); WVJBIframe.style.display = 'none'; WVJBIframe.src = 'https://__bridge_loaded__'; document.documentElement.appendChild(WVJBIframe); setTimeout(function() &#123; document.documentElement.removeChild(WVJBIframe) &#125;, 0) &#125; //注册 回调 setupWebViewJavascriptBridge(function(bridge) &#123; &lt;!--oc -&gt; js --&gt; bridge.registerHandler('testJavascriptHandler', function(data, responseCallback) &#123; alert(\"收到Native的通知\") var responseData = &#123; 'Javascript Says':'Right back atcha!----' &#125; responseCallback(responseData)&#125;) &lt;!--js -&gt; oc --&gt; var callbackButton = document.getElementById('btn') callbackButton.onclick = function(e) &#123; bridge.callHandler('jsToOc2', &#123;'foo': 'bar'&#125;, function(response) &#123; //执行js操作 &#125;) &#125; native 代码 `swift //1,js -&gt; oc _bridge = [WebViewJavascriptBridge bridgeForWebView:webView]; [_bridge registerHandler:@”jsToOc” handler:^(id data, WVJBResponseCallback responseCallback) { UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&quot;通知&quot; message:@&quot;js 调用 oc 方法&quot; delegate:nil cancelButtonTitle:@&quot;OK&quot; otherButtonTitles:nil, nil]; [alert show]; responseCallback(@&quot;Response from testObjcCallback&quot;); }]; //2,oc -&gt; js [callbackButton addTarget:self action:@selector(callHandler:) forControlEvents:UIControlEventTouchUpInside]; btn.bk_whenTap({^(UIButton *btn) id data = @{ @&quot;greetingFromObjC&quot;: @&quot;这是Native&quot; }; [_bridge callHandler:@&quot;testJavascriptHandler&quot; data:data responseCallback:^(id response) { NSLog(@&quot;testJavascriptHandler responded: %@&quot;, response); }]; }","categories":[],"tags":[],"keywords":[]},{"title":"drawlayout","slug":"Android/drawlayout","date":"2018-07-18T07:07:52.000Z","updated":"2018-07-19T01:08:26.811Z","comments":true,"path":"2018/07/18/Android/drawlayout/","link":"","permalink":"https://Alexzzn.github.io/2018/07/18/Android/drawlayout/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253public class Main4Activity extends AppCompatActivity &#123; private ListView mLv; private DrawerLayout drawerLayout; private FrameLayout mContentLayout; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_drawerlayout); mLv = (ListView) findViewById(R.id.left_lv); drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout); mContentLayout = (FrameLayout) findViewById(R.id.drawer_content); drawerLayout.addDrawerListener(new DrawerLayout.DrawerListener() &#123; @Override public void onDrawerSlide(View drawerView, float slideOffset) &#123; //抽屉滑动式回调的方法 Log.i(\"tag\",\"---onDrawerSlide---\"+slideOffset); &#125; @Override public void onDrawerOpened(View drawerView) &#123; //抽屉打开时会回调的方法 Log.i(\"tag\",\"---onDrawerOpened---\"); &#125; @Override public void onDrawerClosed(View drawerView) &#123; Log.i(\"tag\",\"---onDrawerClosed---\"); &#125; @Override public void onDrawerStateChanged(int newState) &#123; //抽屉的状态改变时会回调的方法 Log.i(\"tag\",\"---onDrawerStateChanged---\"); &#125; &#125;); mLv.setOnItemClickListener(new AdapterView.OnItemClickListener() &#123; @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123; TextView textView = (TextView)view; Toast.makeText(getApplicationContext(),textView.getText().toString(),Toast.LENGTH_SHORT).show(); &#125; &#125;); &#125; public void open(View view) &#123; drawerLayout.openDrawer(mLv); &#125;&#125; `xml&lt;?xml version=”1.0” encoding=”utf-8”?&gt; &lt;android.support.v4.widget.DrawerLayout xmlns:android=”http://schemas.android.com/apk/res/android&quot; xmlns:app=”http://schemas.android.com/apk/res-auto&quot; xmlns:tools=”http://schemas.android.com/tools&quot; android:id=&quot;@+id/drawer_layout&quot; android:layout_height=&quot;match_parent&quot; android:layout_width=&quot;match_parent&quot;&gt; &lt;FrameLayout android:id=&quot;@+id/drawer_content&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#00ffff&quot;&gt; &lt;Button android:id=&quot;@+id/open&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;打开抽屉&quot; android:onClick=&quot;open&quot;/&gt; &lt;/FrameLayout&gt; &lt;ListView android:id=&quot;@+id/left_lv&quot; android:layout_width=&quot;200dp&quot; android:layout_height=&quot;match_parent&quot; android:layout_gravity=&quot;start&quot; android:background=&quot;#ff0033&quot; android:entries=&quot;@array/books&quot;&gt; &lt;/ListView&gt; &lt;/android.support.v4.widget.DrawerLayout&gt;","categories":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}],"tags":[],"keywords":[{"name":"Android","slug":"Android","permalink":"https://Alexzzn.github.io/categories/Android/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-07-17T02:35:25.564Z","updated":"2018-07-18T10:12:42.246Z","comments":true,"path":"2018/07/17/hello-world/","link":"","permalink":"https://Alexzzn.github.io/2018/07/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}